initSidebarItems({"enum":[["IdentityMapping","This is a marker type that specifies that we are in an environment with an identity-mapped virtual address space, and so we are able to access the page tables through their physical addresses directly. This is true in the bootloader, as UEFI passes control to our bootloader with the entire physical address space identity-mapped into the virtual address space."],["Level1",""],["Level2",""],["Level3",""],["Level4",""],["RecursiveMapping","This is a marker type that specifies that we are in an environment where the active P4 page table should always have a recursive entry - an entry that contains the physical address of the P4 itself. This allows us to access the backing memory of the page tables through special virtual addresses that \"loop\" through the recursive P4 entry to access every level of the page tables."]],"struct":[["Table","Represents a page table, with 512 entries which are either child tables (in P4s, P3s and P2s) or physical frames (in P1s). Every page table is exactly a page in length."]],"trait":[["HierarchicalLevel","Tables of levels that implement `HierarchicalLevel` are page tables whose entries are other tables, as opposed to actual frames (like in P1s). This makes accessing the next level type-safe, as the `next_table` methods are only implemented for tables that have child tables."],["TableLevel",""],["TableMapping","This trait specifies how we should access and modify a set of page tables, allowing us to use the same data structures in the bootloader and kernel. This is implemented by `IdentityMapping` and `RecursiveMapping`."]]});