var N = null;var searchIndex = {};
searchIndex["bit_field"]={"doc":"Provides the abstraction of a bit field, which allows for…","items":[[8,"BitField","bit_field","A generic trait which provides methods for extracting and…",N,N],[10,"bit_length","","Returns the length, eg number of bits, in this bit field.",0,[[],["usize"]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",0,[[["self"],["usize"]],["bool"]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",0,[[["self"],["range",["usize"]]],["self"]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",0,[[["self"],["usize"],["bool"]],["self"]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",0,[[["self"],["range",["usize"]],["self"]],["self"]]],[8,"BitArray","","",N,N],[10,"bit_length","","Returns the length, eg number of bits, in this bit array.",1,[[["self"]],["usize"]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",1,[[["self"],["usize"]],["bool"]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",1,[[["self"],["range",["usize"]]],["t"]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",1,[[["self"],["usize"],["bool"]]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",1,[[["self"],["range",["usize"]],["t"]]]]],"paths":[[8,"BitField"],[8,"BitArray"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of…","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["kernel"]={"doc":"","items":[[5,"kmain","kernel","This is the entry point for the kernel on x86_64. It is…",N,N],[5,"panic","","",N,N],[0,"x86_64","","This module defines the kernel entry-point on x86_64.",N,N],[5,"kmain","kernel::x86_64","This is the entry point for the kernel on x86_64. It is…",N,N],[0,"logger","","",N,N],[3,"KernelLogger","kernel::x86_64::logger","This handles calls to the log macros throughout the…",N,N],[7,"COM1","","The COM1 serial port, accessed through the UART 16550…",N,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"enabled","","",0,[[["self"],["metadata"]],["bool"]]],[11,"log","","",0,[[["self"],["record"]]]],[11,"flush","","",0,[[["self"]]]]],"paths":[[3,"KernelLogger"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has…",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't…",N,N],[4,"Level","","An enum representing the available verbosity levels of the…",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters…",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata…",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with…",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in…",N,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["spin"]={"doc":"Synchronization primitives based on spinning","items":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",N,N],[3,"MutexGuard","","A guard to which the protected data can be accessed",N,N],[3,"RwLock","","A reader-writer lock",N,N],[3,"RwLockReadGuard","","A guard to which the protected data can be read",N,N],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",N,N],[3,"Once","","A synchronization primitive which can be used to run a…",N,N],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[["self"]],["t"]]],[11,"lock","","Locks the spinlock and returns a guard.",0,[[["self"]],["mutexguard"]]],[11,"force_unlock","","Force unlock the spinlock.",0,[[["self"]]]],[11,"try_lock","","Tries to lock the mutex. If it is already locked, it will…",0,[[["self"]],["option",["mutexguard"]]]],[11,"new","","Creates a new spinlock wrapping the supplied data.",1,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",1,[[["self"]],["t"]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",1,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempt to acquire this lock with shared read access.",1,[[["self"]],["option",["rwlockreadguard"]]]],[11,"force_read_decrement","","Force decrement the reader count.",1,[[["self"]]]],[11,"force_write_unlock","","Force unlock exclusive write access.",1,[[["self"]]]],[11,"write","","Lock this rwlock with exclusive write access, blocking the…",1,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",1,[[["self"]],["option",["rwlockwriteguard"]]]],[18,"INIT","","Initialization constant of `Once`.",2,N],[11,"new","","Creates a new `Once` value.",2,[[],["once"]]],[11,"call_once","","Performs an initialization routine once and only once. The…",2,[[["self"],["f"]],["t"]]],[11,"try","","Returns a pointer iff the `Once` was previously initialized",2,[[["self"]],["option"]]],[11,"wait","","Like try, but will spin if the `Once` is in the process of…",2,[[["self"]],["option"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"deref_mut","","",3,[[["self"]],["t"]]],[11,"deref_mut","","",5,[[["self"]],["t"]]],[11,"drop","","The dropping of the MutexGuard will release the lock it…",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"default","","",0,[[],["mutex"]]],[11,"default","","",1,[[],["rwlock"]]]],"paths":[[3,"Mutex"],[3,"RwLock"],[3,"Once"],[3,"MutexGuard"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]};
searchIndex["x86_64"]={"doc":"","items":[[0,"boot","x86_64","",N,N],[3,"BootInfo","x86_64::boot","This structure is placed in memory by the bootloader and a…",N,N],[0,"hw","x86_64","",N,N],[0,"port","x86_64::hw","",N,N],[3,"Port","x86_64::hw::port","Represents an IO port that can be read and written to…",N,N],[8,"PortSize","","Implemented by the types used to represent 8-bit, 16-bit,…",N,N],[10,"port_read","","",0,[[["u16"]],["self"]]],[10,"port_write","","",0,[[["u16"],["self"]]]],[11,"new","","Create a new `Port` at the specified I/O address. Unsafe…",1,[[["u16"]],["port"]]],[11,"read","","",1,[[["self"]],["t"]]],[11,"write","","",1,[[["self"],["t"]]]],[0,"registers","x86_64::hw","",N,N],[17,"EFER","x86_64::hw::registers","",N,N],[0,"serial","x86_64::hw","",N,N],[3,"SerialPort","x86_64::hw::serial","",N,N],[17,"COM1","","",N,N],[11,"new","","",2,[[["u16"]],["serialport"]]],[11,"initialise","","",2,[[["self"]]]],[11,"read","","",2,[[["self"]],["u8"]]],[11,"write","","",2,[[["self"],["u8"]]]],[0,"tlb","x86_64::hw","",N,N],[5,"invalidate_page","x86_64::hw::tlb","",N,[[["virtualaddress"]]]],[5,"flush","","",N,[[]]],[0,"memory","x86_64","",N,N],[3,"PhysicalAddress","x86_64::memory","Represents an address in the physical memory space. A…",N,N],[3,"VirtualAddress","","Represents a canonical virtual address. To be canonical,…",N,N],[0,"kernel_map","","These constants define the layout of the memory map when…",N,N],[17,"RECURSIVE_ENTRY","x86_64::memory::kernel_map","We use the 510th entry of the PML4 (P4) to access the page…",N,N],[17,"P4_TABLE_ADDRESS","","This address can be used to access the currently mapped P4…",N,N],[17,"KERNEL_BASE","","This is the base of the kernel address space. It starts at…",N,N],[17,"HEAP_START","","",N,N],[17,"HEAP_END","","",N,N],[17,"LOCAL_APIC_CONFIG_PAGE","","",N,N],[0,"paging","x86_64::memory","",N,N],[8,"Deref","x86_64::memory::paging","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",3,N],[10,"deref","","Dereferences the value.",3,N],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",N,N],[10,"deref_mut","","Mutably dereferences the value.",4,N],[3,"InactivePageTable","","Represents a set of page tables that are not currently…",N,N],[3,"ActivePageTable","","Represents the set of page tables that are currently being…",N,N],[0,"entry","","",N,N],[3,"Entry","x86_64::memory::paging::entry","",N,N],[3,"EntryFlags","","",N,N],[18,"PRESENT","","",5,N],[18,"WRITABLE","","",5,N],[18,"USER_ACCESSIBLE","","",5,N],[18,"WRITE_THROUGH","","",5,N],[18,"NO_CACHE","","",5,N],[18,"ACCESSED","","",5,N],[18,"DIRTY","","",5,N],[18,"HUGE_PAGE","","",5,N],[18,"GLOBAL","","",5,N],[18,"NO_EXECUTE","","",5,N],[11,"empty","","Returns an empty set of flags.",5,[[],["entryflags"]]],[11,"all","","Returns the set containing all flags.",5,[[],["entryflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",5,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",5,[[["u64"]],["option",["entryflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",5,[[["u64"]],["entryflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",5,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",5,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",5,[[["self"],["entryflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",5,[[["self"],["entryflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",5,[[["self"],["entryflags"]]]],[11,"remove","","Removes the specified flags in-place.",5,[[["self"],["entryflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",5,[[["self"],["entryflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",5,[[["self"],["entryflags"],["bool"]]]],[11,"is_compatible","","",5,[[["self"],["entryflags"]],["bool"]]],[11,"is_unused","","",6,[[["self"]],["bool"]]],[11,"set_unused","","",6,[[["self"]]]],[11,"flags","","",6,[[["self"]],["entryflags"]]],[11,"pointed_frame","","",6,[[["self"]],["option",["frame"]]]],[11,"set","","",6,[[["self"],["frame"],["entryflags"]]]],[0,"frame","x86_64::memory::paging","",N,N],[3,"Frame","x86_64::memory::paging::frame","",N,N],[11,"contains","","",7,[[["physicaladdress"]],["frame"]]],[11,"start_address","","",7,[[["self"]],["physicaladdress"]]],[0,"frame_allocator","x86_64::memory::paging","",N,N],[8,"FrameAllocator","x86_64::memory::paging::frame_allocator","`FrameAllocator` represents the `x86_64` crate's interface…",N,N],[11,"allocate","","Allocate a `Frame`. If there are no remaining free frames,…",8,[[["self"]],["result",["frame"]]]],[10,"allocate_n","","Allocate `n` contiguous `Frame`s, if possible.",8,[[["self"],["u64"]],["result",["range"]]]],[10,"free","","Free a previously-allocated frame, marking it available…",8,[[["self"],["frame"]]]],[0,"mapper","x86_64::memory::paging","",N,N],[3,"Mapper","x86_64::memory::paging::mapper","A `Mapper` allows you to change the virtual to physical…",N,N],[11,"translate","","Get the `PhysicalAddress` a given `VirtualAddress` is…",9,[[["self"],["virtualaddress"]],["option",["physicaladdress"]]]],[11,"translate_page","","Get the physical `Frame` that a given virtual `Page` is…",9,[[["self"],["page"]],["option",["frame"]]]],[11,"map","","Map the given `Page` somewhere in physical memory.…",9,[[["self"],["page"],["entryflags"],["a"]]]],[11,"map_to","","",9,[[["self"],["page"],["frame"],["entryflags"],["a"]]]],[11,"unmap","","",9,[[["self"],["page"],["a"]]]],[0,"page","x86_64::memory::paging","",N,N],[3,"Page","x86_64::memory::paging::page","",N,N],[11,"contains","","Get the page that contains the given virtual address.",10,[[["virtualaddress"]],["page"]]],[11,"start_address","","",10,[[["self"]],["virtualaddress"]]],[11,"p4_index","","",10,[[["self"]],["u16"]]],[11,"p3_index","","",10,[[["self"]],["u16"]]],[11,"p2_index","","",10,[[["self"]],["u16"]]],[11,"p1_index","","",10,[[["self"]],["u16"]]],[0,"table","x86_64::memory::paging","This module contains types for representing raw page…",N,N],[3,"Table","x86_64::memory::paging::table","Represents a page table, with 512 entries which are either…",N,N],[4,"Level4","","",N,N],[4,"Level3","","",N,N],[4,"Level2","","",N,N],[4,"Level1","","",N,N],[4,"IdentityMapping","","This is a marker type that specifies that we are in an…",N,N],[4,"RecursiveMapping","","This is a marker type that specifies that we are in an…",N,N],[8,"TableLevel","","",N,N],[8,"HierarchicalLevel","","Tables of levels that implement `HierarchicalLevel` are…",N,N],[16,"NextLevel","","",11,N],[8,"TableMapping","","This trait specifies how we should access and modify a set…",N,N],[10,"next_table_address","","",12,[[["table"],["u16"]],["option",["virtualaddress"]]]],[11,"zero","","",13,[[["self"]]]],[11,"next_table","","",13,[[["self"],["u16"]],["option",["table"]]]],[11,"next_table_mut","","",13,[[["self"],["u16"]],["option",["table"]]]],[11,"next_table_create","","",13,[[["self"],["u16"],["bool"],["a"]],["table"]]],[17,"FRAME_SIZE","x86_64::memory::paging","",N,N],[17,"PAGE_SIZE","","",N,N],[11,"mapper","","",14,[[["self"]],["mapper",["identitymapping"]]]],[11,"new","","Create a new set of page-tables. `frame` must be an…",14,[[["frame"]],["inactivepagetable"]]],[11,"switch_to","","Switch to this set of page tables. This returns a tuple…",14,N],[11,"switch_to","","Switch to this set of page tables. This returns a tuple…",14,N],[11,"new","","Create an `ActivePageTable` to represent an active set of…",15,[[["physicaladdress"]],["activepagetable",["identitymapping"]]]],[11,"new","","Create an `ActivePageTable` to represent the…",15,[[],["activepagetable",["recursivemapping"]]]],[11,"with","","Alter the mappings of a `InactivePageTable` by temporarily…",15,[[["self"],["inactivepagetable"],["a"],["f"]]]],[11,"new","x86_64::memory","",16,[[["u64"]],["option",["physicaladdress"]]]],[11,"new_unchecked","","",16,[[["u64"]],["physicaladdress"]]],[11,"offset_into_frame","","",16,[[["self"]],["u64"]]],[11,"is_frame_aligned","","",16,[[["self"]],["bool"]]],[11,"new","","Create a new `VirtualAddress` from the given address. If…",17,[[["u64"]],["option",["virtualaddress"]]]],[11,"new_unchecked","","Create a new `VirtualAddress` from the given address,…",17,[[["u64"]],["virtualaddress"]]],[11,"new_canonicalise","","Create a new `VirtualAddress` from the given address,…",17,[[["u64"]],["virtualaddress"]]],[11,"from_page_table_offsets","","",17,[[["u16"],["u16"],["u16"],["u16"],["usize"]],["virtualaddress"]]],[11,"ptr","","",17,N],[11,"mut_ptr","","",17,N],[11,"offset","","",17,[[["self"],["i64"]],["virtualaddress"]]],[11,"is_page_aligned","","",17,[[["self"]],["bool"]]],[11,"is_aligned_to","","",17,[[["self"],["u64"]],["bool"]]],[11,"offset_into_page","","",17,[[["self"]],["u64"]]],[11,"canonicalise","","Addresses are always expected by the CPU to be canonical…",17,[[["self"]],["virtualaddress"]]],[14,"read_control_reg","x86_64","Read a control register. The name of the control register…",N,N],[14,"write_control_reg","","Write to a control register. Calls to this macro will need…",N,N],[14,"read_msr","","Read from a model-specific register.",N,N],[14,"write_msr","","Write to a model-specific register. This is unsafe,…",N,N],[11,"try_from","x86_64::boot","",18,[[["u"]],["result"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw::port","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw::serial","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory","",16,[[["u"]],["result"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging","",14,[[["u"]],["result"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging::entry","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging::frame","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging::mapper","",9,[[["u"]],["result"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging::page","",10,[[["u"]],["result"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging::table","",13,[[["u"]],["result"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"next_table_address","","",23,[[["table"],["u16"]],["option",["virtualaddress"]]]],[11,"next_table_address","","",24,[[["table"],["u16"]],["option",["virtualaddress"]]]],[11,"eq","x86_64::memory::paging::entry","",5,[[["self"],["entryflags"]],["bool"]]],[11,"ne","","",5,[[["self"],["entryflags"]],["bool"]]],[11,"eq","x86_64::memory::paging::frame","",7,[[["self"],["frame"]],["bool"]]],[11,"ne","","",7,[[["self"],["frame"]],["bool"]]],[11,"eq","x86_64::memory::paging::page","",10,[[["self"],["page"]],["bool"]]],[11,"ne","","",10,[[["self"],["page"]],["bool"]]],[11,"eq","x86_64::memory","",16,[[["self"],["physicaladdress"]],["bool"]]],[11,"eq","","",17,[[["self"],["virtualaddress"]],["bool"]]],[11,"cmp","x86_64::memory::paging::entry","",5,[[["self"],["entryflags"]],["ordering"]]],[11,"cmp","x86_64::memory::paging::frame","",7,[[["self"],["frame"]],["ordering"]]],[11,"cmp","x86_64::memory::paging::page","",10,[[["self"],["page"]],["ordering"]]],[11,"cmp","x86_64::memory","",16,[[["self"],["physicaladdress"]],["ordering"]]],[11,"cmp","","",17,[[["self"],["virtualaddress"]],["ordering"]]],[11,"partial_cmp","x86_64::memory::paging::entry","",5,[[["self"],["entryflags"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["entryflags"]],["bool"]]],[11,"le","","",5,[[["self"],["entryflags"]],["bool"]]],[11,"gt","","",5,[[["self"],["entryflags"]],["bool"]]],[11,"ge","","",5,[[["self"],["entryflags"]],["bool"]]],[11,"partial_cmp","x86_64::memory::paging::frame","",7,[[["self"],["frame"]],["option",["ordering"]]]],[11,"lt","","",7,[[["self"],["frame"]],["bool"]]],[11,"le","","",7,[[["self"],["frame"]],["bool"]]],[11,"gt","","",7,[[["self"],["frame"]],["bool"]]],[11,"ge","","",7,[[["self"],["frame"]],["bool"]]],[11,"partial_cmp","x86_64::memory::paging::page","",10,[[["self"],["page"]],["option",["ordering"]]]],[11,"lt","","",10,[[["self"],["page"]],["bool"]]],[11,"le","","",10,[[["self"],["page"]],["bool"]]],[11,"gt","","",10,[[["self"],["page"]],["bool"]]],[11,"ge","","",10,[[["self"],["page"]],["bool"]]],[11,"partial_cmp","x86_64::memory","",16,[[["self"],["physicaladdress"]],["option",["ordering"]]]],[11,"partial_cmp","","",17,[[["self"],["virtualaddress"]],["option",["ordering"]]]],[11,"fmt","x86_64::memory::paging::entry","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::paging::frame","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::paging::page","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"add","x86_64::memory::paging::frame","",7,N],[11,"add","x86_64::memory::paging::page","",10,N],[11,"add","x86_64::memory","",16,N],[11,"add","","",17,N],[11,"sub","x86_64::memory::paging::entry","Returns the set difference of the two sets of flags.",5,[[["self"],["entryflags"]],["entryflags"]]],[11,"sub","x86_64::memory","",16,N],[11,"sub","","",17,N],[11,"add_assign","x86_64::memory::paging::frame","",7,[[["self"],["u64"]]]],[11,"add_assign","x86_64::memory::paging::page","",10,[[["self"],["u64"]]]],[11,"sub_assign","x86_64::memory::paging::entry","Disables all flags enabled in the set.",5,[[["self"],["entryflags"]]]],[11,"not","","Returns the complement of this set of flags.",5,[[["self"]],["entryflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",5,[[["self"],["entryflags"]],["entryflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",5,[[["self"],["entryflags"]],["entryflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",5,[[["self"],["entryflags"]],["entryflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",5,[[["self"],["entryflags"]]]],[11,"bitor_assign","","Adds the set of flags.",5,[[["self"],["entryflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",5,[[["self"],["entryflags"]]]],[11,"deref","x86_64::memory::paging","",15,N],[11,"deref_mut","","",15,N],[11,"index","x86_64::memory::paging::table","",13,[[["self"],["u16"]],["entry"]]],[11,"index_mut","","",13,[[["self"],["u16"]],["entry"]]],[11,"hash","x86_64::memory::paging::entry","",5,N],[11,"from_iter","","",5,[[["t"]],["entryflags"]]],[11,"steps_between","x86_64::memory::paging::frame","",7,[[["self"],["self"]],["option",["usize"]]]],[11,"replace_one","","",7,[[["self"]],["self"]]],[11,"replace_zero","","",7,[[["self"]],["self"]]],[11,"add_one","","",7,[[["self"]],["self"]]],[11,"sub_one","","",7,[[["self"]],["self"]]],[11,"add_usize","","",7,[[["self"],["usize"]],["option"]]],[11,"steps_between","x86_64::memory::paging::page","",10,[[["self"],["self"]],["option",["usize"]]]],[11,"replace_one","","",10,[[["self"]],["self"]]],[11,"replace_zero","","",10,[[["self"]],["self"]]],[11,"add_one","","",10,[[["self"]],["self"]]],[11,"sub_one","","",10,[[["self"]],["self"]]],[11,"add_usize","","",10,[[["self"],["usize"]],["option"]]],[11,"extend","x86_64::memory::paging::entry","",5,[[["self"],["t"]]]],[11,"write_str","x86_64::hw::serial","",2,[[["self"],["str"]],["result"]]],[11,"fmt","x86_64::memory::paging::entry","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::paging::entry","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory","",16,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"from","","",17,N],[11,"from","","",17,N],[11,"clone","x86_64::memory::paging::entry","",5,[[["self"]],["entryflags"]]],[11,"clone","x86_64::memory::paging::frame","",7,[[["self"]],["frame"]]],[11,"clone","x86_64::memory::paging::page","",10,[[["self"]],["page"]]],[11,"clone","x86_64::memory","",16,[[["self"]],["physicaladdress"]]],[11,"clone","","",17,[[["self"]],["virtualaddress"]]],[11,"default","x86_64::memory::paging::entry","",5,[[],["entryflags"]]],[11,"default","x86_64::memory","",16,[[],["physicaladdress"]]],[11,"default","","",17,[[],["virtualaddress"]]]],"paths":[[8,"PortSize"],[3,"Port"],[3,"SerialPort"],[8,"Deref"],[8,"DerefMut"],[3,"EntryFlags"],[3,"Entry"],[3,"Frame"],[8,"FrameAllocator"],[3,"Mapper"],[3,"Page"],[8,"HierarchicalLevel"],[8,"TableMapping"],[3,"Table"],[3,"InactivePageTable"],[3,"ActivePageTable"],[3,"PhysicalAddress"],[3,"VirtualAddress"],[3,"BootInfo"],[4,"Level4"],[4,"Level3"],[4,"Level2"],[4,"Level1"],[4,"IdentityMapping"],[4,"RecursiveMapping"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
