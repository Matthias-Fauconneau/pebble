var N = null;var searchIndex = {};
searchIndex["acpi"]={"doc":"","items":[[3,"AmlNamespace","acpi","",N,N],[3,"Processor","","",N,N],[12,"processor_uid","","",0,N],[12,"local_apic_id","","",0,N],[12,"state","","The state of this processor. Always check that the…",0,N],[12,"is_ap","","Whether this processor is the Bootstrap Processor (BSP),…",0,N],[3,"PhysicalMapping","","Describes a physical mapping created by…",N,N],[12,"physical_start","","",1,N],[12,"virtual_start","","",1,N],[12,"region_length","","",1,N],[12,"mapped_length","","",1,N],[3,"AcpiStaticInfo","","All the information from parsing the static tables. This…",N,N],[4,"AmlError","","",N,N],[13,"EndOfStream","","",2,N],[13,"UnexpectedByte","","",2,N],[13,"IncompatibleValueConversion","","",2,N],[13,"InvalidPath","","",2,N],[13,"InvalidFieldFlags","","",2,N],[13,"InvalidNameSeg","","",2,N],[13,"NeedsBacktrack","","This is a special error type that marks that the parser…",2,N],[4,"MadtError","","",N,N],[13,"UnexpectedEntry","","",3,N],[13,"InterruptOverrideEntryHasInvalidBus","","",3,N],[13,"InvalidLocalNmiLine","","",3,N],[13,"NoLocalNmiLineSpecified","","",3,N],[13,"MpsIntiInvalidPolarity","","",3,N],[13,"MpsIntiInvalidTriggerMode","","",3,N],[4,"AcpiError","","",N,N],[13,"RsdpIncorrectSignature","","",4,N],[13,"RsdpInvalidOemId","","",4,N],[13,"RsdpInvalidChecksum","","",4,N],[13,"NoValidRsdp","","",4,N],[13,"SdtInvalidSignature","","",4,N],[13,"SdtInvalidOemId","","",4,N],[13,"SdtInvalidTableId","","",4,N],[13,"SdtInvalidChecksum","","",4,N],[13,"InvalidAmlTable","","",4,N],[13,"InvalidMadt","","",4,N],[4,"ProcessorState","","",N,N],[13,"Disabled","","A processor in this state is unusable, and you must not…",5,N],[13,"WaitingForSipi","","A processor waiting for a SIPI (Startup Inter-processor…",5,N],[13,"Running","","A Running processor is currently brought up and running…",5,N],[5,"search_for_rsdp_bios","","This is the entry point of `acpi` if you have no…",N,[[["h"]],["result",["acpistaticinfo","acpierror"]]]],[5,"parse_rsdp","","This is the entry point of `acpi` if you have the physical…",N,[[["h"],["usize"]],["result",["acpistaticinfo","acpierror"]]]],[5,"parse_rsdt","","This is the entry point of `acpi` if you already have the…",N,[[["h"],["u8"],["usize"]],["result",["acpistaticinfo","acpierror"]]]],[11,"parse_aml_tables","","",6,[[["acpistaticinfo"],["h"]],["result",["amlnamespace","acpierror"]]]],[0,"interrupt","","",N,N],[3,"IoApic","acpi::interrupt","",N,N],[12,"id","","",7,N],[12,"address","","",7,N],[12,"global_system_interrupt_base","","",7,N],[3,"InterruptSourceOverride","","Describes a difference in the mapping of an ISA interrupt…",N,N],[12,"isa_source","","",8,N],[12,"global_system_interrupt","","",8,N],[12,"polarity","","",8,N],[12,"trigger_mode","","",8,N],[3,"NmiSource","","Describes a Global System Interrupt that should be enabled…",N,N],[12,"global_system_interrupt","","",9,N],[12,"polarity","","",9,N],[12,"trigger_mode","","",9,N],[4,"LocalInterruptLine","","",N,N],[13,"Lint0","","",10,N],[13,"Lint1","","",10,N],[4,"Polarity","","",N,N],[13,"SameAsBus","","",11,N],[13,"ActiveHigh","","",11,N],[13,"ActiveLow","","",11,N],[4,"TriggerMode","","",N,N],[13,"SameAsBus","","",12,N],[13,"Edge","","",12,N],[13,"Level","","",12,N],[4,"InterruptModel","","",N,N],[13,"Pic","","This model is only chosen when a newer one can not be…",13,N],[13,"Apic","","Describes an interrupt controller based around the…",13,N],[12,"local_apic_address","acpi::interrupt::InterruptModel","",13,N],[12,"io_apics","","",13,N],[12,"local_apic_nmi_line","","",13,N],[12,"interrupt_source_overrides","","",13,N],[12,"nmi_sources","","",13,N],[12,"also_has_legacy_pics","","If this field is set, you must remap and mask all the…",13,N],[8,"AcpiHandler","acpi","An implementation of this trait must be provided to allow…",N,N],[10,"map_physical_region","","Given a starting physical address and a size, map a region…",14,[[["self"],["usize"],["usize"]],["physicalmapping"]]],[10,"unmap_physical_region","","Unmap the given physical mapping. Safe because we consume…",14,[[["self"],["physicalmapping"]]]],[11,"boot_processor","","A description of the boot processor. Until you bring any…",15,[[["self"]],["option"]]],[11,"application_processors","","Descriptions of each of the application processors. These…",15,[[["self"]],["vec"]]],[11,"interrupt_model","","The interrupt model supported by this system.",15,[[["self"]],["option"]]],[14,"parser_trace","","Easy macro for controlling whether debug output is printed…",N,N],[14,"parse_any_of","","This macro takes a parser and one or more parsing…",N,N],[14,"check_attempt","","This macro wraps parselets that check if we're parsing the…",N,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","acpi::interrupt","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"deref","acpi","",1,[[["self"]],["t"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","acpi::interrupt","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["self"],["formatter"]],["result"]]],[11,"fmt","acpi","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"eq","","",5,[[["self"],["processorstate"]],["bool"]]],[11,"clone","","",5,[[["self"]],["processorstate"]]],[11,"clone","","",0,[[["self"]],["processor"]]]],"paths":[[3,"Processor"],[3,"PhysicalMapping"],[4,"AmlError"],[4,"MadtError"],[4,"AcpiError"],[4,"ProcessorState"],[3,"AmlNamespace"],[3,"IoApic"],[3,"InterruptSourceOverride"],[3,"NmiSource"],[4,"LocalInterruptLine"],[4,"Polarity"],[4,"TriggerMode"],[4,"InterruptModel"],[8,"AcpiHandler"],[3,"AcpiStaticInfo"]]};
searchIndex["bit_field"]={"doc":"Provides the abstraction of a bit field, which allows for…","items":[[8,"BitField","bit_field","A generic trait which provides methods for extracting and…",N,N],[10,"bit_length","","Returns the length, eg number of bits, in this bit field.",0,[[],["usize"]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",0,[[["self"],["usize"]],["bool"]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",0,[[["self"],["range",["usize"]]],["self"]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",0,[[["self"],["usize"],["bool"]],["self"]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",0,[[["self"],["range",["usize"]],["self"]],["self"]]],[8,"BitArray","","",N,N],[10,"bit_length","","Returns the length, eg number of bits, in this bit array.",1,[[["self"]],["usize"]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",1,[[["self"],["usize"]],["bool"]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",1,[[["self"],["range",["usize"]]],["t"]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",1,[[["self"],["usize"],["bool"]]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",1,[[["self"],["range",["usize"]],["t"]]]]],"paths":[[8,"BitField"],[8,"BitArray"]]};
searchIndex["bitflags"]={"doc":"A typesafe bitmask flag generator useful for sets of…","items":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",N,N]],"paths":[]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","items":[[14,"cfg_if","cfg_if","",N,N]],"paths":[]};
searchIndex["kernel"]={"doc":"","items":[[5,"kmain","kernel","This is the entry point for the kernel on x86_64. It is…",N,N],[5,"kernel_main","","",N,N],[5,"panic","","",N,N],[0,"x86_64","","This module defines the kernel entry-point on x86_64.",N,N],[3,"Arch","kernel::x86_64","",N,N],[12,"physical_memory_manager","","",0,N],[12,"kernel_page_table","","This is the main set of page tables for the kernel. It is…",0,N],[12,"physical_region_mapper","","",0,N],[5,"kmain","","This is the entry point for the kernel on x86_64. It is…",N,N],[0,"acpi_handler","","",N,N],[3,"PebbleAcpiHandler","kernel::x86_64::acpi_handler","",N,N],[12,"physical_region_mapper","","",1,N],[12,"page_table","","",1,N],[12,"frame_allocator","","",1,N],[11,"new","","",1,[[["mutex"],["mutex"],["lockedphysicalmemorymanager"]],["pebbleacpihandler"]]],[0,"cpu","kernel::x86_64","",N,N],[3,"Cpu","kernel::x86_64::cpu","",N,N],[12,"processor_uid","","",2,N],[12,"local_apic_id","","",2,N],[12,"is_ap","","",2,N],[12,"tss","","",2,N],[12,"tss_selector","","",2,N],[11,"from_acpi","","",2,[[["processor"],["pin",["box"]],["segmentselector"]],["cpu"]]],[0,"interrupts","kernel::x86_64","",N,N],[3,"InterruptController","kernel::x86_64::interrupts","",N,N],[5,"nmi_handler","","",N,[[["interruptstackframe"]]]],[5,"breakpoint_handler","","",N,[[["interruptstackframe"]]]],[5,"invalid_opcode_handler","","",N,[[["interruptstackframe"]]]],[5,"general_protection_fault_handler","","",N,[[["interruptstackframe"],["u64"]]]],[5,"page_fault_handler","","",N,[[["interruptstackframe"],["u64"]]]],[5,"double_fault_handler","","",N,[[["interruptstackframe"],["u64"]]]],[5,"spurious_handler","","",N,[[["interruptstackframe"]]]],[7,"IDT","","This should only be accessed directly by the bootstrap…",N,N],[17,"LEGACY_PIC_VECTOR","","",N,N],[17,"APIC_SPURIOUS_VECTOR","","",N,N],[11,"init","","",3,[[["arch"],["interruptmodel"]],["interruptcontroller"]]],[11,"install_exception_handlers","","",3,[[]]],[0,"logger","kernel::x86_64","",N,N],[3,"KernelLogger","kernel::x86_64::logger","This handles calls to the log macros throughout the…",N,N],[7,"COM1","","The COM1 serial port, accessed through the UART 16550…",N,N],[0,"memory","kernel::x86_64","This module contains the physical memory manager Pebble…",N,N],[3,"PhysicalMapping","kernel::x86_64::memory","Sometimes the system needs to access specific areas of…",N,N],[12,"physical_base","","The address of the start of the mapping in the physical…",4,N],[12,"virtual_base","","The address of the start of the mapping in the virtual…",4,N],[12,"size","","Size, in bytes, of the mapping. Must be a multiple of the…",4,N],[3,"PhysicalRegionMapper","","",N,N],[12,"mappings","","This maps `PhysicalMapping`s to their starting…",5,N],[12,"virtual_area_bitmap","","This tracks which of the pages in the area of virtual…",5,N],[0,"buddy_allocator","","One of the allocators we use to manage physical memory is…",N,N],[3,"BuddyAllocator","kernel::x86_64::memory::buddy_allocator","",N,N],[12,"bins","","The bins of free blocks, where bin `i` contains blocks of…",6,N],[11,"new","","Create a new `BuddyAllocator`, with a maximum block size…",6,[[["usize"]],["buddyallocator"]]],[11,"add_range","","Add a range of `Frame`s to this allocator, marking them…",6,[[["self"],["range",["frame"]]]]],[11,"allocate_n","","Allocate (at least) `n` contiguous frames from this…",6,[[["self"],["usize"]],["option",["frame"]]]],[11,"free_n","","Free the given block (starting at `start` and of size `n`…",6,[[["self"],["frame"],["usize"]]]],[11,"allocate_block","","Tries to allocate a block of the given order. If no blocks…",6,[[["self"],["usize"]],["option",["frame"]]]],[11,"buddy_of","","Finds the starting frame of the block that is the buddy of…",6,[[["frame"],["usize"]],["frame"]]],[11,"max_order","","Get the order of the largest block this allocator can track.",6,[[["self"]],["usize"]]],[0,"physical","kernel::x86_64::memory","",N,N],[3,"PhysicalMemoryManager","kernel::x86_64::memory::physical","The main physical memory manager. It tracks all…",N,N],[12,"buddy_allocator","","A buddy allocator used to track all conventional memory.…",7,N],[3,"LockedPhysicalMemoryManager","","",N,N],[12,"0","","",8,N],[17,"BUDDY_ALLOCATOR_MAX_ORDER","","",N,N],[11,"new","","",8,[[["bootinfo"]],["lockedphysicalmemorymanager"]]],[6,"KernelPageTable","kernel::x86_64::memory","Type alias to hide the concrete type of the kernel's page…",N,N],[11,"new","","",5,[[],["physicalregionmapper"]]],[11,"map_physical_region","","",5,[[["self"],["frame"],["usize"],["entryflags"],["activepagetable"],["lockedphysicalmemorymanager"]],["physicalmapping"]]],[11,"unmap_physical_region","","",5,[[["self"],["physicalmapping"],["activepagetable"],["lockedphysicalmemorymanager"]]]],[7,"GDT","kernel::x86_64","The kernel GDT. This is not thread-safe, and so should…",N,N],[0,"arch","kernel","",N,N],[8,"Architecture","kernel::arch","Trait that is implemented by a type in each architecture…",N,N],[0,"heap_allocator","kernel","",N,N],[3,"HoleAllocator","kernel::heap_allocator","",N,N],[12,"heap_bottom","","",9,N],[12,"heap_size","","",9,N],[12,"holes","","",9,N],[3,"LockedHoleAllocator","","",N,N],[12,"0","","",10,N],[3,"HoleInfo","","",N,N],[12,"addr","","",11,N],[12,"size","","",11,N],[3,"Hole","","",N,N],[12,"size","","",12,N],[12,"next","","",12,N],[3,"HoleList","","",N,N],[12,"first","","",13,N],[3,"Allocation","","",N,N],[12,"info","","",14,N],[12,"front_padding","","",14,N],[12,"back_padding","","",14,N],[5,"split_hole","","Split the given hole into…",N,[[["holeinfo"],["layout"]],["option",["allocation"]]]],[5,"allocate_first_fit","","",N,[[["hole"],["layout"]],["result",["allocation","allocerr"]]]],[5,"free","","Walk the list, starting at `hole` and free the allocation…",N,[[["hole"],["virtualaddress"],["usize"]]]],[5,"align_down","","Get the greatest x with the given alignment such that x <=…",N,[[["usize"],["usize"]],["usize"]]],[5,"align_up","","Get the smallest x with the given alignment such that x >=…",N,[[["usize"],["usize"]],["usize"]]],[5,"handle_alloc_error","","",N,N],[11,"new_uninitialized","","Create a new, uninitialized `HoleAllocator`. Before heap…",9,[[],["holeallocator"]]],[11,"init","","Initialise the `HoleAllocator`. This should only be called…",9,[[["self"],["virtualaddress"],["virtualaddress"]]]],[11,"new_uninitialized","","",10,[[],["lockedholeallocator"]]],[11,"info","","",12,[[["self"]],["holeinfo"]]],[11,"new","","Create a new `HoleList` that contains the given hole.…",13,[[["virtualaddress"],["usize"]],["holelist"]]],[11,"allocate_first_fit","","Search for a big enough hole for the given `Layout` with…",13,[[["self"],["layout"]],["result",["allocerr"]]]],[11,"free","","Free an allocation defined by `ptr` and `layout`. Unsafe…",13,N],[11,"get_min_size","","",13,[[],["usize"]]],[0,"util","kernel","",N,N],[0,"binary_pretty_print","kernel::util","",N,N],[3,"BinaryPrettyPrint","kernel::util::binary_pretty_print","Values can be wrapped in this type when they're printed to…",N,N],[12,"0","","",15,N],[0,"bitmap","kernel::util","It's useful to be able to model an integral type such as…",N,N],[8,"Bitmap","kernel::util::bitmap","",N,N],[10,"alloc_n","","Find `n` consecutive unset bits, set them and return the…",16,[[["self"],["usize"]],["option"]]],[0,"math","kernel::util","",N,N],[5,"flooring_log2","kernel::util::math","Fast integer `log2` that floors to the lower power-of-2 if…",N,[[["u64"]],["u64"]]],[5,"ceiling_log2","","",N,[[["u64"]],["u64"]]],[5,"ceiling_integer_divide","","Divide `x` by `divide_by`, taking the ceiling if it does…",N,[[["u64"],["u64"]],["u64"]]],[0,"__rg_allocator_abi","kernel","",N,N],[5,"__rg_alloc","kernel::__rg_allocator_abi","",N,N],[5,"__rg_dealloc","","",N,N],[5,"__rg_realloc","","",N,N],[5,"__rg_alloc_zeroed","","",N,N],[7,"ALLOCATOR","kernel","",N,N],[14,"set_handler","","",N,N],[14,"set_handler_with_error_code","","",N,N],[14,"save_regs","","",N,N],[14,"restore_regs","","",N,N],[14,"wrap_handler","","",N,N],[14,"wrap_handler_with_error_code","","",N,N],[14,"assert_first_call","","This macro should be called at the beginning of functions…",N,N],[11,"try_from","kernel::x86_64","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","kernel::x86_64::acpi_handler","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","kernel::x86_64::cpu","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_from","kernel::x86_64::interrupts","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","kernel::x86_64::logger","",17,[[["u"]],["result"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_from","kernel::x86_64::memory","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_from","kernel::x86_64::memory::buddy_allocator","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_from","kernel::x86_64::memory::physical","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_from","kernel::heap_allocator","",9,[[["u"]],["result"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","kernel::util::binary_pretty_print","",15,[[["u"]],["result"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"deref","kernel::heap_allocator","",10,[[["self"]],["mutex"]]],[11,"fmt","kernel::x86_64::memory","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","kernel::heap_allocator","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",14,[[["self"],["formatter"]],["result"]]],[11,"fmt","kernel::util::binary_pretty_print","",15,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",15,[[["self"],["formatter"]],["result"]]],[11,"drop","kernel::x86_64","",0,[[["self"]]]],[11,"clone","kernel::x86_64::memory","",4,[[["self"]],["physicalmapping"]]],[11,"clone","kernel::heap_allocator","",11,[[["self"]],["holeinfo"]]],[11,"clone","","",14,[[["self"]],["allocation"]]],[11,"alloc","","",10,N],[11,"dealloc","","",10,N],[11,"allocate_n","kernel::x86_64::memory::physical","",8,[[["self"],["usize"]],["range",["frame"]]]],[11,"free_n","","",8,[[["self"],["frame"],["usize"]]]],[11,"enabled","kernel::x86_64::logger","",17,[[["self"],["metadata"]],["bool"]]],[11,"log","","",17,[[["self"],["record"]]]],[11,"flush","","",17,[[["self"]]]],[11,"map_physical_region","kernel::x86_64::acpi_handler","",1,[[["self"],["usize"],["usize"]],["acpiphysicalmapping"]]],[11,"unmap_physical_region","","",1,[[["self"],["acpiphysicalmapping"]]]]],"paths":[[3,"Arch"],[3,"PebbleAcpiHandler"],[3,"Cpu"],[3,"InterruptController"],[3,"PhysicalMapping"],[3,"PhysicalRegionMapper"],[3,"BuddyAllocator"],[3,"PhysicalMemoryManager"],[3,"LockedPhysicalMemoryManager"],[3,"HoleAllocator"],[3,"LockedHoleAllocator"],[3,"HoleInfo"],[3,"Hole"],[3,"HoleList"],[3,"Allocation"],[3,"BinaryPrettyPrint"],[8,"Bitmap"],[3,"KernelLogger"]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","items":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,"RecordBuilder","","Builder for `Record`.",N,N],[3,"Metadata","","Metadata about a log message.",N,N],[3,"MetadataBuilder","","Builder for `Metadata`.",N,N],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has…",N,N],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't…",N,N],[4,"Level","","An enum representing the available verbosity levels of the…",N,N],[13,"Error","","The \"error\" level.",0,N],[13,"Warn","","The \"warn\" level.",0,N],[13,"Info","","The \"info\" level.",0,N],[13,"Debug","","The \"debug\" level.",0,N],[13,"Trace","","The \"trace\" level.",0,N],[4,"LevelFilter","","An enum representing the available verbosity level filters…",N,N],[13,"Off","","A level lower than all log levels.",1,N],[13,"Error","","Corresponds to the `Error` log level.",1,N],[13,"Warn","","Corresponds to the `Warn` log level.",1,N],[13,"Info","","Corresponds to the `Info` log level.",1,N],[13,"Debug","","Corresponds to the `Debug` log level.",1,N],[13,"Trace","","Corresponds to the `Trace` log level.",1,N],[5,"set_max_level","","Sets the global maximum log level.",N,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",N,[[],["levelfilter"]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",N,[[["log"]],["result",["setloggererror"]]]],[5,"logger","","Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",N,N],[8,"Log","","A trait encapsulating the operations required of a logger.",N,N],[10,"enabled","","Determines if a log message with the specified metadata…",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],["option",["level"]]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],["option",["str"]]]],[11,"file","","The source file containing the message.",3,[[["self"]],["option",["str"]]]],[11,"line","","The line containing the message.",3,[[["self"]],["option",["u32"]]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with…",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[14,"log","","The standard logging macro.",N,N],[14,"error","","Logs a message at the error level.",N,N],[14,"warn","","Logs a message at the warn level.",N,N],[14,"info","","Logs a message at the info level.",N,N],[14,"debug","","Logs a message at the debug level.",N,N],[14,"trace","","Logs a message at the trace level.",N,N],[14,"log_enabled","","Determines if a message logged at the specified level in…",N,N],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["levelfilter"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",0,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["levelfilter"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"le","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"gt","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"ge","","",1,[[["self"],["levelfilter"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],["option",["ordering"]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],["option",["ordering"]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],["option",["ordering"]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"from_str","","",0,[[["str"]],["result",["level"]]]],[11,"from_str","","",1,[[["str"]],["result",["levelfilter"]]]],[11,"hash","","",0,N],[11,"hash","","",1,N],[11,"hash","","",5,N],[11,"hash","","",6,N],[11,"clone","","",0,[[["self"]],["level"]]],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]]],"paths":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["num"]={"doc":"A collection of numeric types and traits for Rust.","items":[[3,"Complex","num","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,N],[5,"range","","Returns an iterator over the given range [start, stop)…",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",4,[[["self"]],["bool"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",5,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Bounded","","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Saturating","","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",7,[[["self"],["self"]],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",11,[[["self"],["self"]],["option"]]],[8,"PrimInt","","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[["self"],["u32"]],["self"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted…",15,[[["t"]],["option"]]],[0,"cast","","",N,N],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted…",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[5,"cast","num","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[0,"pow","","",N,N],[8,"Pow","num::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation…",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",N,[[["t"],["usize"]],["option"]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation…",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",N,[[["t"],["usize"]],["option"]]],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"complex","","",N,N],[3,"Complex","num::complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[3,"ParseComplexError","","",N,N],[0,"integer","num","",N,N],[8,"Integer","num::integer","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,N],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",N,[[["t"],["t"]],["t"]]],[3,"IterBinomial","","An iterator over binomial coefficients.",N,N],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube…",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",18,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",18,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",18,[[["self"]],["self"]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",N,[[["t"],["u32"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",N,[[["t"]],["t"]]],[0,"iter","num","",N,N],[3,"Range","num::iter","An iterator over the range [start, stop)",N,N],[5,"range","","Returns an iterator over the given range [start, stop)…",N,[[["a"],["a"]],["range"]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",N,N],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",N,[[["a"],["a"],["a"]],["rangestep"]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",N,N],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[0,"traits","num","",N,N],[0,"bounds","num::traits","",N,N],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[0,"cast","num::traits","",N,N],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted…",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[["self"]],["t"]]],[0,"float","num::traits","",N,N],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with…",N,N],[10,"infinity","","Returns positive infinity.",19,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",19,[[],["self"]]],[10,"nan","","Returns NaN.",19,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",19,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",19,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",19,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",19,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",19,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",19,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",19,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",19,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",19,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",19,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",19,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",19,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",19,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",19,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",19,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",19,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",19,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",19,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",19,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",19,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",19,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",19,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",19,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",19,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",19,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",19,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",20,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",20,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",20,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",20,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",20,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",20,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",20,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",20,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",20,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",20,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",20,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",20,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",20,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",20,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",20,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",20,[[],["self"]]],[0,"identities","num::traits","",N,N],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[0,"int","num::traits","",N,N],[8,"PrimInt","num::traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[["self"],["u32"]],["self"]]],[0,"ops","num::traits","",N,N],[0,"checked","num::traits::ops","",N,N],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",9,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",11,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",21,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",22,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",23,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",24,[[["self"],["u32"]],["option"]]],[0,"inv","num::traits::ops","",N,N],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",N,N],[16,"Output","","The result after applying the operator.",25,N],[10,"inv","","Returns the multiplicative inverse of `self`.",25,N],[0,"mul_add","num::traits::ops","",N,N],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",26,N],[10,"mul_add","","Performs the fused multiply-add operation.",26,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",27,N],[0,"saturating","num::traits::ops","",N,N],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",7,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",7,[[["self"],["self"]],["self"]]],[0,"wrapping","num::traits::ops","",N,N],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",28,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",29,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",30,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",31,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",32,[[["self"],["u32"]],["self"]]],[0,"pow","num::traits","",N,N],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",17,N],[10,"pow","","Returns `self` to the power `rhs`.",17,N],[5,"pow","","Raises a value to the power of exp, using exponentiation…",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",N,[[["t"],["usize"]],["option"]]],[0,"sign","num::traits","",N,N],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",N,N],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",5,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1`…",N,N],[16,"FromStrRadixErr","","",2,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric…",N,N],[8,"RefNum","","The trait for references which implement numeric…",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",N,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",33,N],[13,"Invalid","","",33,N],[3,"ParseFloatError","","",N,N],[12,"kind","","",34,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"rational","num","",N,N],[3,"Ratio","num::rational","Represents the ratio between two numbers.",N,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",N,N],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",N,N],[3,"ParseRatioError","","",N,N],[11,"try_from","num::complex","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_from","num::integer","",36,[[["u"]],["result"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into_iter","","",36,[[["self"]],["i"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_from","num::iter","",37,[[["u"]],["result"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into_iter","","",37,[[["self"]],["i"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into_iter","","",38,[[["self"]],["i"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into_iter","","",39,[[["self"]],["i"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into_iter","","",40,[[["self"]],["i"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_from","num::traits","",33,[[["u"]],["result"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_from","num::rational","",41,[[["u"]],["result"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"mul_assign","num::complex","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"mul_assign","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"add_assign","","",0,N],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"eq","","",35,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",35,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"to_usize","","",0,[[["self"]],["option",["usize"]]]],[11,"to_isize","","",0,[[["self"]],["option",["isize"]]]],[11,"to_u8","","",0,[[["self"]],["option",["u8"]]]],[11,"to_u16","","",0,[[["self"]],["option",["u16"]]]],[11,"to_u32","","",0,[[["self"]],["option",["u32"]]]],[11,"to_u64","","",0,[[["self"]],["option",["u64"]]]],[11,"to_i8","","",0,[[["self"]],["option",["i8"]]]],[11,"to_i16","","",0,[[["self"]],["option",["i16"]]]],[11,"to_i32","","",0,[[["self"]],["option",["i32"]]]],[11,"to_i64","","",0,[[["self"]],["option",["i64"]]]],[11,"to_u128","","",0,[[["self"]],["option",["u128"]]]],[11,"to_i128","","",0,[[["self"]],["option",["i128"]]]],[11,"to_f32","","",0,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",0,[[["self"]],["option",["f64"]]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"default","","",0,[[],["complex"]]],[11,"hash","","",0,N],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"inv","","",0,[[["self"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"],["u32"]],["result",["complex"]]]],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"sub_assign","","",0,N],[11,"from_usize","","",0,[[["usize"]],["option",["complex"]]]],[11,"from_isize","","",0,[[["isize"]],["option",["complex"]]]],[11,"from_u8","","",0,[[["u8"]],["option",["complex"]]]],[11,"from_u16","","",0,[[["u16"]],["option",["complex"]]]],[11,"from_u32","","",0,[[["u32"]],["option",["complex"]]]],[11,"from_u64","","",0,[[["u64"]],["option",["complex"]]]],[11,"from_i8","","",0,[[["i8"]],["option",["complex"]]]],[11,"from_i16","","",0,[[["i16"]],["option",["complex"]]]],[11,"from_i32","","",0,[[["i32"]],["option",["complex"]]]],[11,"from_i64","","",0,[[["i64"]],["option",["complex"]]]],[11,"from_u128","","",0,[[["u128"]],["option",["complex"]]]],[11,"from_i128","","",0,[[["i128"]],["option",["complex"]]]],[11,"from_f32","","",0,[[["f32"]],["option",["complex"]]]],[11,"from_f64","","",0,[[["f64"]],["option",["complex"]]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"from","","",0,[[["u"]],["option",["complex"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"div_assign","","",0,N],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"rem_assign","","",0,N],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"]],["result",["complex"]]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"as_","","",0,[[["self"]],["u"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","num::traits","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"next","num::integer","",36,[[["self"]],["option"]]],[11,"clone","num::iter","",40,[[["self"]],["rangestepinclusive"]]],[11,"clone","","",39,[[["self"]],["rangestep"]]],[11,"clone","","",37,[[["self"]],["range"]]],[11,"clone","","",38,[[["self"]],["rangeinclusive"]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,N],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,N],[11,"next","","",39,[[["self"]],["option"]]],[11,"next_back","","",38,[[["self"]],["option"]]],[11,"next_back","","",37,[[["self"]],["option"]]],[11,"mul_assign","num::rational","",41,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",41,N],[11,"mul_assign","","",41,N],[11,"add_assign","","",41,N],[11,"add_assign","","",41,N],[11,"add_assign","","",41,N],[11,"add_assign","","",41,N],[11,"eq","","",42,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",42,[[["self"],["parseratioerror"]],["bool"]]],[11,"eq","","",41,[[["self"],["ratio"]],["bool"]]],[11,"zero","","",41,[[],["ratio"]]],[11,"is_zero","","",41,[[["self"]],["bool"]]],[11,"checked_div","","",41,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"from","","",41,N],[11,"from","","",41,[[["t"]],["ratio"]]],[11,"hash","","",41,N],[11,"rem","","",41,[[["self"],["t"]],["ratio"]]],[11,"rem","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",41,[[["self"],["t"]],["ratio"]]],[11,"rem","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"checked_sub","","",41,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"sub","","",41,[[["self"],["t"]],["ratio"]]],[11,"sub","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",41,[[["self"],["t"]],["ratio"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"inv","","",41,[[["self"]],["ratio"]]],[11,"add","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",41,[[["self"],["t"]],["ratio"]]],[11,"add","","",41,[[["self"],["t"]],["ratio"]]],[11,"add","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",41,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",41,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",41,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",41,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",41,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",41,[[["self"],["u8"]],["ratio"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",41,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"sub_assign","","",41,N],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"from_i64","","",41,[[["i64"]],["option",["ratio"]]]],[11,"from_i128","","",41,[[["i128"]],["option",["ratio"]]]],[11,"from_u64","","",41,[[["u64"]],["option",["ratio"]]]],[11,"from_u128","","",41,[[["u128"]],["option",["ratio"]]]],[11,"from_f32","","",41,[[["f32"]],["option",["ratio"]]]],[11,"from_f64","","",41,[[["f64"]],["option",["ratio"]]]],[11,"clone","","",41,[[["self"]],["ratio"]]],[11,"clone","","",42,[[["self"]],["parseratioerror"]]],[11,"abs","","",41,[[["self"]],["ratio"]]],[11,"abs_sub","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",41,[[["self"]],["ratio"]]],[11,"is_positive","","",41,[[["self"]],["bool"]]],[11,"is_negative","","",41,[[["self"]],["bool"]]],[11,"checked_add","","",41,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"div","","",41,[[["self"],["t"]],["ratio"]]],[11,"div","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",41,[[["self"],["t"]],["ratio"]]],[11,"div","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",41,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result",["error"]]]],[11,"div_assign","","",41,N],[11,"div_assign","","",41,N],[11,"div_assign","","",41,N],[11,"div_assign","","",41,N],[11,"sum","","",41,[[["i"]],["ratio"]]],[11,"sum","","",41,[[["i"]],["ratio"]]],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"rem_assign","","",41,N],[11,"mul","","",41,[[["self"],["t"]],["ratio"]]],[11,"mul","","",41,[[["self"],["t"]],["ratio"]]],[11,"mul","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",41,[[["self"],["ratio"]],["ratio"]]],[11,"product","","",41,[[["i"]],["ratio"]]],[11,"product","","",41,[[["i"]],["ratio"]]],[11,"one","","",41,[[],["ratio"]]],[11,"is_one","","",41,[[["self"]],["bool"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",41,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"checked_mul","","",41,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"into","","",41,N],[11,"partial_cmp","","",41,[[["self"],["ratio"]],["option",["ordering"]]]],[11,"neg","","",41,[[["self"]],["ratio"]]],[11,"cmp","","",41,[[["self"],["ratio"]],["ordering"]]],[11,"new","num::complex","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't…",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients…",36,[[["t"]],["iterbinomial"]]],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",41,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",41,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",41,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",41,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",41,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",41,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer…",41,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",41,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",41,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",41,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",41,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",41,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",41,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division…",41,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",41,[[["self"],["i32"]],["ratio"]]],[11,"approximate_float","","",41,[[["f"]],["option",["ratio"]]]]],"paths":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Roots"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_complex"]={"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",N,N],[12,"re","","Real portion of the complex number",0,N],[12,"im","","Imaginary portion of the complex number",0,N],[3,"ParseComplexError","","",N,N],[6,"Complex32","","",N,N],[6,"Complex64","","",N,N],[11,"new","","Create a new Complex",0,[[["t"],["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't…",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[["self"]],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[["self"]],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[["self"]],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[["self"]],["bool"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["complex"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"sub","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["complex"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"div","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["complex"]]],[11,"rem","","",0,[[["self"],["complex"]],["self"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"rem","","",0,[[["self"],["t"]],["complex"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"eq","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"]],["result"]]],[11,"hash","","",0,N],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["complex"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"add","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["complex"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"mul","","",0,[[["self"],["t"]],["complex"]]],[11,"neg","","",0,[[["self"]],["complex"]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"default","","",0,[[],["complex"]]],[11,"to_usize","","",0,[[["self"]],["option",["usize"]]]],[11,"to_isize","","",0,[[["self"]],["option",["isize"]]]],[11,"to_u8","","",0,[[["self"]],["option",["u8"]]]],[11,"to_u16","","",0,[[["self"]],["option",["u16"]]]],[11,"to_u32","","",0,[[["self"]],["option",["u32"]]]],[11,"to_u64","","",0,[[["self"]],["option",["u64"]]]],[11,"to_i8","","",0,[[["self"]],["option",["i8"]]]],[11,"to_i16","","",0,[[["self"]],["option",["i16"]]]],[11,"to_i32","","",0,[[["self"]],["option",["i32"]]]],[11,"to_i64","","",0,[[["self"]],["option",["i64"]]]],[11,"to_u128","","",0,[[["self"]],["option",["u128"]]]],[11,"to_i128","","",0,[[["self"]],["option",["i128"]]]],[11,"to_f32","","",0,[[["self"]],["option",["f32"]]]],[11,"to_f64","","",0,[[["self"]],["option",["f64"]]]],[11,"from_usize","","",0,[[["usize"]],["option"]]],[11,"from_isize","","",0,[[["isize"]],["option"]]],[11,"from_u8","","",0,[[["u8"]],["option"]]],[11,"from_u16","","",0,[[["u16"]],["option"]]],[11,"from_u32","","",0,[[["u32"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_i8","","",0,[[["i8"]],["option"]]],[11,"from_i16","","",0,[[["i16"]],["option"]]],[11,"from_i32","","",0,[[["i32"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from","","",0,[[["u"]],["option"]]],[11,"as_","","",0,[[["self"]],["u"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"],["u32"]],["result"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"inv","","",0,[[["self"]],["complex"]]]],"paths":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"]={"doc":"Integer trait and functions.","items":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",N,N],[5,"sqrt","","Returns the truncated principal square root of an integer…",N,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",N,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",N,[[["t"],["u32"]],["t"]]],[5,"div_rem","","Simultaneous integer division and modulus",N,N],[5,"div_floor","","Floored integer division",N,[[["t"],["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",N,[[["t"],["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",N,N],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",N,[[["t"],["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",N,[[["t"],["t"]],["t"]]],[5,"binomial","","Calculate the binomial coefficient.",N,[[["t"],["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",N,N],[8,"Roots","","Provides methods to compute an integer's square root, cube…",N,N],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",0,[[["self"],["u32"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[["self"]],["self"]]],[8,"Integer","","",N,N],[10,"div_floor","","Floored integer division.",1,[[["self"],["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"],["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"],["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"],["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"],["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"],["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,N],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,N],[11,"new","","For a given n, iterate over all binomial coefficients…",2,[[["t"]],["iterbinomial"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[["self"]],["self"]]]],"paths":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"]={"doc":"External iterators for generic mathematics","items":[[3,"Range","num_iter","An iterator over the range [start, stop)",N,N],[3,"RangeInclusive","","An iterator over the range [start, stop]",N,N],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",N,N],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",N,N],[5,"range","","Returns an iterator over the given range [start, stop)…",N,[[["a"],["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",N,[[["a"],["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",N,[[["a"],["a"],["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",N,[[["a"],["a"],["a"]],["rangestepinclusive"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[["self"]],["i"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[["self"]],["i"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,N],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,N],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["range"]]],[11,"clone","","",1,[[["self"]],["rangeinclusive"]]],[11,"clone","","",2,[[["self"]],["rangestep"]]],[11,"clone","","",3,[[["self"]],["rangestepinclusive"]]]],"paths":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"]={"doc":"Rational numbers","items":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",N,N],[3,"ParseRatioError","","",N,N],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",N,N],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",N,N],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",N,N],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[["t"],["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",0,[[["t"],["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer…",0,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",0,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",0,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",0,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",0,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",0,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",0,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division…",0,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[["self"],["i32"]],["ratio"]]],[11,"approximate_float","","",0,[[["f"]],["option",["ratio"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"sub","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"div","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"div","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"rem","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"rem","","",0,[[["self"],["t"]],["ratio"]]],[11,"eq","","",0,[[["self"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"ne","","",1,[[["self"],["parseratioerror"]],["bool"]]],[11,"cmp","","",0,[[["self"],["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["self"]],["option",["ordering"]]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[["str"]],["result",["ratio","parseratioerror"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"from","","",0,[[["t"]],["ratio"]]],[11,"from","","",0,N],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"add","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"add","","",0,[[["self"],["t"]],["ratio"]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"mul","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"mul","","",0,[[["self"],["t"]],["ratio"]]],[11,"neg","","",0,[[["self"]],["ratio"]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"clone","","",0,[[["self"]],["ratio"]]],[11,"clone","","",1,[[["self"]],["parseratioerror"]]],[11,"into","","",0,N],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[["str"],["u32"]],["result",["ratio","parseratioerror"]]]],[11,"zero","","",0,[[],["ratio"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["ratio"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"checked_mul","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_div","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_sub","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"checked_add","","",0,[[["self"],["ratio"]],["option",["ratio"]]]],[11,"inv","","",0,[[["self"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["i64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["isize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u8"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u16"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u32"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["u64"]],["ratio"]]],[11,"pow","","",0,[[["self"],["usize"]],["ratio"]]],[11,"pow","","",0,[[["self"],["usize"]],["ratio"]]],[11,"abs","","",0,[[["self"]],["ratio"]]],[11,"abs_sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",0,[[["self"]],["ratio"]]],[11,"is_positive","","",0,[[["self"]],["bool"]]],[11,"is_negative","","",0,[[["self"]],["bool"]]]],"paths":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"]={"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",N,N],[12,"kind","","",0,N],[4,"FloatErrorKind","","",N,N],[13,"Empty","","",1,N],[13,"Invalid","","",1,N],[5,"clamp","","A value bounded by a minimum and a maximum",N,[[["t"],["t"],["t"]],["t"]]],[0,"bounds","","",N,N],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",N,N],[10,"min_value","","returns the smallest finite number this type can represent",2,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast","num_traits","",N,N],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",N,[[["t"]],["option"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",N,N],[11,"to_isize","","Converts the value of `self` to an `isize`.",3,[[["self"]],["option",["isize"]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",3,[[["self"]],["option",["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",3,[[["self"]],["option",["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",3,[[["self"]],["option",["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",3,[[["self"]],["option",["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",3,[[["self"]],["option",["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",3,[[["self"]],["option",["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",3,[[["self"]],["option",["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",3,[[["self"]],["option",["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",3,[[["self"]],["option",["u32"]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",3,[[["self"]],["option",["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",3,[[["self"]],["option",["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",3,[[["self"]],["option",["f32"]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",3,[[["self"]],["option",["f64"]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",N,N],[11,"from_isize","","Convert an `isize` to return an optional value of this…",4,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",4,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",4,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",4,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",4,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",4,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",4,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",4,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",4,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",4,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",4,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",4,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",4,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",4,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",N,N],[10,"from","","Creates a number from another value that can be converted…",5,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",N,N],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[["self"]],["t"]]],[0,"float","num_traits","",N,N],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",N,N],[10,"infinity","","Returns positive infinity.",7,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",7,[[],["self"]]],[10,"nan","","Returns NaN.",7,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",7,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[["self"]],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[["self"]],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[["self"]],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[["self"]],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[["self"]],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[["self"]],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[["self"]],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[["self"]],["self"]]],[11,"trunc","","Return the integer part of a number.",7,[[["self"]],["self"]]],[11,"fract","","Returns the fractional part of a number.",7,[[["self"]],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[["self"]],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[["self"]],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[["self"]],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[["self"]],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"max","","Returns the maximum of the two numbers.",7,[[["self"],["self"]],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[["self"]],["self"]]],[11,"powi","","Raise a number to an integer power.",7,[[["self"],["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[["self"]],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[["self"]],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,N],[8,"FloatConst","","",N,N],[10,"E","","Return Euler’s number.",8,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",8,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",8,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",8,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",8,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",8,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",8,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",8,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",8,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",8,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",8,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",8,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",8,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",8,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",8,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",8,[[],["self"]]],[0,"identities","num_traits","",N,N],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",N,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",N,[[],["t"]]],[8,"Zero","","Defines an additive identity element for `Self`.",N,N],[10,"zero","","Returns the additive identity element of `Self`, `0`.",9,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",N,N],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",10,[[["self"]],["bool"]]],[0,"int","num_traits","",N,N],[8,"PrimInt","num_traits::int","",N,N],[10,"count_ones","","Returns the number of ones in the binary representation of…",11,[[["self"]],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",11,[[["self"]],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",11,[[["self"]],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",11,[[["self"]],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",11,[[["self"],["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",11,[[["self"],["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[["self"],["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[["self"],["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[["self"],["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[["self"],["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",11,[[["self"]],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",11,[[["self"]],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",11,[[["self"]],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,[[["self"]],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",11,[[["self"]],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",11,[[["self"],["u32"]],["self"]]],[0,"ops","num_traits","",N,N],[0,"checked","num_traits::ops","",N,N],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",N,N],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",12,[[["self"],["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",N,N],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",13,[[["self"],["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",N,N],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",14,[[["self"],["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",N,N],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",15,[[["self"],["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",N,N],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",16,[[["self"],["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",N,N],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",17,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",N,N],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",18,[[["self"],["u32"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",N,N],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",19,[[["self"],["u32"]],["option"]]],[0,"inv","num_traits::ops","",N,N],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",N,N],[16,"Output","","The result after applying the operator.",20,N],[10,"inv","","Returns the multiplicative inverse of `self`.",20,N],[0,"mul_add","num_traits::ops","",N,N],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",N,N],[16,"Output","","The resulting type after applying the fused multiply-add.",21,N],[10,"mul_add","","Performs the fused multiply-add operation.",21,N],[8,"MulAddAssign","","The fused multiply-add assignment operation.",N,N],[10,"mul_add_assign","","Performs the fused multiply-add operation.",22,[[["self"],["a"],["b"]]]],[0,"saturating","num_traits::ops","",N,N],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",N,N],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",23,[[["self"],["self"]],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",23,[[["self"],["self"]],["self"]]],[0,"wrapping","num_traits::ops","",N,N],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",N,N],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",24,[[["self"],["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",N,N],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",25,[[["self"],["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",N,N],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",26,[[["self"],["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",N,N],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",27,[[["self"],["u32"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",N,N],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",28,[[["self"],["u32"]],["self"]]],[0,"pow","num_traits","",N,N],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",N,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",N,[[["t"],["usize"]],["option"]]],[8,"Pow","","Binary operator for raising a value to a power.",N,N],[16,"Output","","The result after applying the operator.",29,N],[10,"pow","","Returns `self` to the power `rhs`.",29,N],[0,"sign","num_traits","",N,N],[5,"abs","num_traits::sign","Computes the absolute value.",N,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",N,[[["t"],["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",N,[[["t"]],["t"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",N,N],[10,"abs","","Computes the absolute value.",30,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",30,[[["self"],["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",30,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",30,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",30,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",N,N],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",N,N],[16,"FromStrRadixErr","","",31,N],[10,"from_str_radix","","Convert from a string and radix <= 36.",31,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",N,N],[8,"NumRef","","The trait for `Num` types which also implement numeric…",N,N],[8,"RefNum","","The trait for references which implement numeric…",N,N],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",N,N],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",N,N],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",N,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Signed"],[8,"Num"]]};
searchIndex["spin"]={"doc":"Synchronization primitives based on spinning","items":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",N,N],[3,"MutexGuard","","A guard to which the protected data can be accessed",N,N],[3,"RwLock","","A reader-writer lock",N,N],[3,"RwLockReadGuard","","A guard to which the protected data can be read",N,N],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",N,N],[3,"Once","","A synchronization primitive which can be used to run a…",N,N],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[["self"]],["t"]]],[11,"lock","","Locks the spinlock and returns a guard.",0,[[["self"]],["mutexguard"]]],[11,"force_unlock","","Force unlock the spinlock.",0,[[["self"]]]],[11,"try_lock","","Tries to lock the mutex. If it is already locked, it will…",0,[[["self"]],["option",["mutexguard"]]]],[11,"new","","Creates a new spinlock wrapping the supplied data.",1,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",1,[[["self"]],["t"]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",1,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempt to acquire this lock with shared read access.",1,[[["self"]],["option",["rwlockreadguard"]]]],[11,"force_read_decrement","","Force decrement the reader count.",1,[[["self"]]]],[11,"force_write_unlock","","Force unlock exclusive write access.",1,[[["self"]]]],[11,"write","","Lock this rwlock with exclusive write access, blocking the…",1,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",1,[[["self"]],["option",["rwlockwriteguard"]]]],[18,"INIT","","Initialization constant of `Once`.",2,N],[11,"new","","Creates a new `Once` value.",2,[[],["once"]]],[11,"call_once","","Performs an initialization routine once and only once. The…",2,[[["self"],["f"]],["t"]]],[11,"try","","Returns a pointer iff the `Once` was previously initialized",2,[[["self"]],["option"]]],[11,"wait","","Like try, but will spin if the `Once` is in the process of…",2,[[["self"]],["option"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"fmt","","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"deref_mut","","",3,[[["self"]],["t"]]],[11,"deref_mut","","",5,[[["self"]],["t"]]],[11,"drop","","The dropping of the MutexGuard will release the lock it…",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"default","","",0,[[],["mutex"]]],[11,"default","","",1,[[],["rwlock"]]]],"paths":[[3,"Mutex"],[3,"RwLock"],[3,"Once"],[3,"MutexGuard"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]};
searchIndex["x86_64"]={"doc":"","items":[[0,"boot","x86_64","TODO",N,N],[3,"MemoryEntry","x86_64::boot","TODO",N,N],[12,"area","","",0,N],[12,"memory_type","","",0,N],[3,"BootInfo","","This structure is placed in memory by the bootloader and a…",N,N],[12,"magic","","This should be set to `BOOT_INFO_MAGIC` by the bootloader.",1,N],[12,"memory_map","","",1,N],[12,"num_memory_map_entries","","",1,N],[12,"rsdp_address","","",1,N],[4,"MemoryType","","",N,N],[13,"UefiServices","","Memory used by the UEFI services. Cannot be used by the OS.",2,N],[13,"Conventional","","Conventional memory that can freely be used by the OS,",2,N],[13,"AcpiReclaimable","","Memory that contains ACPI tables. After the OS has parsed…",2,N],[13,"SleepPreserve","","This marks memory that the OS should preserve in the…",2,N],[13,"NonVolatileSleepPreserve","","This marks memory that the OS should preserve in the…",2,N],[13,"KernelImage","","Memory the bootloader has mapped the kernel image into.…",2,N],[13,"KernelPageTables","","Memory the bootloader has used for the page tables…",2,N],[13,"KernelHeap","","Memory the bootloader has mapped for use as the kernel…",2,N],[13,"BootInfo","","Memory used for storing the `BootInfo` by the bootloader.…",2,N],[17,"BOOT_INFO_MAGIC","","",N,N],[17,"MEMORY_MAP_NUM_ENTRIES","","",N,N],[11,"memory_entries","","",1,N],[0,"hw","x86_64","",N,N],[3,"DescriptorTablePointer","x86_64::hw","",N,N],[12,"limit","","`base + limit` is the last addressable byte of the…",3,N],[12,"base","","Virtual address of the start of the descriptor table.",3,N],[0,"gdt","","",N,N],[3,"SegmentSelector","x86_64::hw::gdt","An index into the GDT, specifying a particular segment.…",N,N],[12,"0","","",4,N],[3,"CodeSegment","","",N,N],[3,"TssSegment","","",N,N],[3,"Gdt","","A GDT suitable for the kernel to use. It contains two code…",N,N],[4,"PrivilegeLevel","","",N,N],[13,"Ring0","","",5,N],[13,"Ring1","","",5,N],[13,"Ring2","","",5,N],[13,"Ring3","","",5,N],[17,"KERNEL_CODE_SELECTOR","","",N,N],[17,"USER_CODE_SELECTOR","","",N,N],[17,"BOOTSTRAP_TSS_SELECTOR","","",N,N],[17,"MAX_CPUS","","",N,N],[11,"new","","",4,[[["u16"],["privilegelevel"]],["segmentselector"]]],[11,"table_offset","","",4,[[["self"]],["u16"]]],[11,"new","","",6,[[["privilegelevel"]],["codesegment"]]],[11,"empty","","",7,[[],["tsssegment"]]],[11,"new","","",7,[[["pin"]],["tsssegment"]]],[11,"new","","Create a `Gdt` with pre-populated code segments, and…",8,[[],["gdt"]]],[11,"add_tss","","Add a new TSS, if there's space for it. The first TSS…",8,[[["self"],["tsssegment"]],["segmentselector"]]],[11,"load","","Load the new GDT, switch to the new `kernel_code` code…",8,[[["self"]]]],[0,"tss","x86_64::hw","",N,N],[3,"Tss","x86_64::hw::tss","Hardware task switching isn't supported on x86_64, so the…",N,N],[12,"privilege_stack_table","","",9,N],[12,"interrupt_stack_table","","",9,N],[12,"iomap_base","","",9,N],[11,"new","","",9,[[],["pin",["box"]]]],[11,"set_kernel_stack","","",9,[[["self"],["virtualaddress"]]]],[0,"idt","x86_64::hw","",N,N],[3,"IdtEntry","x86_64::hw::idt","",N,N],[3,"Idt","","",N,N],[3,"InterruptStackFrame","","",N,N],[12,"instruction_pointer","","",10,N],[12,"code_segment","","",10,N],[12,"cpu_flags","","",10,N],[12,"stack_pointer","","",10,N],[12,"stack_segment","","",10,N],[6,"HandlerFunc","","The type of a function that can be used as an interrupt…",N,N],[11,"missing","","",11,[[],["idtentry"]]],[11,"set_handler","","",11,[[["self"],["handlerfunc"],["segmentselector"]],["self"]]],[11,"set_ist_handler","","",11,[[["self"],["u8"]],["self"]]],[11,"set_privilege_level","","",11,[[["self"],["privilegelevel"]],["self"]]],[11,"empty","","",12,[[],["idt"]]],[11,"divide_error","","",12,[[["self"]],["idtentry"]]],[11,"debug_exception","","",12,[[["self"]],["idtentry"]]],[11,"nmi","","",12,[[["self"]],["idtentry"]]],[11,"breakpoint","","",12,[[["self"]],["idtentry"]]],[11,"overflow","","",12,[[["self"]],["idtentry"]]],[11,"bound_range_exceeded","","",12,[[["self"]],["idtentry"]]],[11,"invalid_opcode","","",12,[[["self"]],["idtentry"]]],[11,"device_not_available","","",12,[[["self"]],["idtentry"]]],[11,"double_fault","","",12,[[["self"]],["idtentry"]]],[11,"invalid_tss","","",12,[[["self"]],["idtentry"]]],[11,"segment_not_present","","",12,[[["self"]],["idtentry"]]],[11,"stack_segment_fault","","",12,[[["self"]],["idtentry"]]],[11,"general_protection_fault","","",12,[[["self"]],["idtentry"]]],[11,"page_fault","","",12,[[["self"]],["idtentry"]]],[11,"x87_fault","","",12,[[["self"]],["idtentry"]]],[11,"alignment_check","","",12,[[["self"]],["idtentry"]]],[11,"machine_check","","",12,[[["self"]],["idtentry"]]],[11,"simd_exception","","",12,[[["self"]],["idtentry"]]],[11,"virtualization_exception","","",12,[[["self"]],["idtentry"]]],[11,"load","","",12,[[["self"]]]],[0,"i8259_pic","x86_64::hw","",N,N],[3,"Pic","x86_64::hw::i8259_pic","",N,N],[11,"new","","",13,[[],["pic"]]],[11,"remap_and_disable","","Remap and disable the PIC. It is necessary to remap the…",13,[[["self"],["u8"],["u8"]]]],[0,"local_apic","x86_64::hw","",N,N],[3,"LocalApicRegister","x86_64::hw::local_apic","Represents a register in the local APIC's configuration…",N,N],[3,"LocalApic","","Methods on this type operate on the local APIC of the…",N,N],[11,"read","","Read from this register. Unsafe because not all registers…",14,[[["self"]],["u32"]]],[11,"write","","Write to this register. Unsafe because not all registers…",14,[[["self"],["u32"]]]],[11,"enable","","",15,[[["u8"]]]],[11,"register","","",15,[[["usize"]],["localapicregister"]]],[11,"send_eoi","","Send an End Of Interrupt to the local APIC. This should be…",15,[[]]],[0,"cpu","x86_64::hw","",N,N],[3,"CpuInfo","x86_64::hw::cpu","Describes information we know about the system we're…",N,N],[12,"max_supported_standard_level","","",16,N],[12,"vendor","","",16,N],[12,"model_info","","",16,N],[12,"hypervisor_info","","Information about the hypervisor we're running under, if…",16,N],[3,"ModelInfo","","",N,N],[12,"family","","",17,N],[12,"model","","",17,N],[12,"stepping","","",17,N],[12,"extended_family","","",17,N],[12,"extended_model","","",17,N],[3,"HypervisorInfo","","",N,N],[4,"Vendor","","",N,N],[13,"Unknown","","",18,N],[13,"Intel","","",18,N],[13,"Amd","","",18,N],[4,"Microarch","","Intel and AMD microarchitectures we can expect processors…",N,N],[13,"Nehalem","","",19,N],[13,"Westmere","","",19,N],[13,"SandyBridge","","",19,N],[13,"IvyBridge","","",19,N],[13,"Haswell","","",19,N],[13,"Broadwell","","",19,N],[13,"Skylake","","",19,N],[13,"KabyLake","","",19,N],[13,"CoffeeLake","","",19,N],[13,"CannonLake","","",19,N],[13,"WhiskeyLake","","",19,N],[13,"AmberLake","","",19,N],[13,"Bulldozer","","",19,N],[13,"Jaguar","","",19,N],[13,"Zen","","",19,N],[4,"HypervisorVendor","","",N,N],[13,"Unknown","","",20,N],[13,"Kvm","","",20,N],[11,"new","","",16,[[],["cpuinfo"]]],[11,"microarch","","",16,[[["self"]],["option",["microarch"]]]],[11,"apic_frequency","","Get the frequency the APIC runs at (in Hz), if we can…",16,[[["self"]],["option",["u32"]]]],[0,"port","x86_64::hw","",N,N],[3,"Port","x86_64::hw::port","Represents an IO port that can be read and written to…",N,N],[8,"PortSize","","Implemented by the types used to represent 8-bit, 16-bit,…",N,N],[10,"port_read","","",21,[[["u16"]],["self"]]],[10,"port_write","","",21,[[["u16"],["self"]]]],[11,"new","","Create a new `Port` at the specified I/O address. Unsafe…",22,[[["u16"]],["port"]]],[11,"read","","",22,[[["self"]],["t"]]],[11,"write","","",22,[[["self"],["t"]]]],[0,"registers","x86_64::hw","",N,N],[3,"CpuFlags","x86_64::hw::registers","A wrapper for the `RFLAGS` register, providing a nice…",N,N],[12,"0","","",23,N],[17,"EFER","","",N,N],[11,"read","","Read the contents of `RFLAGS`, creating a `CpuFlags`.",23,[[],["cpuflags"]]],[11,"interrupts_enabled","","",23,[[["self"]],["bool"]]],[0,"serial","x86_64::hw","",N,N],[3,"SerialPort","x86_64::hw::serial","",N,N],[17,"COM1","","",N,N],[11,"new","","",24,[[["u16"]],["serialport"]]],[11,"initialise","","",24,[[["self"]]]],[11,"read","","",24,[[["self"]],["u8"]]],[11,"write","","",24,[[["self"],["u8"]]]],[0,"tlb","x86_64::hw","",N,N],[5,"invalidate_page","x86_64::hw::tlb","",N,[[["virtualaddress"]]]],[5,"flush","","",N,[[]]],[0,"memory","x86_64","",N,N],[3,"PhysicalAddress","x86_64::memory","Represents an address in the physical memory space. A…",N,N],[0,"kernel_map","","These constants define the layout of the memory map when…",N,N],[17,"RECURSIVE_ENTRY","x86_64::memory::kernel_map","We use the 510th entry of the PML4 (P4) to access the page…",N,N],[17,"P4_TABLE_ADDRESS","","This address can be used to access the currently mapped P4…",N,N],[17,"KERNEL_BASE","","This is the base of the kernel address space. It starts at…",N,N],[17,"HEAP_START","","This is the address of the start of the kernel heap. The…",N,N],[17,"HEAP_END","","",N,N],[17,"PHYSICAL_MAPPING_START","","This is the address of the start of the area in the kernel…",N,N],[17,"PHYSICAL_MAPPING_END","","",N,N],[17,"BOOT_INFO","","",N,N],[17,"LOCAL_APIC_CONFIG","","The virtual address that the configuration page of the…",N,N],[0,"paging","x86_64::memory","",N,N],[8,"Deref","x86_64::memory::paging","Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target","","The resulting type after dereferencing.",25,N],[10,"deref","","Dereferences the value.",25,N],[8,"DerefMut","","Used for mutable dereferencing operations, like in `*v =…",N,N],[10,"deref_mut","","Mutably dereferences the value.",26,N],[3,"InactivePageTable","","Represents a set of page tables that are not currently…",N,N],[3,"ActivePageTable","","Represents the set of page tables that are currently being…",N,N],[0,"entry","","",N,N],[3,"Entry","x86_64::memory::paging::entry","",N,N],[3,"EntryFlags","","",N,N],[18,"PRESENT","","",27,N],[18,"WRITABLE","","",27,N],[18,"USER_ACCESSIBLE","","",27,N],[18,"WRITE_THROUGH","","",27,N],[18,"NO_CACHE","","",27,N],[18,"ACCESSED","","",27,N],[18,"DIRTY","","",27,N],[18,"HUGE_PAGE","","",27,N],[18,"GLOBAL","","",27,N],[18,"NO_EXECUTE","","",27,N],[11,"empty","","Returns an empty set of flags.",27,[[],["entryflags"]]],[11,"all","","Returns the set containing all flags.",27,[[],["entryflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",27,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",27,[[["u64"]],["option",["entryflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",27,[[["u64"]],["entryflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",27,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",27,[[["self"],["entryflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",27,[[["self"],["entryflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",27,[[["self"],["entryflags"]]]],[11,"remove","","Removes the specified flags in-place.",27,[[["self"],["entryflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",27,[[["self"],["entryflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",27,[[["self"],["entryflags"],["bool"]]]],[11,"is_compatible","","",27,[[["self"],["entryflags"]],["bool"]]],[11,"is_unused","","",28,[[["self"]],["bool"]]],[11,"set_unused","","",28,[[["self"]]]],[11,"flags","","",28,[[["self"]],["entryflags"]]],[11,"pointed_frame","","",28,[[["self"]],["option",["frame"]]]],[11,"set","","",28,[[["self"],["frame"],["entryflags"]]]],[0,"frame","x86_64::memory::paging","",N,N],[3,"Frame","x86_64::memory::paging::frame","",N,N],[11,"contains","","",29,[[["physicaladdress"]],["frame"]]],[11,"start_address","","",29,[[["self"]],["physicaladdress"]]],[0,"frame_allocator","x86_64::memory::paging","",N,N],[8,"FrameAllocator","x86_64::memory::paging::frame_allocator","`FrameAllocator` represents the `x86_64` crate's interface…",N,N],[11,"allocate","","Allocate a `Frame`.",30,[[["self"]],["frame"]]],[10,"allocate_n","","Allocate `n` contiguous `Frame`s.",30,[[["self"],["usize"]],["range",["frame"]]]],[10,"free_n","","Free `n` frames that were previously allocated by this…",30,[[["self"],["frame"],["usize"]]]],[0,"mapper","x86_64::memory::paging","",N,N],[3,"Mapper","x86_64::memory::paging::mapper","A `Mapper` allows you to change the virtual to physical…",N,N],[11,"translate","","Get the `PhysicalAddress` a given `VirtualAddress` is…",31,[[["self"],["virtualaddress"]],["option",["physicaladdress"]]]],[11,"translate_page","","Get the physical `Frame` that a given virtual `Page` is…",31,[[["self"],["page"]],["option",["frame"]]]],[11,"map","","Map the given `Page` somewhere in physical memory.…",31,[[["self"],["page"],["entryflags"],["a"]]]],[11,"map_to","","",31,[[["self"],["page"],["frame"],["entryflags"],["a"]]]],[11,"unmap","","",31,[[["self"],["page"],["a"]]]],[0,"page","x86_64::memory::paging","",N,N],[3,"Page","x86_64::memory::paging::page","",N,N],[11,"contains","","Get the page that contains the given virtual address.",32,[[["virtualaddress"]],["page"]]],[11,"start_address","","",32,[[["self"]],["virtualaddress"]]],[11,"p4_index","","",32,[[["self"]],["u16"]]],[11,"p3_index","","",32,[[["self"]],["u16"]]],[11,"p2_index","","",32,[[["self"]],["u16"]]],[11,"p1_index","","",32,[[["self"]],["u16"]]],[0,"table","x86_64::memory::paging","This module contains types for representing raw page…",N,N],[3,"Table","x86_64::memory::paging::table","Represents a page table, with 512 entries which are either…",N,N],[4,"Level4","","",N,N],[4,"Level3","","",N,N],[4,"Level2","","",N,N],[4,"Level1","","",N,N],[4,"IdentityMapping","","This is a marker type that specifies that we are in an…",N,N],[4,"RecursiveMapping","","This is a marker type that specifies that we are in an…",N,N],[8,"TableLevel","","",N,N],[8,"HierarchicalLevel","","Tables of levels that implement `HierarchicalLevel` are…",N,N],[16,"NextLevel","","",33,N],[8,"TableMapping","","This trait specifies how we should access and modify a set…",N,N],[10,"next_table_address","","",34,[[["table"],["u16"]],["option",["virtualaddress"]]]],[11,"zero","","",35,[[["self"]]]],[11,"next_table","","",35,[[["self"],["u16"]],["option",["table"]]]],[11,"next_table_mut","","",35,[[["self"],["u16"]],["option",["table"]]]],[11,"next_table_create","","",35,[[["self"],["u16"],["bool"],["a"]],["table"]]],[17,"FRAME_SIZE","x86_64::memory::paging","",N,N],[17,"PAGE_SIZE","","",N,N],[11,"new","","Create a new set of page-tables. `frame` must be an…",36,[[["frame"]],["inactivepagetable"]]],[11,"new_with_recursive_mapping","","Create a new set of page-tables that should be accessed…",36,[[["frame"],["u16"]],["inactivepagetable",["identitymapping"]]]],[11,"mapper","","",36,[[["self"]],["mapper",["identitymapping"]]]],[11,"switch_to","","Switch to this set of page tables. This returns a tuple…",36,N],[11,"switch_to","","Switch to this set of page tables. This returns a tuple…",36,N],[11,"new","","Create an `ActivePageTable` to represent an active set of…",37,[[["physicaladdress"]],["activepagetable",["identitymapping"]]]],[11,"new","","Create an `ActivePageTable` to represent the…",37,[[],["activepagetable",["recursivemapping"]]]],[11,"with","","Alter the mappings of a `InactivePageTable` by temporarily…",37,[[["self"],["inactivepagetable"],["a"],["f"]]]],[11,"new","x86_64::memory","",38,[[["usize"]],["option",["physicaladdress"]]]],[11,"new_unchecked","","",38,[[["usize"]],["physicaladdress"]]],[11,"offset_into_frame","","",38,[[["self"]],["usize"]]],[11,"is_frame_aligned","","",38,[[["self"]],["bool"]]],[14,"getter","x86_64","",N,N],[14,"read_control_reg","","Read a control register. The name of the control register…",N,N],[14,"write_control_reg","","Write to a control register. Calls to this macro will need…",N,N],[14,"read_msr","","Read from a model-specific register.",N,N],[14,"write_msr","","Write to a model-specific register. This is unsafe,…",N,N],[11,"try_from","x86_64::boot","",0,[[["u"]],["result"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw","",3,[[["u"]],["result"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw::gdt","",4,[[["u"]],["result"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,N],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,N],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,N],[11,"try_from","x86_64::hw::tss","",9,[[["u"]],["result"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,N],[11,"try_from","x86_64::hw::idt","",11,[[["u"]],["result"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","x86_64::hw::i8259_pic","",13,[[["u"]],["result"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw::local_apic","",14,[[["u"]],["result"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw::cpu","",16,[[["u"]],["result"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw::port","",22,[[["u"]],["result"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_from","x86_64::hw::registers","",23,[[["u"]],["result"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","x86_64::hw::serial","",24,[[["u"]],["result"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory","",38,[[["u"]],["result"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","x86_64::memory::paging","",36,[[["u"]],["result"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging::entry","",28,[[["u"]],["result"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","x86_64::memory::paging::frame","",29,[[["u"]],["result"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","x86_64::memory::paging::mapper","",31,[[["u"]],["result"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"try_from","x86_64::memory::paging::page","",32,[[["u"]],["result"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"to_owned","","",32,[[["self"]],["t"]]],[11,"clone_into","","",32,N],[11,"try_from","x86_64::memory::paging::table","",35,[[["u"]],["result"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"into","","",41,[[["self"]],["u"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"next_table_address","","",44,[[["table"],["u16"]],["option",["virtualaddress"]]]],[11,"next_table_address","","",45,[[["table"],["u16"]],["option",["virtualaddress"]]]],[11,"deref","x86_64::memory::paging","",37,N],[11,"fmt","x86_64::boot","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::hw::gdt","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::hw::tss","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::hw::idt","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::hw::cpu","",18,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",19,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",17,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::hw::registers","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::paging::entry","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::paging::frame","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::paging::page","",32,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory","",38,[[["self"],["formatter"]],["result"]]],[11,"sub","x86_64::memory::paging::entry","Returns the set difference of the two sets of flags.",27,[[["self"],["entryflags"]],["entryflags"]]],[11,"sub","x86_64::memory","",38,N],[11,"eq","x86_64::boot","",2,[[["self"],["memorytype"]],["bool"]]],[11,"eq","x86_64::hw::gdt","",5,[[["self"],["privilegelevel"]],["bool"]]],[11,"eq","x86_64::hw::cpu","",18,[[["self"],["vendor"]],["bool"]]],[11,"eq","","",20,[[["self"],["hypervisorvendor"]],["bool"]]],[11,"eq","x86_64::memory::paging::entry","",27,[[["self"],["entryflags"]],["bool"]]],[11,"ne","","",27,[[["self"],["entryflags"]],["bool"]]],[11,"eq","x86_64::memory::paging::frame","",29,[[["self"],["frame"]],["bool"]]],[11,"ne","","",29,[[["self"],["frame"]],["bool"]]],[11,"eq","x86_64::memory::paging::page","",32,[[["self"],["page"]],["bool"]]],[11,"ne","","",32,[[["self"],["page"]],["bool"]]],[11,"eq","x86_64::memory","",38,[[["self"],["physicaladdress"]],["bool"]]],[11,"cmp","x86_64::memory::paging::entry","",27,[[["self"],["entryflags"]],["ordering"]]],[11,"cmp","x86_64::memory::paging::frame","",29,[[["self"],["frame"]],["ordering"]]],[11,"cmp","x86_64::memory::paging::page","",32,[[["self"],["page"]],["ordering"]]],[11,"cmp","x86_64::memory","",38,[[["self"],["physicaladdress"]],["ordering"]]],[11,"partial_cmp","x86_64::memory::paging::entry","",27,[[["self"],["entryflags"]],["option",["ordering"]]]],[11,"lt","","",27,[[["self"],["entryflags"]],["bool"]]],[11,"le","","",27,[[["self"],["entryflags"]],["bool"]]],[11,"gt","","",27,[[["self"],["entryflags"]],["bool"]]],[11,"ge","","",27,[[["self"],["entryflags"]],["bool"]]],[11,"partial_cmp","x86_64::memory::paging::frame","",29,[[["self"],["frame"]],["option",["ordering"]]]],[11,"lt","","",29,[[["self"],["frame"]],["bool"]]],[11,"le","","",29,[[["self"],["frame"]],["bool"]]],[11,"gt","","",29,[[["self"],["frame"]],["bool"]]],[11,"ge","","",29,[[["self"],["frame"]],["bool"]]],[11,"partial_cmp","x86_64::memory::paging::page","",32,[[["self"],["page"]],["option",["ordering"]]]],[11,"lt","","",32,[[["self"],["page"]],["bool"]]],[11,"le","","",32,[[["self"],["page"]],["bool"]]],[11,"gt","","",32,[[["self"],["page"]],["bool"]]],[11,"ge","","",32,[[["self"],["page"]],["bool"]]],[11,"partial_cmp","x86_64::memory","",38,[[["self"],["physicaladdress"]],["option",["ordering"]]]],[11,"write_str","x86_64::hw::serial","",24,[[["self"],["str"]],["result"]]],[11,"hash","x86_64::memory::paging::entry","",27,N],[11,"add","x86_64::memory::paging::frame","",29,N],[11,"add","x86_64::memory::paging::page","",32,N],[11,"add","x86_64::memory","",38,N],[11,"add_assign","x86_64::memory::paging::frame","",29,[[["self"],["usize"]]]],[11,"add_assign","x86_64::memory::paging::page","",32,[[["self"],["usize"]]]],[11,"sub_assign","x86_64::memory::paging::entry","Disables all flags enabled in the set.",27,[[["self"],["entryflags"]]]],[11,"not","","Returns the complement of this set of flags.",27,[[["self"]],["entryflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",27,[[["self"],["entryflags"]],["entryflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",27,[[["self"],["entryflags"]],["entryflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",27,[[["self"],["entryflags"]],["entryflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",27,[[["self"],["entryflags"]]]],[11,"bitor_assign","","Adds the set of flags.",27,[[["self"],["entryflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",27,[[["self"],["entryflags"]]]],[11,"deref_mut","x86_64::memory::paging","",37,N],[11,"index","x86_64::hw::idt","",12,N],[11,"index","x86_64::memory::paging::table","",35,[[["self"],["u16"]],["entry"]]],[11,"index_mut","x86_64::hw::idt","",12,N],[11,"index_mut","x86_64::memory::paging::table","",35,[[["self"],["u16"]],["entry"]]],[11,"extend","x86_64::memory::paging::entry","",27,[[["self"],["t"]]]],[11,"steps_between","x86_64::memory::paging::frame","",29,[[["self"],["self"]],["option",["usize"]]]],[11,"replace_one","","",29,[[["self"]],["self"]]],[11,"replace_zero","","",29,[[["self"]],["self"]]],[11,"add_one","","",29,[[["self"]],["self"]]],[11,"sub_one","","",29,[[["self"]],["self"]]],[11,"add_usize","","",29,[[["self"],["usize"]],["option"]]],[11,"steps_between","x86_64::memory::paging::page","",32,[[["self"],["self"]],["option",["usize"]]]],[11,"replace_one","","",32,[[["self"]],["self"]]],[11,"replace_zero","","",32,[[["self"]],["self"]]],[11,"add_one","","",32,[[["self"]],["self"]]],[11,"sub_one","","",32,[[["self"]],["self"]]],[11,"add_usize","","",32,[[["self"],["usize"]],["option"]]],[11,"from_iter","x86_64::memory::paging::entry","",27,[[["t"]],["entryflags"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::paging::entry","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory","",38,[[["self"],["formatter"]],["result"]]],[11,"clone","x86_64::hw::gdt","",5,[[["self"]],["privilegelevel"]]],[11,"clone","","",4,[[["self"]],["segmentselector"]]],[11,"clone","","",7,[[["self"]],["tsssegment"]]],[11,"clone","x86_64::hw::tss","",9,[[["self"]],["tss"]]],[11,"clone","x86_64::hw::idt","",11,[[["self"]],["idtentry"]]],[11,"clone","","",10,[[["self"]],["interruptstackframe"]]],[11,"clone","x86_64::hw::registers","",23,[[["self"]],["cpuflags"]]],[11,"clone","x86_64::memory::paging::entry","",27,[[["self"]],["entryflags"]]],[11,"clone","x86_64::memory::paging::frame","",29,[[["self"]],["frame"]]],[11,"clone","x86_64::memory::paging::page","",32,[[["self"]],["page"]]],[11,"clone","x86_64::memory","",38,[[["self"]],["physicaladdress"]]],[11,"default","x86_64::memory::paging::entry","",27,[[],["entryflags"]]],[11,"default","x86_64::memory","",38,[[],["physicaladdress"]]]],"paths":[[3,"MemoryEntry"],[3,"BootInfo"],[4,"MemoryType"],[3,"DescriptorTablePointer"],[3,"SegmentSelector"],[4,"PrivilegeLevel"],[3,"CodeSegment"],[3,"TssSegment"],[3,"Gdt"],[3,"Tss"],[3,"InterruptStackFrame"],[3,"IdtEntry"],[3,"Idt"],[3,"Pic"],[3,"LocalApicRegister"],[3,"LocalApic"],[3,"CpuInfo"],[3,"ModelInfo"],[4,"Vendor"],[4,"Microarch"],[4,"HypervisorVendor"],[8,"PortSize"],[3,"Port"],[3,"CpuFlags"],[3,"SerialPort"],[8,"Deref"],[8,"DerefMut"],[3,"EntryFlags"],[3,"Entry"],[3,"Frame"],[8,"FrameAllocator"],[3,"Mapper"],[3,"Page"],[8,"HierarchicalLevel"],[8,"TableMapping"],[3,"Table"],[3,"InactivePageTable"],[3,"ActivePageTable"],[3,"PhysicalAddress"],[3,"HypervisorInfo"],[4,"Level4"],[4,"Level3"],[4,"Level2"],[4,"Level1"],[4,"IdentityMapping"],[4,"RecursiveMapping"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
