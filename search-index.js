var N=null,E="",T="t",U="u",searchIndex={};
var r_0l="processor_uid",r_1l="local_apic_id",r_2l="is_ap",r_3l="processor",r_Al="kernel::util::binary_pretty_print",r_Bl="allocate_n",r_Cl="free_n",r_Dl="map_physical_region",r_El="unmap_physical_region",r_Fl="acpiphysicalmapping",r_Gl="PebbleAcpiHandler",r_Hl="InterruptController",r_Il="PhysicalRegionMapper",r_Jl="BuddyAllocator",r_Kl="PhysicalMemoryManager",r_Ll="LockedPhysicalMemoryManager",r_Ml="HoleAllocator",r_Nl="LockedHoleAllocator",r_Ol="HoleInfo",r_Pl="HoleList",r_Ql="Allocation",r_Rl="BinaryPrettyPrint",r_Sl="Bitmap",r_Tl="KernelLogger",r_Ul="set_handler",r_Vl="memory",r_Wl="frame_allocator",r_Xl="logger",r_Yl="enabled",r_Zl="info",r_cl="kernel",r_dl="kmain",r_el="This is the entry point for the kernel on x86_64. It is…",r_fl="physical_region_mapper",r_gl="kernel::x86_64",r_hl="interruptstackframe",r_il="kernel::x86_64::memory",r_jl="buddy_allocator",r_kl="lockedphysicalmemorymanager",r_ll="size",r_ml="layout",r_nl="allocation",r_ol="new_uninitialized",r_pl="holeinfo",r_ql="allocate_first_fit",r_rl="allocerr",r_sl="kernel::util",r_tl="kernel::x86_64::acpi_handler",r_ul="kernel::x86_64::cpu",r_vl="kernel::x86_64::interrupts",r_wl="kernel::x86_64::logger",r_xl="kernel::x86_64::memory::buddy_allocator",r_yl="kernel::x86_64::memory::physical",r_zl="kernel::heap_allocator";
var r_0f="Converts the value of `self` to an `i64`.",r_0g="Convert a value to another, using the `as` operator.",r_0h="num::complex",r_0i="bounds",r_0j="Return `π / 8.0`.",r_0k="norm_sqr",r_1f="Converts the value of `self` to an `i128`.",r_1g="Defines an additive identity element for `Self`.",r_1h="num::integer",r_1i="float",r_1j="LN_10",r_1k="Returns the square of the norm (since `T` doesn't…",r_2f="Converts the value of `self` to a `usize`.",r_2g="Returns the additive identity element of `Self`, `0`.",r_2h="num::iter",r_2i="Generic trait for floating point numbers that works with…",r_2j="Return `ln(10.0)`.",r_2k="scale",r_3f="Converts the value of `self` to an `u8`.",r_3g="Returns `true` if `self` is equal to the additive identity.",r_3h="num::rational",r_3i="infinity",r_3j="Return `ln(2.0)`.",r_3k="Multiplies `self` by the scalar `t`.",r_4f="Converts the value of `self` to an `u16`.",r_4g="Defines a multiplicative identity element for `Self`.",r_4h="error",r_4i="Returns positive infinity.",r_4j="LOG10_E",r_4k="unscale",r_5f="Converts the value of `self` to an `u32`.",r_5g="Returns the multiplicative identity element of `Self`, `1`.",r_5h="abs",r_5i="neg_infinity",r_5j="Return `log10(e)`.",r_5k="Divides `self` by the scalar `t`.",r_6f="Converts the value of `self` to an `u64`.",r_6g="Returns `true` if `self` is equal to the multiplicative…",r_6h="one",r_6i="Returns negative infinity.",r_6j="LOG2_E",r_6k="Returns the complex conjugate. i.e. `re - i im`",r_7f="Converts the value of `self` to an `u128`.",r_7g="Returns the additive identity, `0`.",r_7h="Zero",r_7i="Returns NaN.",r_7j="Return `log2(e)`.",r_7k="Returns `1/self`",r_8f="Converts the value of `self` to an `f32`.",r_8g="Returns the multiplicative identity, `1`.",r_8h="An iterator over the range [start, stop)",r_8i="neg_zero",r_8j="Return Archimedes’ constant.",r_8k="Checks if the given complex number is NaN",r_9f="Converts the value of `self` to an `f64`.",r_9g="count_ones",r_9h="An iterator over the range [start, stop]",r_9i="Returns `-0.0`.",r_9j="SQRT_2",r_9k="Checks if the given complex number is infinite",r_Ag="Floored integer modulo, satisfying:",r_Ah="Performs subtraction that returns `None` instead of…",r_Ai="to_integer",r_Aj="Returns the reciprocal (multiplicative inverse) of the…",r_Ak="Wrapping (modular) subtraction. Computes `self - other`,…",r_Bg="Greatest Common Divisor (GCD).",r_Bh="Subtracts two numbers, checking for underflow. If…",r_Bi="Converts to an integer, rounding towards zero.",r_Bj="Raise a number to an integer power.",r_Bk="Performs multiplication that wraps around on overflow.",r_Cg="Lowest Common Multiple (LCM).",r_Ch="Performs multiplication that returns `None` instead of…",r_Ci="numer",r_Cj="to_degrees",r_Ck="wrapping_mul",r_Dg="divides",r_Dh="Multiplies two numbers, checking for underflow or…",r_Di="Gets an immutable reference to the numerator.",r_Dj="Converts to degrees, assuming the number is in radians.",r_Dk="Wrapping (modular) multiplication. Computes `self *…",r_Eg="Deprecated, use `is_multiple_of` instead.",r_Eh="Performs division that returns `None` instead of panicking…",r_Ei="denom",r_Ej="to_radians",r_Ek="Performs a left shift that does not panic.",r_Fg="is_multiple_of",r_Fh="Divides two numbers, checking for underflow, overflow and…",r_Fi="Gets an immutable reference to the denominator.",r_Fj="Converts to radians, assuming the number is in degrees.",r_Fk="wrapping_shl",r_Gg="Returns `true` if `self` is a multiple of `other`.",r_Gh="num::traits::ops",r_Gi="is_integer",r_Gj="integer_decode",r_Gk="Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",r_Hg="is_even",r_Hh="Saturating math operations",r_Hi="Returns true if the rational number is an integer…",r_Hj="Returns the mantissa, base 2 exponent, and sign as…",r_Hk="Performs a right shift that does not panic.",r_Ig="Returns `true` if the number is even.",r_Ih="saturating_add",r_Ii="reduced",r_Ij="Return Euler’s number.",r_Ik="wrapping_shr",r_Jg="is_odd",r_Jh="Saturating addition operator. Returns a+b, saturating at…",r_Ji="Returns a reduced copy of self.",r_Jj="FRAC_1_PI",r_Jk="Panic-free bitwise shift-right; yields `self >>…",r_Kg="Returns `true` if the number is odd.",r_Kh="saturating_sub",r_Ki="Returns the reciprocal.",r_Kj="Return `1.0 / π`.",r_Kk="NumOps",r_Lg="Simultaneous truncated integer division and modulus.…",r_Lh="Saturating subtraction operator. Returns a-b, saturating…",r_Li="Rounds towards minus infinity.",r_Lj="FRAC_1_SQRT_2",r_Lk="The trait for types implementing basic numeric operations",r_Mg="Simultaneous floored integer division and modulus. Returns…",r_Mh="Binary operator for raising a value to a power.",r_Mi="ceil",r_Mj="Return `1.0 / sqrt(2.0)`.",r_Mk="NumRef",r_Ng="num",r_Nh="Returns `self` to the power `rhs`.",r_Ni="Rounds towards plus infinity.",r_Nj="FRAC_2_PI",r_Nk="The trait for `Num` types which also implement numeric…",r_Og="Returns an iterator over the given range [start, stop)…",r_Oh="Useful functions for signed numbers (i.e. numbers that can…",r_Oi="Rounds to the nearest integer. Rounds half-way cases away…",r_Oj="Return `2.0 / π`.",r_Ok="RefNum",r_Pg="range_inclusive",r_Ph="Returns true if the number is positive and false if the…",r_Pi="Rounds towards zero.",r_Pj="FRAC_2_SQRT_PI",r_Pk="The trait for references which implement numeric…",r_Qg="Return an iterator over the range [start, stop]",r_Qh="Returns true if the number is negative and false if the…",r_Qi="Returns the fractional part of a number, with division…",r_Qj="Return `2.0 / sqrt(π)`.",r_Qk="NumAssignOps",r_Rg="range_step",r_Rh="Unsigned",r_Ri="Raises the `Ratio` to the power of an exponent.",r_Rj="FRAC_PI_2",r_Rk="The trait for types implementing numeric assignment…",r_Sg="Return an iterator over the range [start, stop) by `step`.…",r_Sh="A trait for values which cannot be negative",r_Si="approximate_float",r_Sj="Return `π / 2.0`.",r_Sk="NumAssign",r_Tg="range_step_inclusive",r_Th="The base trait for numeric types, covering `0` and `1`…",r_Ti="Renders as `numer/denom`. If denom=1, renders as numer.",r_Tj="FRAC_PI_3",r_Tk="The trait for `Num` types which also implement assignment…",r_Ug="Return an iterator over the range [start, stop] by `step`.…",r_Uh="FromStrRadixErr",r_Ui="Parses `numer/denom` or just `numer`.",r_Uj="Return `π / 3.0`.",r_Uk="NumAssignRef",r_Vf="A generic trait for converting a value to a number.",r_Vg="Numbers which have upper and lower bounds",r_Vh="Convert from a string and radix <= 36.",r_Vi="sum",r_Vj="FRAC_PI_4",r_Vk="The trait for `NumAssign` types which also implement…",r_Wf="Converts the value of `self` to an `isize`.",r_Wg="returns the smallest finite number this type can represent",r_Wh="clamp",r_Wi="Parses `numer/denom` where the numbers are in base `radix`.",r_Wj="Return `π / 4.0`.",r_Wk="Complex32",r_Xf="Converts the value of `self` to an `i8`.",r_Xg="returns the largest finite number this type can represent",r_Xh="A value bounded by a minimum and a maximum",r_Xi="inv",r_Xj="FRAC_PI_6",r_Xk="Complex64",r_Yf="Converts the value of `self` to an `i16`.",r_Yg="num::traits",r_Yh="Rational",r_Yi="Empty",r_Yj="Return `π / 6.0`.",r_Yk="Create a new Complex",r_Zf="Converts the value of `self` to an `i32`.",r_Zg="A generic interface for casting between machine scalars…",r_Zh="Alias for a `Ratio` of machine-sized integers.",r_Zi="Invalid",r_Zj="FRAC_PI_8",r_Zk="Returns imaginary unit",r_ag="A generic trait for converting a number to a value.",r_ah="Returns the number of ones in the binary representation of…",r_ai="An iterator over the range [start, stop) by `step`. It…",r_aj="Returns the smallest finite value that this type can…",r_ak="Return `sqrt(2.0)`.",r_al="Checks if the given complex number is finite",r_bg="Convert an `isize` to return an optional value of this…",r_bh="count_zeros",r_bi="An iterator over the range [start, stop] by `step`. It…",r_bj="min_positive_value",r_bk="identities",r_bl="Checks if the given complex number is normal",r_cg="Convert an `i8` to return an optional value of this type.…",r_ch="Returns the number of zeros in the binary representation…",r_ci="An iterator over binomial coefficients.",r_cj="Returns the smallest positive, normalized value that this…",r_ck="checked",r_dg="Convert an `i16` to return an optional value of this type.…",r_dh="leading_zeros",r_di="Simultaneous integer division and modulus",r_dj="epsilon",r_dk="Performs an integral remainder that returns `None` instead…",r_eg="Convert an `i32` to return an optional value of this type.…",r_eh="Returns the number of leading zeros in the binary…",r_ei="Floored integer division",r_ej="Returns epsilon, a small positive value.",r_ek="checked_rem",r_fg="Convert an `i64` to return an optional value of this type.…",r_fh="trailing_zeros",r_fi="Floored integer modulus",r_fj="Returns the largest finite value that this type can…",r_fk="Finds the remainder of dividing two numbers, checking for…",r_gg="Convert an `i128` to return an optional value of this…",r_gh="Returns the number of trailing zeros in the binary…",r_gi="Simultaneous floored integer division and modulus",r_gj="Returns `true` if the number is NaN.",r_gk="Performs negation that returns `None` if the result can't…",r_hg="Convert a `usize` to return an optional value of this…",r_hh="rotate_left",r_hi="Calculates the Greatest Common Divisor (GCD) of the number…",r_hj="Returns `true` if the number is infinite.",r_hk="checked_neg",r_ig="Convert an `u8` to return an optional value of this type.…",r_ih="rotate_right",r_ii="Calculates the Lowest Common Multiple (LCM) of the number…",r_ij="Returns `true` if the number is neither infinite or NaN.",r_ik="Negates a number, returning `None` for results that can't…",r_jg="Convert an `u16` to return an optional value of this type.…",r_jh="signed_shl",r_ji="binomial",r_jj="Returns `true` if the number is neither zero, infinite,…",r_jk="Performs a left shift that returns `None` on overflow.",r_kg="Convert an `u32` to return an optional value of this type.…",r_kh="signed_shr",r_ki="Calculate the binomial coefficient.",r_kj="classify",r_kk="checked_shl",r_lg="Convert an `u64` to return an optional value of this type.…",r_lh="unsigned_shl",r_li="multinomial",r_lj="Returns the floating point category of the number. If only…",r_lk="Performs a right shift that returns `None` on overflow.",r_mg="Convert an `u128` to return an optional value of this…",r_mh="unsigned_shr",r_mi="Calculate the multinomial coefficient.",r_mj="fpcategory",r_mk="checked_shr",r_ng="Convert a `f32` to return an optional value of this type.…",r_nh="swap_bytes",r_ni="Provides methods to compute an integer's square root, cube…",r_nj="Returns the largest integer less than or equal to a number.",r_nk="Unary operator for retrieving the multiplicative inverse,…",r_og="Convert a `f64` to return an optional value of this type.…",r_oh="Reverses the byte order of the integer.",r_oi="For a given n, iterate over all binomial coefficients…",r_oj="Returns the smallest integer greater than or equal to a…",r_ok="Returns the multiplicative inverse of `self`.",r_pg="An interface for casting between machine scalars.",r_ph="from_be",r_pi="iterbinomial",r_pj="Returns the nearest integer to a number. Round half-way…",r_pk="Fused multiply-add. Computes `(self * a) + b` with only…",r_qg="Creates a number from another value that can be converted…",r_qh="Convert an integer from big endian to the target's…",r_qi="Represents the ratio between two numbers.",r_qj="Return the integer part of a number.",r_qk="The resulting type after applying the fused multiply-add.",r_rg="cast",r_rh="from_le",r_ri="Rational32",r_rj="Returns the fractional part of a number.",r_rk="The fused multiply-add assignment operation.",r_sg="Cast from one machine scalar to another.",r_sh="Convert an integer from little endian to the target's…",r_si="Alias for a `Ratio` of 32-bit-sized integers.",r_sj="Computes the absolute value of `self`. Returns…",r_sk="mul_add_assign",r_tg="Raises a value to the power of exp, using exponentiation…",r_th="to_be",r_ti="Rational64",r_tj="Returns a number that represents the sign of `self`.",r_tk="saturating",r_ug="checked_pow",r_uh="Convert `self` to big endian from the target's endianness.",r_ui="Alias for a `Ratio` of 64-bit-sized integers.",r_uj="is_sign_positive",r_uk="wrapping",r_vg="Raises a value to the power of exp, returning `None` if an…",r_vh="to_le",r_vi="Creates a new `Ratio`. Fails if `denom` is zero.",r_vj="Returns `true` if `self` is positive, including `+0.0` and…",r_vk="Performs addition that wraps around on overflow.",r_wg="A complex number in Cartesian form.",r_wh="Convert `self` to little endian from the target's…",r_wi="from_integer",r_wj="is_sign_negative",r_wk="wrapping_add",r_xg="Real portion of the complex number",r_xh="Raises self to the power of `exp`, using exponentiation by…",r_xi="Creates a `Ratio` representing the integer `t`.",r_xj="Returns `true` if `self` is negative, including `-0.0` and…",r_xk="Wrapping (modular) addition. Computes `self + other`,…",r_yg="Imaginary portion of the complex number",r_yh="Performs addition that returns `None` instead of wrapping…",r_yi="new_raw",r_yj="Returns the minimum of the two numbers.",r_yk="Performs subtraction that wraps around on overflow.",r_zg="Floored integer division.",r_zh="Adds two numbers, checking for overflow. If overflow…",r_zi="Creates a `Ratio` without checking for `denom == 0` or…",r_zj="Returns the maximum of the two numbers.",r_zk="wrapping_sub";var r_Jf="num_iter",r_Kf="into_iter",r_Lf="rangeinclusive",r_Mf="rangestep",r_Nf="rangestepinclusive",r_Of="next_back",r_Pf="size_hint",r_Qf="next",r_Rf="Range",r_Sf="RangeInclusive",r_Tf="RangeStep",r_Uf="RangeStepInclusive";var r_Af="checked_sub",r_Bf="checked_mul",r_Cf="checked_div",r_Df="is_positive",r_Ef="is_negative",r_Ff="mul",r_Gf="div",r_Hf="rem",r_If="i16",r_kf="num_rational",r_lf="ratio",r_mf="parseratioerror",r_nf="i64",r_of="f32",r_pf="f64",r_qf="pow",r_rf="Ratio",r_sf="ParseRatioError",r_tf="floor",r_uf="round",r_vf="trunc",r_wf="fract",r_xf="recip",r_yf="i32",r_zf="checked_add";var r_0e="from_i8",r_1e="from_i16",r_2e="from_i32",r_3e="from_i64",r_4e="from_i128",r_5e="from_usize",r_6e="from_u8",r_7e="from_u16",r_8e="from_u32",r_9e="from_u64",r_Ae="div_assign",r_Be="rem_assign",r_Ce="product",r_De="Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",r_Ee="Complex",r_Fe="ParseComplexError",r_Ge="add",r_He="sub",r_Ie="to_isize",r_Je="to_i8",r_Ke="to_i16",r_Le="to_i32",r_Me="to_i64",r_Ne="to_i128",r_Oe="i128",r_Pe="to_usize",r_Qe="to_u8",r_Re="to_u16",r_Se="to_u32",r_Te="to_u64",r_Ue="u64",r_Ve="to_u128",r_We="u128",r_Xe="to_f32",r_Ye="to_f64",r_Ze="from_isize",r_af="from_u128",r_bf="from_f32",r_cf="from_f64",r_df="is_nan",r_ef="is_infinite",r_ff="is_finite",r_gf="is_normal",r_hf="is_zero",r_if="is_one",r_jf="from_str_radix",r_ve="num_complex",r_we="complex",r_xe="parsecomplexerror",r_ye="sub_assign",r_ze="mul_assign";var r_he="num_integer",r_ie="nth_root",r_je="Returns the truncated principal `n`th root of an integer…",r_ke="Returns the truncated principal square root of an integer…",r_le="Returns the truncated principal cube root of an integer --…",r_me="div_floor",r_ne="mod_floor",r_oe="div_rem",r_pe="div_mod_floor",r_qe="sqrt",r_re="cbrt",r_se="Roots",r_te="Integer",r_ue="IterBinomial";var r_0c="start_address",r_0d="Mapper",r_1c="This is a marker type that specifies that we are in an…",r_1d="HierarchicalLevel",r_2c="table",r_2d="TableMapping",r_3c="inactivepagetable",r_3d="Table",r_4c="mapper",r_4d="InactivePageTable",r_5c="identitymapping",r_5d="ActivePageTable",r_6c="switch_to",r_6d="PhysicalAddress",r_7c="Switch to this set of page tables. This returns a tuple…",r_7d="HypervisorInfo",r_8c="activepagetable",r_8d="Level4",r_9c="x86_64::boot",r_9d="Level3",r_Ad="add_usize",r_Bd="MemoryEntry",r_Cd="MemoryType",r_Dc="x86_64",r_Dd="DescriptorTablePointer",r_Ec="This marks memory that the OS should preserve in the…",r_Ed="SegmentSelector",r_Fc="BootInfo",r_Fd="PrivilegeLevel",r_Gc="privilegelevel",r_Gd="CodeSegment",r_Hc="new",r_Hd="TssSegment",r_Ic="tsssegment",r_Id="InterruptStackFrame",r_Jc="segmentselector",r_Jd="IdtEntry",r_Kc="x86_64::hw",r_Kd="LocalApicRegister",r_Lc="empty",r_Ld="LocalApic",r_Mc="idtentry",r_Md="CpuInfo",r_Nc="write",r_Nd="ModelInfo",r_Oc="Unknown",r_Od="Vendor",r_Pc="microarch",r_Pd="Microarch",r_Qc="read",r_Qd="HypervisorVendor",r_Rc="u16",r_Rd="PortSize",r_Sc="virtualaddress",r_Sd="CpuFlags",r_Tc="x86_64::memory",r_Td="SerialPort",r_Uc="entryflags",r_Ud="Deref",r_Vc="frame",r_Vd="DerefMut",r_Wc="x86_64::memory::paging",r_Wd="EntryFlags",r_Xc="contains",r_Xd="Entry",r_Yc="physicaladdress",r_Yd="Frame",r_Zc="page",r_Zd="FrameAllocator",r_ad="x86_64::hw::gdt",r_ae="Level2",r_bd="x86_64::hw::tss",r_be="Level1",r_cd="x86_64::hw::idt",r_ce="IdentityMapping",r_dd="x86_64::hw::i8259_pic",r_de="RecursiveMapping",r_ed="x86_64::hw::local_apic",r_ee="flush",r_fd="x86_64::hw::cpu",r_fe="cmp",r_gd="x86_64::hw::port",r_ge="zero",r_hd="x86_64::hw::registers",r_id="x86_64::hw::serial",r_jd="x86_64::memory::paging::entry",r_kd="x86_64::memory::paging::frame",r_ld="x86_64::memory::paging::mapper",r_md="x86_64::memory::paging::page",r_nd="x86_64::memory::paging::table",r_od="next_table_address",r_pd="cpuflags",r_qd="vendor",r_rd="add_assign",r_sd="index",r_td="entry",r_ud="index_mut",r_vd="steps_between",r_wd="replace_one",r_xd="replace_zero",r_yd="add_one",r_zd="sub_one";var r_Ac="InterruptModel",r_Bc="AcpiHandler",r_Cc="AcpiStaticInfo",r_bc="acpistaticinfo",r_cc="acpierror",r_dc="global_system_interrupt",r_ec="polarity",r_fc="trigger_mode",r_gc="SameAsBus",r_hc="acpi",r_ic="physicalmapping",r_jc="to_owned",r_kc="clone_into",r_lc="acpi::interrupt",r_mc="processorstate",r_nc="Processor",r_oc="PhysicalMapping",r_pc="AmlError",r_qc="MadtError",r_rc="AcpiError",r_sc="ProcessorState",r_tc="AmlNamespace",r_uc="IoApic",r_vc="InterruptSourceOverride",r_wc="NmiSource",r_xc="LocalInterruptLine",r_yc="Polarity",r_zc="TriggerMode";var r_0b="CheckedShr",r_1b="MulAdd",r_2b="MulAddAssign",r_3b="Saturating",r_4b="WrappingAdd",r_5b="WrappingSub",r_6b="WrappingMul",r_7b="WrappingShl",r_8b="WrappingShr",r_9b="Signed",r_Ab="Output",r_Bb="mul_add",r_Cb="Performs the fused multiply-add operation.",r_Db="The result after applying the operator.",r_Eb="signum",r_Fb="Computes the absolute value.",r_Gb="abs_sub",r_Hb="The positive difference of two numbers.",r_Ib="Returns the sign of the number.",r_Jb="ParseFloatError",r_Kb="FloatErrorKind",r_Lb="Bounded",r_Mb="ToPrimitive",r_Nb="FromPrimitive",r_Ob="NumCast",r_Pb="AsPrimitive",r_Qb="FloatCore",r_Rb="FloatConst",r_Sb="PrimInt",r_Tb="CheckedAdd",r_Ub="CheckedSub",r_Vb="CheckedMul",r_Wb="CheckedDiv",r_Xb="CheckedRem",r_Yb="CheckedNeg",r_Zb="CheckedShl",r_ac="doc",r_rb="num_traits",r_sb="isize",r_tb="min_value",r_ub="max_value",r_vb="u32",r_wb="Shifts the bits to the left by a specified amount amount,…",r_xb="Shifts the bits to the right by a specified amount amount,…",r_yb="Shifts a number to the left, checking for overflow. If…",r_zb="num_traits::ops";var r_0a="recordbuilder",r_1a="arguments",r_2a="target",r_3a="module_path",r_4a="str",r_5a="record",r_6a="builder",r_7a="Returns a new builder.",r_8a="The verbosity level of the message.",r_9a="The name of the target of the directive.",r_Ua="Error",r_Va="Debug",r_Wa="Trace",r_Xa="levelfilter",r_Ya="level",r_Za="metadata",r_ab="metadatabuilder",r_bb="build",r_cb="log",r_db="clone",r_eb="parselevelerror",r_fb="ordering",r_gb="partial_cmp",r_hb="from_str",r_ib="hash",r_jb="Level",r_kb="LevelFilter",r_lb="Record",r_mb="RecordBuilder",r_nb="Metadata",r_ob="MetadataBuilder",r_pb="SetLoggerError",r_qb="ParseLevelError";var r_Aa="try_into",r_Ba="borrow",r_Ca="borrow_mut",r_Da="get_type_id",r_Ea="typeid",r_Fa="from",r_Ga="into",r_Ha="formatter",r_Ia="fmt",r_Ja="deref",r_Ka="deref_mut",r_La="drop",r_Ma="mutex",r_Na="default",r_Oa="rwlock",r_Pa="Mutex",r_Qa="RwLock",r_Ra="MutexGuard",r_Sa="RwLockReadGuard",r_Ta="RwLockWriteGuard",r_sa="mutexguard",r_ta="Creates a new spinlock wrapping the supplied data.",r_ua="into_inner",r_va="option",r_wa="rwlockreadguard",r_xa="rwlockwriteguard",r_ya="result",r_za="try_from";var r_ca="bit_field",r_da="usize",r_ea="self",r_fa="range",r_ga="bit_length",r_ha="get_bit",r_ia="Obtains the bit at the index `bit`; note that index 0 is…",r_ja="bool",r_ka="get_bits",r_la="Obtains the range of bits specified by `range`; note that…",r_ma="set_bit",r_na="Sets the bit at the index `bit` to the value `value`…",r_oa="set_bits",r_pa="Sets the range of bits defined by the range `range` to the…",r_qa="BitField",r_ra="BitArray";var r_ba="bitflags";var r_aa="cfg_if";
searchIndex[r_cl]={r_ac:E,"i":[[5,r_dl,r_cl,r_el,N,N],[5,"kernel_main",E,E,N,N],[5,"panic",E,E,N,N],[0,r_Dc,E,"This module defines the kernel entry-point on x86_64.",N,N],[3,"Arch",r_gl,E,N,N],[12,"physical_memory_manager",E,E,0,N],[12,"kernel_page_table",E,"This is the main set of page tables for the kernel. It is…",0,N],[12,r_fl,E,E,0,N],[5,r_dl,E,r_el,N,N],[0,"acpi_handler",E,E,N,N],[3,r_Gl,r_tl,E,N,N],[12,r_fl,E,E,1,N],[12,"page_table",E,E,1,N],[12,r_Wl,E,E,1,N],[11,r_Hc,E,E,1,[[[r_Ma],[r_Ma],[r_kl]],["pebbleacpihandler"]]],[0,"cpu",r_gl,E,N,N],[3,"Cpu",r_ul,E,N,N],[12,r_0l,E,E,2,N],[12,r_1l,E,E,2,N],[12,r_2l,E,E,2,N],[12,"tss",E,E,2,N],[12,"tss_selector",E,E,2,N],[11,"from_acpi",E,E,2,[[[r_3l],["pin",["box"]],[r_Jc]],["cpu"]]],[0,"interrupts",r_gl,E,N,N],[3,r_Hl,r_vl,E,N,N],[5,"nmi_handler",E,E,N,[[[r_hl]]]],[5,"breakpoint_handler",E,E,N,[[[r_hl]]]],[5,"invalid_opcode_handler",E,E,N,[[[r_hl]]]],[5,"general_protection_fault_handler",E,E,N,[[[r_hl],[r_Ue]]]],[5,"page_fault_handler",E,E,N,[[[r_hl],[r_Ue]]]],[5,"double_fault_handler",E,E,N,[[[r_hl],[r_Ue]]]],[5,"spurious_handler",E,E,N,[[[r_hl]]]],[7,"IDT",E,"This should only be accessed directly by the bootstrap…",N,N],[17,"LEGACY_PIC_VECTOR",E,E,N,N],[17,"APIC_SPURIOUS_VECTOR",E,E,N,N],[11,"init",E,E,3,[[["arch"],["interruptmodel"]],["interruptcontroller"]]],[11,"install_exception_handlers",E,E,3,[[]]],[0,r_Xl,r_gl,E,N,N],[3,r_Tl,r_wl,"This handles calls to the log macros throughout the…",N,N],[7,"COM1",E,"The COM1 serial port, accessed through the UART 16550…",N,N],[0,r_Vl,r_gl,"This module contains the physical memory manager Pebble…",N,N],[3,r_oc,r_il,"Sometimes the system needs to access specific areas of…",N,N],[12,"physical_base",E,"The address of the start of the mapping in the physical…",4,N],[12,"virtual_base",E,"The address of the start of the mapping in the virtual…",4,N],[12,r_ll,E,"Size, in bytes, of the mapping. Must be a multiple of the…",4,N],[3,r_Il,E,E,N,N],[12,"mappings",E,"This maps `PhysicalMapping`s to their starting…",5,N],[12,"virtual_area_bitmap",E,"This tracks which of the pages in the area of virtual…",5,N],[0,r_jl,E,"One of the allocators we use to manage physical memory is…",N,N],[3,r_Jl,r_xl,E,N,N],[12,"bins",E,"The bins of free blocks, where bin `i` contains blocks of…",6,N],[11,r_Hc,E,"Create a new `BuddyAllocator`, with a maximum block size…",6,[[[r_da]],["buddyallocator"]]],[11,"add_range",E,"Add a range of `Frame`s to this allocator, marking them…",6,[[[r_ea],[r_fa,[r_Vc]]]]],[11,r_Bl,E,"Allocate (at least) `n` contiguous frames from this…",6,[[[r_ea],[r_da]],[r_va,[r_Vc]]]],[11,r_Cl,E,"Free the given block (starting at `start` and of size `n`…",6,[[[r_ea],[r_Vc],[r_da]]]],[11,"allocate_block",E,"Tries to allocate a block of the given order. If no blocks…",6,[[[r_ea],[r_da]],[r_va,[r_Vc]]]],[11,"buddy_of",E,"Finds the starting frame of the block that is the buddy of…",6,[[[r_Vc],[r_da]],[r_Vc]]],[11,"max_order",E,"Get the order of the largest block this allocator can track.",6,[[[r_ea]],[r_da]]],[0,"physical",r_il,E,N,N],[3,r_Kl,r_yl,"The main physical memory manager. It tracks all…",N,N],[12,r_jl,E,"A buddy allocator used to track all conventional memory.…",7,N],[3,r_Ll,E,E,N,N],[12,"0",E,E,8,N],[17,"BUDDY_ALLOCATOR_MAX_ORDER",E,E,N,N],[11,r_Hc,E,E,8,[[["bootinfo"]],[r_kl]]],[6,"KernelPageTable",r_il,"Type alias to hide the concrete type of the kernel's page…",N,N],[11,r_Hc,E,E,5,[[],["physicalregionmapper"]]],[11,r_Dl,E,E,5,[[[r_ea],[r_Vc],[r_da],[r_Uc],[r_8c],[r_kl]],[r_ic]]],[11,r_El,E,E,5,[[[r_ea],[r_ic],[r_8c],[r_kl]]]],[7,"GDT",r_gl,"The kernel GDT. This is not thread-safe, and so should…",N,N],[0,"arch",r_cl,E,N,N],[8,"Architecture","kernel::arch","Trait that is implemented by a type in each architecture…",N,N],[0,"heap_allocator",r_cl,E,N,N],[3,r_Ml,r_zl,E,N,N],[12,"heap_bottom",E,E,9,N],[12,"heap_size",E,E,9,N],[12,"holes",E,E,9,N],[3,r_Nl,E,E,N,N],[12,"0",E,E,10,N],[3,r_Ol,E,E,N,N],[12,"addr",E,E,11,N],[12,r_ll,E,E,11,N],[3,"Hole",E,E,N,N],[12,r_ll,E,E,12,N],[12,r_Qf,E,E,12,N],[3,r_Pl,E,E,N,N],[12,"first",E,E,13,N],[3,r_Ql,E,E,N,N],[12,r_Zl,E,E,14,N],[12,"front_padding",E,E,14,N],[12,"back_padding",E,E,14,N],[5,"split_hole",E,"Split the given hole into…",N,[[[r_pl],[r_ml]],[r_va,[r_nl]]]],[5,r_ql,E,E,N,[[["hole"],[r_ml]],[r_ya,[r_nl,r_rl]]]],[5,"free",E,"Walk the list, starting at `hole` and free the allocation…",N,[[["hole"],[r_Sc],[r_da]]]],[5,"align_down",E,"Get the greatest x with the given alignment such that x <=…",N,[[[r_da],[r_da]],[r_da]]],[5,"align_up",E,"Get the smallest x with the given alignment such that x >=…",N,[[[r_da],[r_da]],[r_da]]],[5,"handle_alloc_error",E,E,N,N],[11,r_ol,E,"Create a new, uninitialized `HoleAllocator`. Before heap…",9,[[],["holeallocator"]]],[11,"init",E,"Initialise the `HoleAllocator`. This should only be called…",9,[[[r_ea],[r_Sc],[r_Sc]]]],[11,r_ol,E,E,10,[[],["lockedholeallocator"]]],[11,r_Zl,E,E,12,[[[r_ea]],[r_pl]]],[11,r_Hc,E,"Create a new `HoleList` that contains the given hole.…",13,[[[r_Sc],[r_da]],["holelist"]]],[11,r_ql,E,"Search for a big enough hole for the given `Layout` with…",13,[[[r_ea],[r_ml]],[r_ya,[r_rl]]]],[11,"free",E,"Free an allocation defined by `ptr` and `layout`. Unsafe…",13,N],[11,"get_min_size",E,E,13,[[],[r_da]]],[0,"util",r_cl,E,N,N],[0,"binary_pretty_print",r_sl,E,N,N],[3,r_Rl,r_Al,"Values can be wrapped in this type when they're printed to…",N,N],[12,"0",E,E,15,N],[0,"bitmap",r_sl,"It's useful to be able to model an integral type such as…",N,N],[8,r_Sl,"kernel::util::bitmap",E,N,N],[10,"alloc_n",E,"Find `n` consecutive unset bits, set them and return the…",16,[[[r_ea],[r_da]],[r_va]]],[0,"math",r_sl,E,N,N],[5,"flooring_log2","kernel::util::math","Fast integer `log2` that floors to the lower power-of-2 if…",N,[[[r_Ue]],[r_Ue]]],[5,"ceiling_log2",E,E,N,[[[r_Ue]],[r_Ue]]],[5,"ceiling_integer_divide",E,"Divide `x` by `divide_by`, taking the ceiling if it does…",N,[[[r_Ue],[r_Ue]],[r_Ue]]],[0,"__rg_allocator_abi",r_cl,E,N,N],[5,"__rg_alloc","kernel::__rg_allocator_abi",E,N,N],[5,"__rg_dealloc",E,E,N,N],[5,"__rg_realloc",E,E,N,N],[5,"__rg_alloc_zeroed",E,E,N,N],[7,"ALLOCATOR",r_cl,E,N,N],[14,r_Ul,E,E,N,N],[14,"set_handler_with_error_code",E,E,N,N],[14,"save_regs",E,E,N,N],[14,"restore_regs",E,E,N,N],[14,"wrap_handler",E,E,N,N],[14,"wrap_handler_with_error_code",E,E,N,N],[14,"assert_first_call",E,"This macro should be called at the beginning of functions…",N,N],[11,r_za,r_gl,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,r_tl,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_za,r_ul,E,2,[[[U]],[r_ya]]],[11,r_Fa,E,E,2,[[[T]],[T]]],[11,r_Aa,E,E,2,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,2,[[[r_ea]],[U]]],[11,r_Ba,E,E,2,[[[r_ea]],[T]]],[11,r_Ca,E,E,2,[[[r_ea]],[T]]],[11,r_Da,E,E,2,[[[r_ea]],[r_Ea]]],[11,r_za,r_vl,E,3,[[[U]],[r_ya]]],[11,r_Fa,E,E,3,[[[T]],[T]]],[11,r_Aa,E,E,3,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,3,[[[r_ea]],[U]]],[11,r_Ba,E,E,3,[[[r_ea]],[T]]],[11,r_Ca,E,E,3,[[[r_ea]],[T]]],[11,r_Da,E,E,3,[[[r_ea]],[r_Ea]]],[11,r_za,r_wl,E,17,[[[U]],[r_ya]]],[11,r_Fa,E,E,17,[[[T]],[T]]],[11,r_Aa,E,E,17,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,17,[[[r_ea]],[U]]],[11,r_Ba,E,E,17,[[[r_ea]],[T]]],[11,r_Ca,E,E,17,[[[r_ea]],[T]]],[11,r_Da,E,E,17,[[[r_ea]],[r_Ea]]],[11,r_za,r_il,E,4,[[[U]],[r_ya]]],[11,r_Fa,E,E,4,[[[T]],[T]]],[11,r_Aa,E,E,4,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,4,[[[r_ea]],[U]]],[11,r_Ba,E,E,4,[[[r_ea]],[T]]],[11,r_Ca,E,E,4,[[[r_ea]],[T]]],[11,r_Da,E,E,4,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,4,[[[r_ea]],[T]]],[11,r_kc,E,E,4,N],[11,r_za,E,E,5,[[[U]],[r_ya]]],[11,r_Fa,E,E,5,[[[T]],[T]]],[11,r_Aa,E,E,5,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,5,[[[r_ea]],[U]]],[11,r_Ba,E,E,5,[[[r_ea]],[T]]],[11,r_Ca,E,E,5,[[[r_ea]],[T]]],[11,r_Da,E,E,5,[[[r_ea]],[r_Ea]]],[11,r_za,r_xl,E,6,[[[U]],[r_ya]]],[11,r_Fa,E,E,6,[[[T]],[T]]],[11,r_Aa,E,E,6,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,6,[[[r_ea]],[U]]],[11,r_Ba,E,E,6,[[[r_ea]],[T]]],[11,r_Ca,E,E,6,[[[r_ea]],[T]]],[11,r_Da,E,E,6,[[[r_ea]],[r_Ea]]],[11,r_za,r_yl,E,7,[[[U]],[r_ya]]],[11,r_Fa,E,E,7,[[[T]],[T]]],[11,r_Aa,E,E,7,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,7,[[[r_ea]],[U]]],[11,r_Ba,E,E,7,[[[r_ea]],[T]]],[11,r_Ca,E,E,7,[[[r_ea]],[T]]],[11,r_Da,E,E,7,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,8,[[[U]],[r_ya]]],[11,r_Fa,E,E,8,[[[T]],[T]]],[11,r_Aa,E,E,8,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,8,[[[r_ea]],[U]]],[11,r_Ba,E,E,8,[[[r_ea]],[T]]],[11,r_Ca,E,E,8,[[[r_ea]],[T]]],[11,r_Da,E,E,8,[[[r_ea]],[r_Ea]]],[11,r_za,r_zl,E,9,[[[U]],[r_ya]]],[11,r_Fa,E,E,9,[[[T]],[T]]],[11,r_Aa,E,E,9,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,9,[[[r_ea]],[U]]],[11,r_Ba,E,E,9,[[[r_ea]],[T]]],[11,r_Ca,E,E,9,[[[r_ea]],[T]]],[11,r_Da,E,E,9,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,10,[[[U]],[r_ya]]],[11,r_Fa,E,E,10,[[[T]],[T]]],[11,r_Aa,E,E,10,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,10,[[[r_ea]],[U]]],[11,r_Ba,E,E,10,[[[r_ea]],[T]]],[11,r_Ca,E,E,10,[[[r_ea]],[T]]],[11,r_Da,E,E,10,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,11,[[[U]],[r_ya]]],[11,r_Fa,E,E,11,[[[T]],[T]]],[11,r_Aa,E,E,11,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,11,[[[r_ea]],[U]]],[11,r_Ba,E,E,11,[[[r_ea]],[T]]],[11,r_Ca,E,E,11,[[[r_ea]],[T]]],[11,r_Da,E,E,11,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,11,[[[r_ea]],[T]]],[11,r_kc,E,E,11,N],[11,r_za,E,E,12,[[[U]],[r_ya]]],[11,r_Fa,E,E,12,[[[T]],[T]]],[11,r_Aa,E,E,12,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,12,[[[r_ea]],[U]]],[11,r_Ba,E,E,12,[[[r_ea]],[T]]],[11,r_Ca,E,E,12,[[[r_ea]],[T]]],[11,r_Da,E,E,12,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,13,[[[U]],[r_ya]]],[11,r_Fa,E,E,13,[[[T]],[T]]],[11,r_Aa,E,E,13,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,13,[[[r_ea]],[U]]],[11,r_Ba,E,E,13,[[[r_ea]],[T]]],[11,r_Ca,E,E,13,[[[r_ea]],[T]]],[11,r_Da,E,E,13,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,14,[[[U]],[r_ya]]],[11,r_Fa,E,E,14,[[[T]],[T]]],[11,r_Aa,E,E,14,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,14,[[[r_ea]],[U]]],[11,r_Ba,E,E,14,[[[r_ea]],[T]]],[11,r_Ca,E,E,14,[[[r_ea]],[T]]],[11,r_Da,E,E,14,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,14,[[[r_ea]],[T]]],[11,r_kc,E,E,14,N],[11,r_za,r_Al,E,15,[[[U]],[r_ya]]],[11,r_Fa,E,E,15,[[[T]],[T]]],[11,r_Aa,E,E,15,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,15,[[[r_ea]],[U]]],[11,r_Ba,E,E,15,[[[r_ea]],[T]]],[11,r_Ca,E,E,15,[[[r_ea]],[T]]],[11,r_Da,E,E,15,[[[r_ea]],[r_Ea]]],[11,"to_string",E,E,15,[[[r_ea]],["string"]]],[11,r_db,r_il,E,4,[[[r_ea]],[r_ic]]],[11,r_db,r_zl,E,11,[[[r_ea]],[r_pl]]],[11,r_db,E,E,14,[[[r_ea]],[r_nl]]],[11,r_Ia,r_Al,E,15,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_il,E,4,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_zl,E,11,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,14,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_Al,E,15,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ja,r_zl,E,10,[[[r_ea]],[r_Ma]]],[11,r_La,r_gl,E,0,[[[r_ea]]]],[11,"alloc",r_zl,E,10,N],[11,"dealloc",E,E,10,N],[11,r_Bl,r_yl,E,8,[[[r_ea],[r_da]],[r_fa,[r_Vc]]]],[11,r_Cl,E,E,8,[[[r_ea],[r_Vc],[r_da]]]],[11,r_Yl,r_wl,E,17,[[[r_ea],[r_Za]],[r_ja]]],[11,r_cb,E,E,17,[[[r_ea],[r_5a]]]],[11,r_ee,E,E,17,[[[r_ea]]]],[11,r_Dl,r_tl,E,1,[[[r_ea],[r_da],[r_da]],[r_Fl]]],[11,r_El,E,E,1,[[[r_ea],[r_Fl]]]]],"p":[[3,"Arch"],[3,r_Gl],[3,"Cpu"],[3,r_Hl],[3,r_oc],[3,r_Il],[3,r_Jl],[3,r_Kl],[3,r_Ll],[3,r_Ml],[3,r_Nl],[3,r_Ol],[3,"Hole"],[3,r_Pl],[3,r_Ql],[3,r_Rl],[8,r_Sl],[3,r_Tl]]};
searchIndex["spin"]={r_ac:"Synchronization primitives based on spinning","i":[[3,r_Pa,"spin","This type provides MUTual EXclusion based on spinning.",N,N],[3,r_Ra,E,"A guard to which the protected data can be accessed",N,N],[3,r_Qa,E,"A reader-writer lock",N,N],[3,r_Sa,E,"A guard to which the protected data can be read",N,N],[3,r_Ta,E,"A guard to which the protected data can be written",N,N],[3,"Once",E,"A synchronization primitive which can be used to run a…",N,N],[11,r_Hc,E,r_ta,0,[[[T]],[r_Ma]]],[11,r_ua,E,"Consumes this mutex, returning the underlying data.",0,[[[r_ea]],[T]]],[11,"lock",E,"Locks the spinlock and returns a guard.",0,[[[r_ea]],[r_sa]]],[11,"force_unlock",E,"Force unlock the spinlock.",0,[[[r_ea]]]],[11,"try_lock",E,"Tries to lock the mutex. If it is already locked, it will…",0,[[[r_ea]],[r_va,[r_sa]]]],[11,r_Hc,E,r_ta,1,[[[T]],[r_Oa]]],[11,r_ua,E,"Consumes this `RwLock`, returning the underlying data.",1,[[[r_ea]],[T]]],[11,r_Qc,E,"Locks this rwlock with shared read access, blocking the…",1,[[[r_ea]],[r_wa]]],[11,"try_read",E,"Attempt to acquire this lock with shared read access.",1,[[[r_ea]],[r_va,[r_wa]]]],[11,"force_read_decrement",E,"Force decrement the reader count.",1,[[[r_ea]]]],[11,"force_write_unlock",E,"Force unlock exclusive write access.",1,[[[r_ea]]]],[11,r_Nc,E,"Lock this rwlock with exclusive write access, blocking the…",1,[[[r_ea]],[r_xa]]],[11,"try_write",E,"Attempt to lock this rwlock with exclusive write access.",1,[[[r_ea]],[r_va,[r_xa]]]],[18,"INIT",E,"Initialization constant of `Once`.",2,N],[11,r_Hc,E,"Creates a new `Once` value.",2,[[],["once"]]],[11,"call_once",E,"Performs an initialization routine once and only once. The…",2,[[[r_ea],["f"]],[T]]],[11,"try",E,"Returns a pointer iff the `Once` was previously initialized",2,[[[r_ea]],[r_va]]],[11,"wait",E,"Like try, but will spin if the `Once` is in the process of…",2,[[[r_ea]],[r_va]]],[11,r_za,E,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,3,[[[U]],[r_ya]]],[11,r_Fa,E,E,3,[[[T]],[T]]],[11,r_Aa,E,E,3,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,3,[[[r_ea]],[U]]],[11,r_Ba,E,E,3,[[[r_ea]],[T]]],[11,r_Ca,E,E,3,[[[r_ea]],[T]]],[11,r_Da,E,E,3,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,4,[[[U]],[r_ya]]],[11,r_Fa,E,E,4,[[[T]],[T]]],[11,r_Aa,E,E,4,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,4,[[[r_ea]],[U]]],[11,r_Ba,E,E,4,[[[r_ea]],[T]]],[11,r_Ca,E,E,4,[[[r_ea]],[T]]],[11,r_Da,E,E,4,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,5,[[[U]],[r_ya]]],[11,r_Fa,E,E,5,[[[T]],[T]]],[11,r_Aa,E,E,5,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,5,[[[r_ea]],[U]]],[11,r_Ba,E,E,5,[[[r_ea]],[T]]],[11,r_Ca,E,E,5,[[[r_ea]],[T]]],[11,r_Da,E,E,5,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,2,[[[U]],[r_ya]]],[11,r_Fa,E,E,2,[[[T]],[T]]],[11,r_Aa,E,E,2,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,2,[[[r_ea]],[U]]],[11,r_Ba,E,E,2,[[[r_ea]],[T]]],[11,r_Ca,E,E,2,[[[r_ea]],[T]]],[11,r_Da,E,E,2,[[[r_ea]],[r_Ea]]],[11,r_Ia,E,E,3,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,4,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,5,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,2,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ja,E,E,3,[[[r_ea]],[T]]],[11,r_Ja,E,E,4,[[[r_ea]],[T]]],[11,r_Ja,E,E,5,[[[r_ea]],[T]]],[11,r_Ka,E,E,3,[[[r_ea]],[T]]],[11,r_Ka,E,E,5,[[[r_ea]],[T]]],[11,r_La,E,"The dropping of the MutexGuard will release the lock it…",3,[[[r_ea]]]],[11,r_La,E,E,4,[[[r_ea]]]],[11,r_La,E,E,5,[[[r_ea]]]],[11,r_Na,E,E,0,[[],[r_Ma]]],[11,r_Na,E,E,1,[[],[r_Oa]]]],"p":[[3,r_Pa],[3,r_Qa],[3,"Once"],[3,r_Ra],[3,r_Sa],[3,r_Ta]]};
searchIndex[r_Dc]={r_ac:E,"i":[[0,"boot",r_Dc,"TODO",N,N],[3,r_Bd,r_9c,"TODO",N,N],[12,"area",E,E,0,N],[12,"memory_type",E,E,0,N],[3,r_Fc,E,"This structure is placed in memory by the bootloader and a…",N,N],[12,"magic",E,"This should be set to `BOOT_INFO_MAGIC` by the bootloader.",1,N],[12,"memory_map",E,E,1,N],[12,"num_memory_map_entries",E,E,1,N],[12,"rsdp_address",E,E,1,N],[4,r_Cd,E,E,N,N],[13,"UefiServices",E,"Memory used by the UEFI services. Cannot be used by the OS.",2,N],[13,"Conventional",E,"Conventional memory that can freely be used by the OS,",2,N],[13,"AcpiReclaimable",E,"Memory that contains ACPI tables. After the OS has parsed…",2,N],[13,"SleepPreserve",E,r_Ec,2,N],[13,"NonVolatileSleepPreserve",E,r_Ec,2,N],[13,"KernelImage",E,"Memory the bootloader has mapped the kernel image into.…",2,N],[13,"KernelPageTables",E,"Memory the bootloader has used for the page tables…",2,N],[13,"KernelHeap",E,"Memory the bootloader has mapped for use as the kernel…",2,N],[13,r_Fc,E,"Memory used for storing the `BootInfo` by the bootloader.…",2,N],[17,"BOOT_INFO_MAGIC",E,E,N,N],[17,"MEMORY_MAP_NUM_ENTRIES",E,E,N,N],[11,"memory_entries",E,E,1,N],[0,"hw",r_Dc,E,N,N],[3,r_Dd,r_Kc,E,N,N],[12,"limit",E,"`base + limit` is the last addressable byte of the…",3,N],[12,"base",E,"Virtual address of the start of the descriptor table.",3,N],[0,"gdt",E,E,N,N],[3,r_Ed,r_ad,"An index into the GDT, specifying a particular segment.…",N,N],[12,"0",E,E,4,N],[3,r_Gd,E,E,N,N],[3,r_Hd,E,E,N,N],[3,"Gdt",E,"A GDT suitable for the kernel to use. It contains two code…",N,N],[4,r_Fd,E,E,N,N],[13,"Ring0",E,E,5,N],[13,"Ring1",E,E,5,N],[13,"Ring2",E,E,5,N],[13,"Ring3",E,E,5,N],[17,"KERNEL_CODE_SELECTOR",E,E,N,N],[17,"USER_CODE_SELECTOR",E,E,N,N],[17,"BOOTSTRAP_TSS_SELECTOR",E,E,N,N],[17,"MAX_CPUS",E,E,N,N],[11,r_Hc,E,E,4,[[[r_Rc],[r_Gc]],[r_Jc]]],[11,"table_offset",E,E,4,[[[r_ea]],[r_Rc]]],[11,r_Hc,E,E,6,[[[r_Gc]],["codesegment"]]],[11,r_Lc,E,E,7,[[],[r_Ic]]],[11,r_Hc,E,E,7,[[["pin"]],[r_Ic]]],[11,r_Hc,E,"Create a `Gdt` with pre-populated code segments, and…",8,[[],["gdt"]]],[11,"add_tss",E,"Add a new TSS, if there's space for it. The first TSS…",8,[[[r_ea],[r_Ic]],[r_Jc]]],[11,"load",E,"Load the new GDT, switch to the new `kernel_code` code…",8,[[[r_ea]]]],[0,"tss",r_Kc,E,N,N],[3,"Tss",r_bd,"Hardware task switching isn't supported on x86_64, so the…",N,N],[12,"privilege_stack_table",E,E,9,N],[12,"interrupt_stack_table",E,E,9,N],[12,"iomap_base",E,E,9,N],[11,r_Hc,E,E,9,[[],["pin",["box"]]]],[11,"set_kernel_stack",E,E,9,[[[r_ea],[r_Sc]]]],[0,"idt",r_Kc,E,N,N],[3,r_Jd,r_cd,E,N,N],[3,"Idt",E,E,N,N],[3,r_Id,E,E,N,N],[12,"instruction_pointer",E,E,10,N],[12,"code_segment",E,E,10,N],[12,"cpu_flags",E,E,10,N],[12,"stack_pointer",E,E,10,N],[12,"stack_segment",E,E,10,N],[6,"HandlerFunc",E,"The type of a function that can be used as an interrupt…",N,N],[11,"missing",E,E,11,[[],[r_Mc]]],[11,r_Ul,E,E,11,[[[r_ea],["handlerfunc"],[r_Jc]],[r_ea]]],[11,"set_ist_handler",E,E,11,[[[r_ea],["u8"]],[r_ea]]],[11,"set_privilege_level",E,E,11,[[[r_ea],[r_Gc]],[r_ea]]],[11,r_Lc,E,E,12,[[],["idt"]]],[11,"divide_error",E,E,12,[[[r_ea]],[r_Mc]]],[11,"debug_exception",E,E,12,[[[r_ea]],[r_Mc]]],[11,"nmi",E,E,12,[[[r_ea]],[r_Mc]]],[11,"breakpoint",E,E,12,[[[r_ea]],[r_Mc]]],[11,"overflow",E,E,12,[[[r_ea]],[r_Mc]]],[11,"bound_range_exceeded",E,E,12,[[[r_ea]],[r_Mc]]],[11,"invalid_opcode",E,E,12,[[[r_ea]],[r_Mc]]],[11,"device_not_available",E,E,12,[[[r_ea]],[r_Mc]]],[11,"double_fault",E,E,12,[[[r_ea]],[r_Mc]]],[11,"invalid_tss",E,E,12,[[[r_ea]],[r_Mc]]],[11,"segment_not_present",E,E,12,[[[r_ea]],[r_Mc]]],[11,"stack_segment_fault",E,E,12,[[[r_ea]],[r_Mc]]],[11,"general_protection_fault",E,E,12,[[[r_ea]],[r_Mc]]],[11,"page_fault",E,E,12,[[[r_ea]],[r_Mc]]],[11,"x87_fault",E,E,12,[[[r_ea]],[r_Mc]]],[11,"alignment_check",E,E,12,[[[r_ea]],[r_Mc]]],[11,"machine_check",E,E,12,[[[r_ea]],[r_Mc]]],[11,"simd_exception",E,E,12,[[[r_ea]],[r_Mc]]],[11,"virtualization_exception",E,E,12,[[[r_ea]],[r_Mc]]],[11,"load",E,E,12,[[[r_ea]]]],[0,"i8259_pic",r_Kc,E,N,N],[3,"Pic",r_dd,E,N,N],[11,r_Hc,E,E,13,[[],["pic"]]],[11,"remap_and_disable",E,"Remap and disable the PIC. It is necessary to remap the…",13,[[[r_ea],["u8"],["u8"]]]],[0,"local_apic",r_Kc,E,N,N],[3,r_Kd,r_ed,"Represents a register in the local APIC's configuration…",N,N],[3,r_Ld,E,"Methods on this type operate on the local APIC of the…",N,N],[11,r_Qc,E,"Read from this register. Unsafe because not all registers…",14,[[[r_ea]],[r_vb]]],[11,r_Nc,E,"Write to this register. Unsafe because not all registers…",14,[[[r_ea],[r_vb]]]],[11,"enable",E,E,15,[[["u8"]]]],[11,"register",E,E,15,[[[r_da]],["localapicregister"]]],[11,"send_eoi",E,"Send an End Of Interrupt to the local APIC. This should be…",15,[[]]],[0,"cpu",r_Kc,E,N,N],[3,r_Md,r_fd,"Describes information we know about the system we're…",N,N],[12,"max_supported_standard_level",E,E,16,N],[12,r_qd,E,E,16,N],[12,"model_info",E,E,16,N],[12,"hypervisor_info",E,"Information about the hypervisor we're running under, if…",16,N],[3,r_Nd,E,E,N,N],[12,"family",E,E,17,N],[12,"model",E,E,17,N],[12,"stepping",E,E,17,N],[12,"extended_family",E,E,17,N],[12,"extended_model",E,E,17,N],[3,r_7d,E,E,N,N],[4,r_Od,E,E,N,N],[13,r_Oc,E,E,18,N],[13,"Intel",E,E,18,N],[13,"Amd",E,E,18,N],[4,r_Pd,E,"Intel and AMD microarchitectures we can expect processors…",N,N],[13,"Nehalem",E,E,19,N],[13,"Westmere",E,E,19,N],[13,"SandyBridge",E,E,19,N],[13,"IvyBridge",E,E,19,N],[13,"Haswell",E,E,19,N],[13,"Broadwell",E,E,19,N],[13,"Skylake",E,E,19,N],[13,"KabyLake",E,E,19,N],[13,"CoffeeLake",E,E,19,N],[13,"CannonLake",E,E,19,N],[13,"WhiskeyLake",E,E,19,N],[13,"AmberLake",E,E,19,N],[13,"Bulldozer",E,E,19,N],[13,"Jaguar",E,E,19,N],[13,"Zen",E,E,19,N],[4,r_Qd,E,E,N,N],[13,r_Oc,E,E,20,N],[13,"Kvm",E,E,20,N],[11,r_Hc,E,E,16,[[],["cpuinfo"]]],[11,r_Pc,E,E,16,[[[r_ea]],[r_va,[r_Pc]]]],[11,"apic_frequency",E,"Get the frequency the APIC runs at (in Hz), if we can…",16,[[[r_ea]],[r_va,[r_vb]]]],[0,"port",r_Kc,E,N,N],[3,"Port",r_gd,"Represents an IO port that can be read and written to…",N,N],[8,r_Rd,E,"Implemented by the types used to represent 8-bit, 16-bit,…",N,N],[10,"port_read",E,E,21,[[[r_Rc]],[r_ea]]],[10,"port_write",E,E,21,[[[r_Rc],[r_ea]]]],[11,r_Hc,E,"Create a new `Port` at the specified I/O address. Unsafe…",22,[[[r_Rc]],["port"]]],[11,r_Qc,E,E,22,[[[r_ea]],[T]]],[11,r_Nc,E,E,22,[[[r_ea],[T]]]],[0,"registers",r_Kc,E,N,N],[3,r_Sd,r_hd,"A wrapper for the `RFLAGS` register, providing a nice…",N,N],[12,"0",E,E,23,N],[17,"EFER",E,E,N,N],[11,r_Qc,E,"Read the contents of `RFLAGS`, creating a `CpuFlags`.",23,[[],[r_pd]]],[11,"interrupts_enabled",E,E,23,[[[r_ea]],[r_ja]]],[0,"serial",r_Kc,E,N,N],[3,r_Td,r_id,E,N,N],[17,"COM1",E,E,N,N],[11,r_Hc,E,E,24,[[[r_Rc]],["serialport"]]],[11,"initialise",E,E,24,[[[r_ea]]]],[11,r_Qc,E,E,24,[[[r_ea]],["u8"]]],[11,r_Nc,E,E,24,[[[r_ea],["u8"]]]],[0,"tlb",r_Kc,E,N,N],[5,"invalidate_page","x86_64::hw::tlb",E,N,[[[r_Sc]]]],[5,r_ee,E,E,N,[[]]],[0,r_Vl,r_Dc,E,N,N],[3,r_6d,r_Tc,"Represents an address in the physical memory space. A…",N,N],[0,"kernel_map",E,"These constants define the layout of the memory map when…",N,N],[17,"RECURSIVE_ENTRY","x86_64::memory::kernel_map","We use the 510th entry of the PML4 (P4) to access the page…",N,N],[17,"P4_TABLE_ADDRESS",E,"This address can be used to access the currently mapped P4…",N,N],[17,"KERNEL_BASE",E,"This is the base of the kernel address space. It starts at…",N,N],[17,"HEAP_START",E,"This is the address of the start of the kernel heap. The…",N,N],[17,"HEAP_END",E,E,N,N],[17,"PHYSICAL_MAPPING_START",E,"This is the address of the start of the area in the kernel…",N,N],[17,"PHYSICAL_MAPPING_END",E,E,N,N],[17,"BOOT_INFO",E,E,N,N],[17,"LOCAL_APIC_CONFIG",E,"The virtual address that the configuration page of the…",N,N],[0,"paging",r_Tc,E,N,N],[8,r_Ud,r_Wc,"Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target",E,"The resulting type after dereferencing.",25,N],[10,r_Ja,E,"Dereferences the value.",25,N],[8,r_Vd,E,"Used for mutable dereferencing operations, like in `*v =…",N,N],[10,r_Ka,E,"Mutably dereferences the value.",26,N],[3,r_4d,E,"Represents a set of page tables that are not currently…",N,N],[3,r_5d,E,"Represents the set of page tables that are currently being…",N,N],[0,r_td,E,E,N,N],[3,r_Xd,r_jd,E,N,N],[3,r_Wd,E,E,N,N],[18,"PRESENT",E,E,27,N],[18,"WRITABLE",E,E,27,N],[18,"USER_ACCESSIBLE",E,E,27,N],[18,"WRITE_THROUGH",E,E,27,N],[18,"NO_CACHE",E,E,27,N],[18,"ACCESSED",E,E,27,N],[18,"DIRTY",E,E,27,N],[18,"HUGE_PAGE",E,E,27,N],[18,"GLOBAL",E,E,27,N],[18,"NO_EXECUTE",E,E,27,N],[11,r_Lc,E,"Returns an empty set of flags.",27,[[],[r_Uc]]],[11,"all",E,"Returns the set containing all flags.",27,[[],[r_Uc]]],[11,"bits",E,"Returns the raw value of the flags currently stored.",27,[[[r_ea]],[r_Ue]]],[11,"from_bits",E,"Convert from underlying bit representation, unless that…",27,[[[r_Ue]],[r_va,[r_Uc]]]],[11,"from_bits_truncate",E,"Convert from underlying bit representation, dropping any…",27,[[[r_Ue]],[r_Uc]]],[11,"is_empty",E,"Returns `true` if no flags are currently stored.",27,[[[r_ea]],[r_ja]]],[11,"is_all",E,"Returns `true` if all flags are currently set.",27,[[[r_ea]],[r_ja]]],[11,"intersects",E,"Returns `true` if there are flags common to both `self`…",27,[[[r_ea],[r_Uc]],[r_ja]]],[11,r_Xc,E,"Returns `true` all of the flags in `other` are contained…",27,[[[r_ea],[r_Uc]],[r_ja]]],[11,"insert",E,"Inserts the specified flags in-place.",27,[[[r_ea],[r_Uc]]]],[11,"remove",E,"Removes the specified flags in-place.",27,[[[r_ea],[r_Uc]]]],[11,"toggle",E,"Toggles the specified flags in-place.",27,[[[r_ea],[r_Uc]]]],[11,"set",E,"Inserts or removes the specified flags depending on the…",27,[[[r_ea],[r_Uc],[r_ja]]]],[11,"is_compatible",E,E,27,[[[r_ea],[r_Uc]],[r_ja]]],[11,"is_unused",E,E,28,[[[r_ea]],[r_ja]]],[11,"set_unused",E,E,28,[[[r_ea]]]],[11,"flags",E,E,28,[[[r_ea]],[r_Uc]]],[11,"pointed_frame",E,E,28,[[[r_ea]],[r_va,[r_Vc]]]],[11,"set",E,E,28,[[[r_ea],[r_Vc],[r_Uc]]]],[0,r_Vc,r_Wc,E,N,N],[3,r_Yd,r_kd,E,N,N],[11,r_Xc,E,E,29,[[[r_Yc]],[r_Vc]]],[11,r_0c,E,E,29,[[[r_ea]],[r_Yc]]],[0,r_Wl,r_Wc,E,N,N],[8,r_Zd,"x86_64::memory::paging::frame_allocator","`FrameAllocator` represents the `x86_64` crate's interface…",N,N],[11,"allocate",E,"Allocate a `Frame`.",30,[[[r_ea]],[r_Vc]]],[10,r_Bl,E,"Allocate `n` contiguous `Frame`s.",30,[[[r_ea],[r_da]],[r_fa,[r_Vc]]]],[10,r_Cl,E,"Free `n` frames that were previously allocated by this…",30,[[[r_ea],[r_Vc],[r_da]]]],[0,r_4c,r_Wc,E,N,N],[3,r_0d,r_ld,"A `Mapper` allows you to change the virtual to physical…",N,N],[11,"translate",E,"Get the `PhysicalAddress` a given `VirtualAddress` is…",31,[[[r_ea],[r_Sc]],[r_va,[r_Yc]]]],[11,"translate_page",E,"Get the physical `Frame` that a given virtual `Page` is…",31,[[[r_ea],[r_Zc]],[r_va,[r_Vc]]]],[11,"map",E,"Map the given `Page` somewhere in physical memory.…",31,[[[r_ea],[r_Zc],[r_Uc],["a"]]]],[11,"map_to",E,E,31,[[[r_ea],[r_Zc],[r_Vc],[r_Uc],["a"]]]],[11,"unmap",E,E,31,[[[r_ea],[r_Zc],["a"]]]],[0,r_Zc,r_Wc,E,N,N],[3,"Page",r_md,E,N,N],[11,r_Xc,E,"Get the page that contains the given virtual address.",32,[[[r_Sc]],[r_Zc]]],[11,r_0c,E,E,32,[[[r_ea]],[r_Sc]]],[11,"p4_index",E,E,32,[[[r_ea]],[r_Rc]]],[11,"p3_index",E,E,32,[[[r_ea]],[r_Rc]]],[11,"p2_index",E,E,32,[[[r_ea]],[r_Rc]]],[11,"p1_index",E,E,32,[[[r_ea]],[r_Rc]]],[0,r_2c,r_Wc,"This module contains types for representing raw page…",N,N],[3,r_3d,r_nd,"Represents a page table, with 512 entries which are either…",N,N],[4,r_8d,E,E,N,N],[4,r_9d,E,E,N,N],[4,r_ae,E,E,N,N],[4,r_be,E,E,N,N],[4,r_ce,E,r_1c,N,N],[4,r_de,E,r_1c,N,N],[8,"TableLevel",E,E,N,N],[8,r_1d,E,"Tables of levels that implement `HierarchicalLevel` are…",N,N],[16,"NextLevel",E,E,33,N],[8,r_2d,E,"This trait specifies how we should access and modify a set…",N,N],[10,r_od,E,E,34,[[[r_2c],[r_Rc]],[r_va,[r_Sc]]]],[11,r_ge,E,E,35,[[[r_ea]]]],[11,"next_table",E,E,35,[[[r_ea],[r_Rc]],[r_va,[r_2c]]]],[11,"next_table_mut",E,E,35,[[[r_ea],[r_Rc]],[r_va,[r_2c]]]],[11,"next_table_create",E,E,35,[[[r_ea],[r_Rc],[r_ja],["a"]],[r_2c]]],[17,"FRAME_SIZE",r_Wc,E,N,N],[17,"PAGE_SIZE",E,E,N,N],[11,r_Hc,E,"Create a new set of page-tables. `frame` must be an…",36,[[[r_Vc]],[r_3c]]],[11,"new_with_recursive_mapping",E,"Create a new set of page-tables that should be accessed…",36,[[[r_Vc],[r_Rc]],[r_3c,[r_5c]]]],[11,r_4c,E,E,36,[[[r_ea]],[r_4c,[r_5c]]]],[11,r_6c,E,r_7c,36,N],[11,r_6c,E,r_7c,36,N],[11,r_Hc,E,"Create an `ActivePageTable` to represent an active set of…",37,[[[r_Yc]],[r_8c,[r_5c]]]],[11,r_Hc,E,"Create an `ActivePageTable` to represent the…",37,[[],[r_8c,["recursivemapping"]]]],[11,"with",E,"Alter the mappings of a `InactivePageTable` by temporarily…",37,[[[r_ea],[r_3c],["a"],["f"]]]],[11,r_Hc,r_Tc,E,38,[[[r_da]],[r_va,[r_Yc]]]],[11,"new_unchecked",E,E,38,[[[r_da]],[r_Yc]]],[11,"offset_into_frame",E,E,38,[[[r_ea]],[r_da]]],[11,"is_frame_aligned",E,E,38,[[[r_ea]],[r_ja]]],[14,"getter",r_Dc,E,N,N],[14,"read_control_reg",E,"Read a control register. The name of the control register…",N,N],[14,"write_control_reg",E,"Write to a control register. Calls to this macro will need…",N,N],[14,"read_msr",E,"Read from a model-specific register.",N,N],[14,"write_msr",E,"Write to a model-specific register. This is unsafe,…",N,N],[11,r_za,r_9c,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,2,[[[U]],[r_ya]]],[11,r_Fa,E,E,2,[[[T]],[T]]],[11,r_Aa,E,E,2,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,2,[[[r_ea]],[U]]],[11,r_Ba,E,E,2,[[[r_ea]],[T]]],[11,r_Ca,E,E,2,[[[r_ea]],[T]]],[11,r_Da,E,E,2,[[[r_ea]],[r_Ea]]],[11,r_za,r_Kc,E,3,[[[U]],[r_ya]]],[11,r_Fa,E,E,3,[[[T]],[T]]],[11,r_Aa,E,E,3,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,3,[[[r_ea]],[U]]],[11,r_Ba,E,E,3,[[[r_ea]],[T]]],[11,r_Ca,E,E,3,[[[r_ea]],[T]]],[11,r_Da,E,E,3,[[[r_ea]],[r_Ea]]],[11,r_za,r_ad,E,4,[[[U]],[r_ya]]],[11,r_Fa,E,E,4,[[[T]],[T]]],[11,r_Aa,E,E,4,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,4,[[[r_ea]],[U]]],[11,r_Ba,E,E,4,[[[r_ea]],[T]]],[11,r_Ca,E,E,4,[[[r_ea]],[T]]],[11,r_Da,E,E,4,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,4,[[[r_ea]],[T]]],[11,r_kc,E,E,4,N],[11,r_za,E,E,6,[[[U]],[r_ya]]],[11,r_Fa,E,E,6,[[[T]],[T]]],[11,r_Aa,E,E,6,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,6,[[[r_ea]],[U]]],[11,r_Ba,E,E,6,[[[r_ea]],[T]]],[11,r_Ca,E,E,6,[[[r_ea]],[T]]],[11,r_Da,E,E,6,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,7,[[[U]],[r_ya]]],[11,r_Fa,E,E,7,[[[T]],[T]]],[11,r_Aa,E,E,7,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,7,[[[r_ea]],[U]]],[11,r_Ba,E,E,7,[[[r_ea]],[T]]],[11,r_Ca,E,E,7,[[[r_ea]],[T]]],[11,r_Da,E,E,7,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,7,[[[r_ea]],[T]]],[11,r_kc,E,E,7,N],[11,r_za,E,E,8,[[[U]],[r_ya]]],[11,r_Fa,E,E,8,[[[T]],[T]]],[11,r_Aa,E,E,8,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,8,[[[r_ea]],[U]]],[11,r_Ba,E,E,8,[[[r_ea]],[T]]],[11,r_Ca,E,E,8,[[[r_ea]],[T]]],[11,r_Da,E,E,8,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,5,[[[U]],[r_ya]]],[11,r_Fa,E,E,5,[[[T]],[T]]],[11,r_Aa,E,E,5,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,5,[[[r_ea]],[U]]],[11,r_Ba,E,E,5,[[[r_ea]],[T]]],[11,r_Ca,E,E,5,[[[r_ea]],[T]]],[11,r_Da,E,E,5,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,5,[[[r_ea]],[T]]],[11,r_kc,E,E,5,N],[11,r_za,r_bd,E,9,[[[U]],[r_ya]]],[11,r_Fa,E,E,9,[[[T]],[T]]],[11,r_Aa,E,E,9,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,9,[[[r_ea]],[U]]],[11,r_Ba,E,E,9,[[[r_ea]],[T]]],[11,r_Ca,E,E,9,[[[r_ea]],[T]]],[11,r_Da,E,E,9,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,9,[[[r_ea]],[T]]],[11,r_kc,E,E,9,N],[11,r_za,r_cd,E,11,[[[U]],[r_ya]]],[11,r_Fa,E,E,11,[[[T]],[T]]],[11,r_Aa,E,E,11,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,11,[[[r_ea]],[U]]],[11,r_Ba,E,E,11,[[[r_ea]],[T]]],[11,r_Ca,E,E,11,[[[r_ea]],[T]]],[11,r_Da,E,E,11,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,11,[[[r_ea]],[T]]],[11,r_kc,E,E,11,N],[11,r_za,E,E,12,[[[U]],[r_ya]]],[11,r_Fa,E,E,12,[[[T]],[T]]],[11,r_Aa,E,E,12,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,12,[[[r_ea]],[U]]],[11,r_Ba,E,E,12,[[[r_ea]],[T]]],[11,r_Ca,E,E,12,[[[r_ea]],[T]]],[11,r_Da,E,E,12,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,10,[[[U]],[r_ya]]],[11,r_Fa,E,E,10,[[[T]],[T]]],[11,r_Aa,E,E,10,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,10,[[[r_ea]],[U]]],[11,r_Ba,E,E,10,[[[r_ea]],[T]]],[11,r_Ca,E,E,10,[[[r_ea]],[T]]],[11,r_Da,E,E,10,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,10,[[[r_ea]],[T]]],[11,r_kc,E,E,10,N],[11,r_za,r_dd,E,13,[[[U]],[r_ya]]],[11,r_Fa,E,E,13,[[[T]],[T]]],[11,r_Aa,E,E,13,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,13,[[[r_ea]],[U]]],[11,r_Ba,E,E,13,[[[r_ea]],[T]]],[11,r_Ca,E,E,13,[[[r_ea]],[T]]],[11,r_Da,E,E,13,[[[r_ea]],[r_Ea]]],[11,r_za,r_ed,E,14,[[[U]],[r_ya]]],[11,r_Fa,E,E,14,[[[T]],[T]]],[11,r_Aa,E,E,14,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,14,[[[r_ea]],[U]]],[11,r_Ba,E,E,14,[[[r_ea]],[T]]],[11,r_Ca,E,E,14,[[[r_ea]],[T]]],[11,r_Da,E,E,14,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,15,[[[U]],[r_ya]]],[11,r_Fa,E,E,15,[[[T]],[T]]],[11,r_Aa,E,E,15,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,15,[[[r_ea]],[U]]],[11,r_Ba,E,E,15,[[[r_ea]],[T]]],[11,r_Ca,E,E,15,[[[r_ea]],[T]]],[11,r_Da,E,E,15,[[[r_ea]],[r_Ea]]],[11,r_za,r_fd,E,16,[[[U]],[r_ya]]],[11,r_Fa,E,E,16,[[[T]],[T]]],[11,r_Aa,E,E,16,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,16,[[[r_ea]],[U]]],[11,r_Ba,E,E,16,[[[r_ea]],[T]]],[11,r_Ca,E,E,16,[[[r_ea]],[T]]],[11,r_Da,E,E,16,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,17,[[[U]],[r_ya]]],[11,r_Fa,E,E,17,[[[T]],[T]]],[11,r_Aa,E,E,17,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,17,[[[r_ea]],[U]]],[11,r_Ba,E,E,17,[[[r_ea]],[T]]],[11,r_Ca,E,E,17,[[[r_ea]],[T]]],[11,r_Da,E,E,17,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,39,[[[U]],[r_ya]]],[11,r_Fa,E,E,39,[[[T]],[T]]],[11,r_Aa,E,E,39,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,39,[[[r_ea]],[U]]],[11,r_Ba,E,E,39,[[[r_ea]],[T]]],[11,r_Ca,E,E,39,[[[r_ea]],[T]]],[11,r_Da,E,E,39,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,18,[[[U]],[r_ya]]],[11,r_Fa,E,E,18,[[[T]],[T]]],[11,r_Aa,E,E,18,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,18,[[[r_ea]],[U]]],[11,r_Ba,E,E,18,[[[r_ea]],[T]]],[11,r_Ca,E,E,18,[[[r_ea]],[T]]],[11,r_Da,E,E,18,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,19,[[[U]],[r_ya]]],[11,r_Fa,E,E,19,[[[T]],[T]]],[11,r_Aa,E,E,19,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,19,[[[r_ea]],[U]]],[11,r_Ba,E,E,19,[[[r_ea]],[T]]],[11,r_Ca,E,E,19,[[[r_ea]],[T]]],[11,r_Da,E,E,19,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,20,[[[U]],[r_ya]]],[11,r_Fa,E,E,20,[[[T]],[T]]],[11,r_Aa,E,E,20,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,20,[[[r_ea]],[U]]],[11,r_Ba,E,E,20,[[[r_ea]],[T]]],[11,r_Ca,E,E,20,[[[r_ea]],[T]]],[11,r_Da,E,E,20,[[[r_ea]],[r_Ea]]],[11,r_za,r_gd,E,22,[[[U]],[r_ya]]],[11,r_Fa,E,E,22,[[[T]],[T]]],[11,r_Aa,E,E,22,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,22,[[[r_ea]],[U]]],[11,r_Ba,E,E,22,[[[r_ea]],[T]]],[11,r_Ca,E,E,22,[[[r_ea]],[T]]],[11,r_Da,E,E,22,[[[r_ea]],[r_Ea]]],[11,r_za,r_hd,E,23,[[[U]],[r_ya]]],[11,r_Fa,E,E,23,[[[T]],[T]]],[11,r_Aa,E,E,23,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,23,[[[r_ea]],[U]]],[11,r_Ba,E,E,23,[[[r_ea]],[T]]],[11,r_Ca,E,E,23,[[[r_ea]],[T]]],[11,r_Da,E,E,23,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,23,[[[r_ea]],[T]]],[11,r_kc,E,E,23,N],[11,r_za,r_id,E,24,[[[U]],[r_ya]]],[11,r_Fa,E,E,24,[[[T]],[T]]],[11,r_Aa,E,E,24,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,24,[[[r_ea]],[U]]],[11,r_Ba,E,E,24,[[[r_ea]],[T]]],[11,r_Ca,E,E,24,[[[r_ea]],[T]]],[11,r_Da,E,E,24,[[[r_ea]],[r_Ea]]],[11,r_za,r_Tc,E,38,[[[U]],[r_ya]]],[11,r_Fa,E,E,38,[[[T]],[T]]],[11,r_Aa,E,E,38,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,38,[[[r_ea]],[U]]],[11,r_Ba,E,E,38,[[[r_ea]],[T]]],[11,r_Ca,E,E,38,[[[r_ea]],[T]]],[11,r_Da,E,E,38,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,38,[[[r_ea]],[T]]],[11,r_kc,E,E,38,N],[11,r_za,r_Wc,E,36,[[[U]],[r_ya]]],[11,r_Fa,E,E,36,[[[T]],[T]]],[11,r_Aa,E,E,36,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,36,[[[r_ea]],[U]]],[11,r_Ba,E,E,36,[[[r_ea]],[T]]],[11,r_Ca,E,E,36,[[[r_ea]],[T]]],[11,r_Da,E,E,36,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,37,[[[U]],[r_ya]]],[11,r_Fa,E,E,37,[[[T]],[T]]],[11,r_Aa,E,E,37,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,37,[[[r_ea]],[U]]],[11,r_Ba,E,E,37,[[[r_ea]],[T]]],[11,r_Ca,E,E,37,[[[r_ea]],[T]]],[11,r_Da,E,E,37,[[[r_ea]],[r_Ea]]],[11,r_za,r_jd,E,28,[[[U]],[r_ya]]],[11,r_Fa,E,E,28,[[[T]],[T]]],[11,r_Aa,E,E,28,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,28,[[[r_ea]],[U]]],[11,r_Ba,E,E,28,[[[r_ea]],[T]]],[11,r_Ca,E,E,28,[[[r_ea]],[T]]],[11,r_Da,E,E,28,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,27,[[[U]],[r_ya]]],[11,r_Fa,E,E,27,[[[T]],[T]]],[11,r_Aa,E,E,27,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,27,[[[r_ea]],[U]]],[11,r_Ba,E,E,27,[[[r_ea]],[T]]],[11,r_Ca,E,E,27,[[[r_ea]],[T]]],[11,r_Da,E,E,27,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,27,[[[r_ea]],[T]]],[11,r_kc,E,E,27,N],[11,r_za,r_kd,E,29,[[[U]],[r_ya]]],[11,r_Fa,E,E,29,[[[T]],[T]]],[11,r_Aa,E,E,29,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,29,[[[r_ea]],[U]]],[11,r_Ba,E,E,29,[[[r_ea]],[T]]],[11,r_Ca,E,E,29,[[[r_ea]],[T]]],[11,r_Da,E,E,29,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,29,[[[r_ea]],[T]]],[11,r_kc,E,E,29,N],[11,r_za,r_ld,E,31,[[[U]],[r_ya]]],[11,r_Fa,E,E,31,[[[T]],[T]]],[11,r_Aa,E,E,31,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,31,[[[r_ea]],[U]]],[11,r_Ba,E,E,31,[[[r_ea]],[T]]],[11,r_Ca,E,E,31,[[[r_ea]],[T]]],[11,r_Da,E,E,31,[[[r_ea]],[r_Ea]]],[11,r_za,r_md,E,32,[[[U]],[r_ya]]],[11,r_Fa,E,E,32,[[[T]],[T]]],[11,r_Aa,E,E,32,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,32,[[[r_ea]],[U]]],[11,r_Ba,E,E,32,[[[r_ea]],[T]]],[11,r_Ca,E,E,32,[[[r_ea]],[T]]],[11,r_Da,E,E,32,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,32,[[[r_ea]],[T]]],[11,r_kc,E,E,32,N],[11,r_za,r_nd,E,35,[[[U]],[r_ya]]],[11,r_Fa,E,E,35,[[[T]],[T]]],[11,r_Aa,E,E,35,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,35,[[[r_ea]],[U]]],[11,r_Ba,E,E,35,[[[r_ea]],[T]]],[11,r_Ca,E,E,35,[[[r_ea]],[T]]],[11,r_Da,E,E,35,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,40,[[[U]],[r_ya]]],[11,r_Fa,E,E,40,[[[T]],[T]]],[11,r_Aa,E,E,40,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,40,[[[r_ea]],[U]]],[11,r_Ba,E,E,40,[[[r_ea]],[T]]],[11,r_Ca,E,E,40,[[[r_ea]],[T]]],[11,r_Da,E,E,40,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,41,[[[U]],[r_ya]]],[11,r_Fa,E,E,41,[[[T]],[T]]],[11,r_Aa,E,E,41,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,41,[[[r_ea]],[U]]],[11,r_Ba,E,E,41,[[[r_ea]],[T]]],[11,r_Ca,E,E,41,[[[r_ea]],[T]]],[11,r_Da,E,E,41,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,42,[[[U]],[r_ya]]],[11,r_Fa,E,E,42,[[[T]],[T]]],[11,r_Aa,E,E,42,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,42,[[[r_ea]],[U]]],[11,r_Ba,E,E,42,[[[r_ea]],[T]]],[11,r_Ca,E,E,42,[[[r_ea]],[T]]],[11,r_Da,E,E,42,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,43,[[[U]],[r_ya]]],[11,r_Fa,E,E,43,[[[T]],[T]]],[11,r_Aa,E,E,43,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,43,[[[r_ea]],[U]]],[11,r_Ba,E,E,43,[[[r_ea]],[T]]],[11,r_Ca,E,E,43,[[[r_ea]],[T]]],[11,r_Da,E,E,43,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,44,[[[U]],[r_ya]]],[11,r_Fa,E,E,44,[[[T]],[T]]],[11,r_Aa,E,E,44,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,44,[[[r_ea]],[U]]],[11,r_Ba,E,E,44,[[[r_ea]],[T]]],[11,r_Ca,E,E,44,[[[r_ea]],[T]]],[11,r_Da,E,E,44,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,45,[[[U]],[r_ya]]],[11,r_Fa,E,E,45,[[[T]],[T]]],[11,r_Aa,E,E,45,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,45,[[[r_ea]],[U]]],[11,r_Ba,E,E,45,[[[r_ea]],[T]]],[11,r_Ca,E,E,45,[[[r_ea]],[T]]],[11,r_Da,E,E,45,[[[r_ea]],[r_Ea]]],[11,r_od,E,E,44,[[[r_2c],[r_Rc]],[r_va,[r_Sc]]]],[11,r_od,E,E,45,[[[r_2c],[r_Rc]],[r_va,[r_Sc]]]],[11,r_db,r_ad,E,5,[[[r_ea]],[r_Gc]]],[11,r_db,E,E,4,[[[r_ea]],[r_Jc]]],[11,r_db,E,E,7,[[[r_ea]],[r_Ic]]],[11,r_db,r_bd,E,9,[[[r_ea]],["tss"]]],[11,r_db,r_cd,E,11,[[[r_ea]],[r_Mc]]],[11,r_db,E,E,10,[[[r_ea]],[r_hl]]],[11,r_db,r_hd,E,23,[[[r_ea]],[r_pd]]],[11,r_db,r_jd,E,27,[[[r_ea]],[r_Uc]]],[11,r_db,r_kd,E,29,[[[r_ea]],[r_Vc]]],[11,r_db,r_md,E,32,[[[r_ea]],[r_Zc]]],[11,r_db,r_Tc,E,38,[[[r_ea]],[r_Yc]]],[11,r_Ia,r_9c,E,2,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_ad,E,4,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,6,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_bd,E,9,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_cd,E,10,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_fd,E,18,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,19,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,17,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,20,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,39,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_hd,E,23,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_jd,E,27,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_kd,E,29,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_md,E,32,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_Tc,E,38,[[[r_ea],[r_Ha]],[r_ya]]],[11,"eq",r_9c,E,2,[[[r_ea],["memorytype"]],[r_ja]]],[11,"eq",r_ad,E,5,[[[r_ea],[r_Gc]],[r_ja]]],[11,"eq",r_fd,E,18,[[[r_ea],[r_qd]],[r_ja]]],[11,"eq",E,E,20,[[[r_ea],["hypervisorvendor"]],[r_ja]]],[11,"eq",r_jd,E,27,[[[r_ea],[r_Uc]],[r_ja]]],[11,"ne",E,E,27,[[[r_ea],[r_Uc]],[r_ja]]],[11,"eq",r_kd,E,29,[[[r_ea],[r_Vc]],[r_ja]]],[11,"ne",E,E,29,[[[r_ea],[r_Vc]],[r_ja]]],[11,"eq",r_md,E,32,[[[r_ea],[r_Zc]],[r_ja]]],[11,"ne",E,E,32,[[[r_ea],[r_Zc]],[r_ja]]],[11,"eq",r_Tc,E,38,[[[r_ea],[r_Yc]],[r_ja]]],[11,r_fe,r_jd,E,27,[[[r_ea],[r_Uc]],[r_fb]]],[11,r_fe,r_kd,E,29,[[[r_ea],[r_Vc]],[r_fb]]],[11,r_fe,r_md,E,32,[[[r_ea],[r_Zc]],[r_fb]]],[11,r_fe,r_Tc,E,38,[[[r_ea],[r_Yc]],[r_fb]]],[11,r_gb,r_jd,E,27,[[[r_ea],[r_Uc]],[r_va,[r_fb]]]],[11,"lt",E,E,27,[[[r_ea],[r_Uc]],[r_ja]]],[11,"le",E,E,27,[[[r_ea],[r_Uc]],[r_ja]]],[11,"gt",E,E,27,[[[r_ea],[r_Uc]],[r_ja]]],[11,"ge",E,E,27,[[[r_ea],[r_Uc]],[r_ja]]],[11,r_gb,r_kd,E,29,[[[r_ea],[r_Vc]],[r_va,[r_fb]]]],[11,"lt",E,E,29,[[[r_ea],[r_Vc]],[r_ja]]],[11,"le",E,E,29,[[[r_ea],[r_Vc]],[r_ja]]],[11,"gt",E,E,29,[[[r_ea],[r_Vc]],[r_ja]]],[11,"ge",E,E,29,[[[r_ea],[r_Vc]],[r_ja]]],[11,r_gb,r_md,E,32,[[[r_ea],[r_Zc]],[r_va,[r_fb]]]],[11,"lt",E,E,32,[[[r_ea],[r_Zc]],[r_ja]]],[11,"le",E,E,32,[[[r_ea],[r_Zc]],[r_ja]]],[11,"gt",E,E,32,[[[r_ea],[r_Zc]],[r_ja]]],[11,"ge",E,E,32,[[[r_ea],[r_Zc]],[r_ja]]],[11,r_gb,r_Tc,E,38,[[[r_ea],[r_Yc]],[r_va,[r_fb]]]],[11,r_ib,r_jd,E,27,N],[11,r_Ge,r_kd,E,29,N],[11,r_Ge,r_md,E,32,N],[11,r_Ge,r_Tc,E,38,N],[11,r_He,r_jd,"Returns the set difference of the two sets of flags.",27,[[[r_ea],[r_Uc]],[r_Uc]]],[11,r_He,r_Tc,E,38,N],[11,r_rd,r_kd,E,29,[[[r_ea],[r_da]]]],[11,r_rd,r_md,E,32,[[[r_ea],[r_da]]]],[11,r_ye,r_jd,"Disables all flags enabled in the set.",27,[[[r_ea],[r_Uc]]]],[11,"not",E,"Returns the complement of this set of flags.",27,[[[r_ea]],[r_Uc]]],[11,"bitand",E,"Returns the intersection between the two sets of flags.",27,[[[r_ea],[r_Uc]],[r_Uc]]],[11,"bitor",E,"Returns the union of the two sets of flags.",27,[[[r_ea],[r_Uc]],[r_Uc]]],[11,"bitxor",E,"Returns the left flags, but with all the right flags…",27,[[[r_ea],[r_Uc]],[r_Uc]]],[11,"bitand_assign",E,"Disables all flags disabled in the set.",27,[[[r_ea],[r_Uc]]]],[11,"bitor_assign",E,"Adds the set of flags.",27,[[[r_ea],[r_Uc]]]],[11,"bitxor_assign",E,"Toggles the set of flags.",27,[[[r_ea],[r_Uc]]]],[11,r_Ja,r_Wc,E,37,N],[11,r_Ka,E,E,37,N],[11,r_sd,r_cd,E,12,N],[11,r_sd,r_nd,E,35,[[[r_ea],[r_Rc]],[r_td]]],[11,r_ud,r_cd,E,12,N],[11,r_ud,r_nd,E,35,[[[r_ea],[r_Rc]],[r_td]]],[11,"from_iter",r_jd,E,27,[[[T]],[r_Uc]]],[11,"extend",E,E,27,[[[r_ea],[T]]]],[11,r_vd,r_kd,E,29,[[[r_ea],[r_ea]],[r_va,[r_da]]]],[11,r_wd,E,E,29,[[[r_ea]],[r_ea]]],[11,r_xd,E,E,29,[[[r_ea]],[r_ea]]],[11,r_yd,E,E,29,[[[r_ea]],[r_ea]]],[11,r_zd,E,E,29,[[[r_ea]],[r_ea]]],[11,r_Ad,E,E,29,[[[r_ea],[r_da]],[r_va]]],[11,r_vd,r_md,E,32,[[[r_ea],[r_ea]],[r_va,[r_da]]]],[11,r_wd,E,E,32,[[[r_ea]],[r_ea]]],[11,r_xd,E,E,32,[[[r_ea]],[r_ea]]],[11,r_yd,E,E,32,[[[r_ea]],[r_ea]]],[11,r_zd,E,E,32,[[[r_ea]],[r_ea]]],[11,r_Ad,E,E,32,[[[r_ea],[r_da]],[r_va]]],[11,"write_str",r_id,E,24,[[[r_ea],[r_4a]],[r_ya]]],[11,r_Ia,r_jd,E,27,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,27,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,27,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_Tc,E,38,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_jd,E,27,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_Tc,E,38,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Na,r_jd,E,27,[[],[r_Uc]]],[11,r_Na,r_Tc,E,38,[[],[r_Yc]]]],"p":[[3,r_Bd],[3,r_Fc],[4,r_Cd],[3,r_Dd],[3,r_Ed],[4,r_Fd],[3,r_Gd],[3,r_Hd],[3,"Gdt"],[3,"Tss"],[3,r_Id],[3,r_Jd],[3,"Idt"],[3,"Pic"],[3,r_Kd],[3,r_Ld],[3,r_Md],[3,r_Nd],[4,r_Od],[4,r_Pd],[4,r_Qd],[8,r_Rd],[3,"Port"],[3,r_Sd],[3,r_Td],[8,r_Ud],[8,r_Vd],[3,r_Wd],[3,r_Xd],[3,r_Yd],[8,r_Zd],[3,r_0d],[3,"Page"],[8,r_1d],[8,r_2d],[3,r_3d],[3,r_4d],[3,r_5d],[3,r_6d],[3,r_7d],[4,r_8d],[4,r_9d],[4,r_ae],[4,r_be],[4,r_ce],[4,r_de]]};
searchIndex[r_Jf]={r_ac:"External iterators for generic mathematics","i":[[3,r_Rf,r_Jf,r_8h,N,N],[3,r_Sf,E,r_9h,N,N],[3,r_Tf,E,r_ai,N,N],[3,r_Uf,E,r_bi,N,N],[5,r_fa,E,r_Og,N,[[["a"],["a"]],[r_fa]]],[5,r_Pg,E,r_Qg,N,[[["a"],["a"]],[r_Lf]]],[5,r_Rg,E,r_Sg,N,[[["a"],["a"],["a"]],[r_Mf]]],[5,r_Tg,E,r_Ug,N,[[["a"],["a"],["a"]],[r_Nf]]],[11,r_za,E,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Kf,E,E,0,[[[r_ea]],["i"]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Kf,E,E,1,[[[r_ea]],["i"]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,2,[[[U]],[r_ya]]],[11,r_Fa,E,E,2,[[[T]],[T]]],[11,r_Kf,E,E,2,[[[r_ea]],["i"]]],[11,r_Aa,E,E,2,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,2,[[[r_ea]],[U]]],[11,r_Ba,E,E,2,[[[r_ea]],[T]]],[11,r_Ca,E,E,2,[[[r_ea]],[T]]],[11,r_Da,E,E,2,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,3,[[[U]],[r_ya]]],[11,r_Fa,E,E,3,[[[T]],[T]]],[11,r_Kf,E,E,3,[[[r_ea]],["i"]]],[11,r_Aa,E,E,3,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,3,[[[r_ea]],[U]]],[11,r_Ba,E,E,3,[[[r_ea]],[T]]],[11,r_Ca,E,E,3,[[[r_ea]],[T]]],[11,r_Da,E,E,3,[[[r_ea]],[r_Ea]]],[11,r_db,E,E,0,[[[r_ea]],[r_fa]]],[11,r_db,E,E,1,[[[r_ea]],[r_Lf]]],[11,r_db,E,E,2,[[[r_ea]],[r_Mf]]],[11,r_db,E,E,3,[[[r_ea]],[r_Nf]]],[11,r_Of,E,E,0,[[[r_ea]],[r_va]]],[11,r_Of,E,E,1,[[[r_ea]],[r_va]]],[11,r_Qf,E,E,0,[[[r_ea]],[r_va]]],[11,r_Pf,E,E,0,N],[11,r_Qf,E,E,1,[[[r_ea]],[r_va]]],[11,r_Pf,E,E,1,N],[11,r_Qf,E,E,2,[[[r_ea]],[r_va]]],[11,r_Qf,E,E,3,[[[r_ea]],[r_va]]]],"p":[[3,r_Rf],[3,r_Sf],[3,r_Tf],[3,r_Uf]]};
searchIndex[r_Ng]={r_ac:"A collection of numeric types and traits for Rust.","i":[[3,r_Ee,r_Ng,r_wg,N,N],[12,"re",E,r_xg,0,N],[12,"im",E,r_yg,0,N],[6,r_Yh,E,r_Zh,N,N],[8,r_te,E,E,N,N],[10,r_me,E,r_zg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,r_ne,E,r_Ag,1,[[[r_ea],[r_ea]],[r_ea]]],[10,"gcd",E,r_Bg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,"lcm",E,r_Cg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Dg,E,r_Eg,1,[[[r_ea],[r_ea]],[r_ja]]],[10,r_Fg,E,r_Gg,1,[[[r_ea],[r_ea]],[r_ja]]],[10,r_Hg,E,r_Ig,1,[[[r_ea]],[r_ja]]],[10,r_Jg,E,r_Kg,1,[[[r_ea]],[r_ja]]],[10,r_oe,E,r_Lg,1,N],[11,r_pe,E,r_Mg,1,N],[5,r_fa,E,r_Og,N,[[["a"],["a"]],[r_fa]]],[5,r_Pg,E,r_Qg,N,[[["a"],["a"]],[r_Lf]]],[5,r_Rg,E,r_Sg,N,[[["a"],["a"],["a"]],[r_Mf]]],[5,r_Tg,E,r_Ug,N,[[["a"],["a"],["a"]],[r_Nf]]],[8,"Num",E,r_Th,N,N],[16,r_Uh,E,E,2,N],[10,r_jf,E,r_Vh,2,[[[r_4a],[r_vb]],[r_ya]]],[8,r_7h,E,r_1g,N,N],[10,r_ge,E,r_2g,3,[[],[r_ea]]],[10,r_hf,E,r_3g,3,[[[r_ea]],[r_ja]]],[8,"One",E,r_4g,N,N],[10,r_6h,E,r_5g,4,[[],[r_ea]]],[11,r_if,E,r_6g,4,[[[r_ea]],[r_ja]]],[8,r_9b,E,r_Oh,N,N],[10,r_5h,E,r_Fb,5,[[[r_ea]],[r_ea]]],[10,r_Gb,E,r_Hb,5,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Eb,E,r_Ib,5,[[[r_ea]],[r_ea]]],[10,r_Df,E,r_Ph,5,[[[r_ea]],[r_ja]]],[10,r_Ef,E,r_Qh,5,[[[r_ea]],[r_ja]]],[8,r_Rh,E,r_Sh,N,N],[8,r_Lb,E,r_Vg,N,N],[10,r_tb,E,r_Wg,6,[[],[r_ea]]],[10,r_ub,E,r_Xg,6,[[],[r_ea]]],[5,r_6h,E,r_8g,N,[[],[T]]],[5,r_ge,E,r_7g,N,[[],[T]]],[5,r_5h,E,r_Fb,N,[[[T]],[T]]],[5,r_Gb,E,r_Hb,N,[[[T],[T]],[T]]],[5,r_Eb,E,r_Ib,N,[[[T]],[T]]],[8,r_3b,E,r_Hh,N,N],[10,r_Ih,E,r_Jh,7,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Kh,E,r_Lh,7,[[[r_ea],[r_ea]],[r_ea]]],[8,r_Tb,E,r_yh,N,N],[10,r_zf,E,r_zh,8,[[[r_ea],[r_ea]],[r_va]]],[8,r_Ub,E,r_Ah,N,N],[10,r_Af,E,r_Bh,9,[[[r_ea],[r_ea]],[r_va]]],[8,r_Vb,E,r_Ch,N,N],[10,r_Bf,E,r_Dh,10,[[[r_ea],[r_ea]],[r_va]]],[8,r_Wb,E,r_Eh,N,N],[10,r_Cf,E,r_Fh,11,[[[r_ea],[r_ea]],[r_va]]],[8,r_Sb,E,E,N,N],[10,r_9g,E,r_ah,12,[[[r_ea]],[r_vb]]],[10,r_bh,E,r_ch,12,[[[r_ea]],[r_vb]]],[10,r_dh,E,r_eh,12,[[[r_ea]],[r_vb]]],[10,r_fh,E,r_gh,12,[[[r_ea]],[r_vb]]],[10,r_hh,E,r_wb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_ih,E,r_xb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_jh,E,r_wb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_kh,E,r_xb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_lh,E,r_wb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_mh,E,r_xb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_nh,E,r_oh,12,[[[r_ea]],[r_ea]]],[10,r_ph,E,r_qh,12,[[[r_ea]],[r_ea]]],[10,r_rh,E,r_sh,12,[[[r_ea]],[r_ea]]],[10,r_th,E,r_uh,12,[[[r_ea]],[r_ea]]],[10,r_vh,E,r_wh,12,[[[r_ea]],[r_ea]]],[10,r_qf,E,r_xh,12,[[[r_ea],[r_vb]],[r_ea]]],[8,r_Mb,E,r_Vf,N,N],[11,r_Ie,E,r_Wf,13,[[[r_ea]],[r_va,[r_sb]]]],[11,r_Je,E,r_Xf,13,[[[r_ea]],[r_va,["i8"]]]],[11,r_Ke,E,r_Yf,13,[[[r_ea]],[r_va,[r_If]]]],[11,r_Le,E,r_Zf,13,[[[r_ea]],[r_va,[r_yf]]]],[10,r_Me,E,r_0f,13,[[[r_ea]],[r_va,[r_nf]]]],[11,r_Ne,E,r_1f,13,[[[r_ea]],[r_va,[r_Oe]]]],[11,r_Pe,E,r_2f,13,[[[r_ea]],[r_va,[r_da]]]],[11,r_Qe,E,r_3f,13,[[[r_ea]],[r_va,["u8"]]]],[11,r_Re,E,r_4f,13,[[[r_ea]],[r_va,[r_Rc]]]],[11,r_Se,E,r_5f,13,[[[r_ea]],[r_va,[r_vb]]]],[10,r_Te,E,r_6f,13,[[[r_ea]],[r_va,[r_Ue]]]],[11,r_Ve,E,r_7f,13,[[[r_ea]],[r_va,[r_We]]]],[11,r_Xe,E,r_8f,13,[[[r_ea]],[r_va,[r_of]]]],[11,r_Ye,E,r_9f,13,[[[r_ea]],[r_va,[r_pf]]]],[8,r_Nb,E,r_ag,N,N],[11,r_Ze,E,r_bg,14,[[[r_sb]],[r_va]]],[11,r_0e,E,r_cg,14,[[["i8"]],[r_va]]],[11,r_1e,E,r_dg,14,[[[r_If]],[r_va]]],[11,r_2e,E,r_eg,14,[[[r_yf]],[r_va]]],[10,r_3e,E,r_fg,14,[[[r_nf]],[r_va]]],[11,r_4e,E,r_gg,14,[[[r_Oe]],[r_va]]],[11,r_5e,E,r_hg,14,[[[r_da]],[r_va]]],[11,r_6e,E,r_ig,14,[[["u8"]],[r_va]]],[11,r_7e,E,r_jg,14,[[[r_Rc]],[r_va]]],[11,r_8e,E,r_kg,14,[[[r_vb]],[r_va]]],[10,r_9e,E,r_lg,14,[[[r_Ue]],[r_va]]],[11,r_af,E,r_mg,14,[[[r_We]],[r_va]]],[11,r_bf,E,r_ng,14,[[[r_of]],[r_va]]],[11,r_cf,E,r_og,14,[[[r_pf]],[r_va]]],[8,r_Ob,E,r_pg,N,N],[10,r_Fa,E,r_qg,15,[[[T]],[r_va]]],[0,r_rg,E,E,N,N],[8,r_Mb,"num::cast",r_Vf,N,N],[11,r_Ie,E,r_Wf,13,[[[r_ea]],[r_va,[r_sb]]]],[11,r_Je,E,r_Xf,13,[[[r_ea]],[r_va,["i8"]]]],[11,r_Ke,E,r_Yf,13,[[[r_ea]],[r_va,[r_If]]]],[11,r_Le,E,r_Zf,13,[[[r_ea]],[r_va,[r_yf]]]],[10,r_Me,E,r_0f,13,[[[r_ea]],[r_va,[r_nf]]]],[11,r_Ne,E,r_1f,13,[[[r_ea]],[r_va,[r_Oe]]]],[11,r_Pe,E,r_2f,13,[[[r_ea]],[r_va,[r_da]]]],[11,r_Qe,E,r_3f,13,[[[r_ea]],[r_va,["u8"]]]],[11,r_Re,E,r_4f,13,[[[r_ea]],[r_va,[r_Rc]]]],[11,r_Se,E,r_5f,13,[[[r_ea]],[r_va,[r_vb]]]],[10,r_Te,E,r_6f,13,[[[r_ea]],[r_va,[r_Ue]]]],[11,r_Ve,E,r_7f,13,[[[r_ea]],[r_va,[r_We]]]],[11,r_Xe,E,r_8f,13,[[[r_ea]],[r_va,[r_of]]]],[11,r_Ye,E,r_9f,13,[[[r_ea]],[r_va,[r_pf]]]],[8,r_Nb,E,r_ag,N,N],[11,r_Ze,E,r_bg,14,[[[r_sb]],[r_va]]],[11,r_0e,E,r_cg,14,[[["i8"]],[r_va]]],[11,r_1e,E,r_dg,14,[[[r_If]],[r_va]]],[11,r_2e,E,r_eg,14,[[[r_yf]],[r_va]]],[10,r_3e,E,r_fg,14,[[[r_nf]],[r_va]]],[11,r_4e,E,r_gg,14,[[[r_Oe]],[r_va]]],[11,r_5e,E,r_hg,14,[[[r_da]],[r_va]]],[11,r_6e,E,r_ig,14,[[["u8"]],[r_va]]],[11,r_7e,E,r_jg,14,[[[r_Rc]],[r_va]]],[11,r_8e,E,r_kg,14,[[[r_vb]],[r_va]]],[10,r_9e,E,r_lg,14,[[[r_Ue]],[r_va]]],[11,r_af,E,r_mg,14,[[[r_We]],[r_va]]],[11,r_bf,E,r_ng,14,[[[r_of]],[r_va]]],[11,r_cf,E,r_og,14,[[[r_pf]],[r_va]]],[5,r_rg,E,r_sg,N,[[[T]],[r_va]]],[8,r_Ob,E,r_pg,N,N],[10,r_Fa,E,r_qg,15,[[[T]],[r_va]]],[8,r_Pb,E,r_Zg,N,N],[10,"as_",E,r_0g,16,[[[r_ea]],[T]]],[5,r_rg,r_Ng,r_sg,N,[[[T]],[r_va]]],[0,r_qf,E,E,N,N],[8,"Pow","num::pow",r_Mh,N,N],[16,r_Ab,E,r_Db,17,N],[10,r_qf,E,r_Nh,17,N],[5,r_qf,E,r_tg,N,[[[T],[r_da]],[T]]],[5,r_ug,E,r_vg,N,[[[T],[r_da]],[r_va]]],[5,r_qf,r_Ng,r_tg,N,[[[T],[r_da]],[T]]],[5,r_ug,E,r_vg,N,[[[T],[r_da]],[r_va]]],[5,r_Wh,E,r_Xh,N,[[[T],[T],[T]],[T]]],[0,r_we,E,E,N,N],[3,r_Ee,r_0h,r_wg,N,N],[12,"re",E,r_xg,0,N],[12,"im",E,r_yg,0,N],[6,r_Wk,E,E,N,N],[6,r_Xk,E,E,N,N],[3,r_Fe,E,E,N,N],[0,"integer",r_Ng,E,N,N],[8,r_te,r_1h,E,N,N],[10,r_me,E,r_zg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,r_ne,E,r_Ag,1,[[[r_ea],[r_ea]],[r_ea]]],[10,"gcd",E,r_Bg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,"lcm",E,r_Cg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Dg,E,r_Eg,1,[[[r_ea],[r_ea]],[r_ja]]],[10,r_Fg,E,r_Gg,1,[[[r_ea],[r_ea]],[r_ja]]],[10,r_Hg,E,r_Ig,1,[[[r_ea]],[r_ja]]],[10,r_Jg,E,r_Kg,1,[[[r_ea]],[r_ja]]],[10,r_oe,E,r_Lg,1,N],[11,r_pe,E,r_Mg,1,N],[5,r_oe,E,r_di,N,N],[5,r_me,E,r_ei,N,[[[T],[T]],[T]]],[5,r_ne,E,r_fi,N,[[[T],[T]],[T]]],[5,r_pe,E,r_gi,N,N],[5,"gcd",E,r_hi,N,[[[T],[T]],[T]]],[5,"lcm",E,r_ii,N,[[[T],[T]],[T]]],[3,r_ue,E,r_ci,N,N],[5,r_ji,E,r_ki,N,[[[T],[T]],[T]]],[5,r_li,E,r_mi,N,N],[8,r_se,E,r_ni,N,N],[10,r_ie,E,r_je,18,[[[r_ea],[r_vb]],[r_ea]]],[11,r_qe,E,r_ke,18,[[[r_ea]],[r_ea]]],[11,r_re,E,r_le,18,[[[r_ea]],[r_ea]]],[5,r_qe,E,r_ke,N,[[[T]],[T]]],[5,r_ie,E,r_je,N,[[[T],[r_vb]],[T]]],[5,r_re,E,r_le,N,[[[T]],[T]]],[0,"iter",r_Ng,E,N,N],[3,r_Rf,r_2h,r_8h,N,N],[5,r_fa,E,r_Og,N,[[["a"],["a"]],[r_fa]]],[3,r_Sf,E,r_9h,N,N],[5,r_Pg,E,r_Qg,N,[[["a"],["a"]],[r_Lf]]],[3,r_Tf,E,r_ai,N,N],[5,r_Rg,E,r_Sg,N,[[["a"],["a"],["a"]],[r_Mf]]],[3,r_Uf,E,r_bi,N,N],[5,r_Tg,E,r_Ug,N,[[["a"],["a"],["a"]],[r_Nf]]],[0,"traits",r_Ng,E,N,N],[0,r_0i,r_Yg,E,N,N],[8,r_Lb,"num::traits::bounds",r_Vg,N,N],[10,r_tb,E,r_Wg,6,[[],[r_ea]]],[10,r_ub,E,r_Xg,6,[[],[r_ea]]],[0,r_rg,r_Yg,E,N,N],[8,r_Mb,"num::traits::cast",r_Vf,N,N],[11,r_Ie,E,r_Wf,13,[[[r_ea]],[r_va,[r_sb]]]],[11,r_Je,E,r_Xf,13,[[[r_ea]],[r_va,["i8"]]]],[11,r_Ke,E,r_Yf,13,[[[r_ea]],[r_va,[r_If]]]],[11,r_Le,E,r_Zf,13,[[[r_ea]],[r_va,[r_yf]]]],[10,r_Me,E,r_0f,13,[[[r_ea]],[r_va,[r_nf]]]],[11,r_Ne,E,r_1f,13,[[[r_ea]],[r_va,[r_Oe]]]],[11,r_Pe,E,r_2f,13,[[[r_ea]],[r_va,[r_da]]]],[11,r_Qe,E,r_3f,13,[[[r_ea]],[r_va,["u8"]]]],[11,r_Re,E,r_4f,13,[[[r_ea]],[r_va,[r_Rc]]]],[11,r_Se,E,r_5f,13,[[[r_ea]],[r_va,[r_vb]]]],[10,r_Te,E,r_6f,13,[[[r_ea]],[r_va,[r_Ue]]]],[11,r_Ve,E,r_7f,13,[[[r_ea]],[r_va,[r_We]]]],[11,r_Xe,E,r_8f,13,[[[r_ea]],[r_va,[r_of]]]],[11,r_Ye,E,r_9f,13,[[[r_ea]],[r_va,[r_pf]]]],[8,r_Nb,E,r_ag,N,N],[11,r_Ze,E,r_bg,14,[[[r_sb]],[r_va]]],[11,r_0e,E,r_cg,14,[[["i8"]],[r_va]]],[11,r_1e,E,r_dg,14,[[[r_If]],[r_va]]],[11,r_2e,E,r_eg,14,[[[r_yf]],[r_va]]],[10,r_3e,E,r_fg,14,[[[r_nf]],[r_va]]],[11,r_4e,E,r_gg,14,[[[r_Oe]],[r_va]]],[11,r_5e,E,r_hg,14,[[[r_da]],[r_va]]],[11,r_6e,E,r_ig,14,[[["u8"]],[r_va]]],[11,r_7e,E,r_jg,14,[[[r_Rc]],[r_va]]],[11,r_8e,E,r_kg,14,[[[r_vb]],[r_va]]],[10,r_9e,E,r_lg,14,[[[r_Ue]],[r_va]]],[11,r_af,E,r_mg,14,[[[r_We]],[r_va]]],[11,r_bf,E,r_ng,14,[[[r_of]],[r_va]]],[11,r_cf,E,r_og,14,[[[r_pf]],[r_va]]],[5,r_rg,E,r_sg,N,[[[T]],[r_va]]],[8,r_Ob,E,r_pg,N,N],[10,r_Fa,E,r_qg,15,[[[T]],[r_va]]],[8,r_Pb,E,r_Zg,N,N],[10,"as_",E,r_0g,16,[[[r_ea]],[T]]],[0,r_1i,r_Yg,E,N,N],[8,r_Qb,"num::traits::float",r_2i,N,N],[10,r_3i,E,r_4i,19,[[],[r_ea]]],[10,r_5i,E,r_6i,19,[[],[r_ea]]],[10,"nan",E,r_7i,19,[[],[r_ea]]],[10,r_8i,E,r_9i,19,[[],[r_ea]]],[10,r_tb,E,r_aj,19,[[],[r_ea]]],[10,r_bj,E,r_cj,19,[[],[r_ea]]],[10,r_dj,E,r_ej,19,[[],[r_ea]]],[10,r_ub,E,r_fj,19,[[],[r_ea]]],[11,r_df,E,r_gj,19,[[[r_ea]],[r_ja]]],[11,r_ef,E,r_hj,19,[[[r_ea]],[r_ja]]],[11,r_ff,E,r_ij,19,[[[r_ea]],[r_ja]]],[11,r_gf,E,r_jj,19,[[[r_ea]],[r_ja]]],[10,r_kj,E,r_lj,19,[[[r_ea]],[r_mj]]],[11,r_tf,E,r_nj,19,[[[r_ea]],[r_ea]]],[11,r_Mi,E,r_oj,19,[[[r_ea]],[r_ea]]],[11,r_uf,E,r_pj,19,[[[r_ea]],[r_ea]]],[11,r_vf,E,r_qj,19,[[[r_ea]],[r_ea]]],[11,r_wf,E,r_rj,19,[[[r_ea]],[r_ea]]],[11,r_5h,E,r_sj,19,[[[r_ea]],[r_ea]]],[11,r_Eb,E,r_tj,19,[[[r_ea]],[r_ea]]],[11,r_uj,E,r_vj,19,[[[r_ea]],[r_ja]]],[11,r_wj,E,r_xj,19,[[[r_ea]],[r_ja]]],[11,"min",E,r_yj,19,[[[r_ea],[r_ea]],[r_ea]]],[11,"max",E,r_zj,19,[[[r_ea],[r_ea]],[r_ea]]],[11,r_xf,E,r_Aj,19,[[[r_ea]],[r_ea]]],[11,"powi",E,r_Bj,19,[[[r_ea],[r_yf]],[r_ea]]],[10,r_Cj,E,r_Dj,19,[[[r_ea]],[r_ea]]],[10,r_Ej,E,r_Fj,19,[[[r_ea]],[r_ea]]],[10,r_Gj,E,r_Hj,19,N],[8,r_Rb,E,E,N,N],[10,"E",E,r_Ij,20,[[],[r_ea]]],[10,r_Jj,E,r_Kj,20,[[],[r_ea]]],[10,r_Lj,E,r_Mj,20,[[],[r_ea]]],[10,r_Nj,E,r_Oj,20,[[],[r_ea]]],[10,r_Pj,E,r_Qj,20,[[],[r_ea]]],[10,r_Rj,E,r_Sj,20,[[],[r_ea]]],[10,r_Tj,E,r_Uj,20,[[],[r_ea]]],[10,r_Vj,E,r_Wj,20,[[],[r_ea]]],[10,r_Xj,E,r_Yj,20,[[],[r_ea]]],[10,r_Zj,E,r_0j,20,[[],[r_ea]]],[10,r_1j,E,r_2j,20,[[],[r_ea]]],[10,"LN_2",E,r_3j,20,[[],[r_ea]]],[10,r_4j,E,r_5j,20,[[],[r_ea]]],[10,r_6j,E,r_7j,20,[[],[r_ea]]],[10,"PI",E,r_8j,20,[[],[r_ea]]],[10,r_9j,E,r_ak,20,[[],[r_ea]]],[0,r_bk,r_Yg,E,N,N],[8,r_7h,"num::traits::identities",r_1g,N,N],[10,r_ge,E,r_2g,3,[[],[r_ea]]],[10,r_hf,E,r_3g,3,[[[r_ea]],[r_ja]]],[8,"One",E,r_4g,N,N],[10,r_6h,E,r_5g,4,[[],[r_ea]]],[11,r_if,E,r_6g,4,[[[r_ea]],[r_ja]]],[5,r_ge,E,r_7g,N,[[],[T]]],[5,r_6h,E,r_8g,N,[[],[T]]],[0,"int",r_Yg,E,N,N],[8,r_Sb,"num::traits::int",E,N,N],[10,r_9g,E,r_ah,12,[[[r_ea]],[r_vb]]],[10,r_bh,E,r_ch,12,[[[r_ea]],[r_vb]]],[10,r_dh,E,r_eh,12,[[[r_ea]],[r_vb]]],[10,r_fh,E,r_gh,12,[[[r_ea]],[r_vb]]],[10,r_hh,E,r_wb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_ih,E,r_xb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_jh,E,r_wb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_kh,E,r_xb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_lh,E,r_wb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_mh,E,r_xb,12,[[[r_ea],[r_vb]],[r_ea]]],[10,r_nh,E,r_oh,12,[[[r_ea]],[r_ea]]],[10,r_ph,E,r_qh,12,[[[r_ea]],[r_ea]]],[10,r_rh,E,r_sh,12,[[[r_ea]],[r_ea]]],[10,r_th,E,r_uh,12,[[[r_ea]],[r_ea]]],[10,r_vh,E,r_wh,12,[[[r_ea]],[r_ea]]],[10,r_qf,E,r_xh,12,[[[r_ea],[r_vb]],[r_ea]]],[0,"ops",r_Yg,E,N,N],[0,r_ck,r_Gh,E,N,N],[8,r_Tb,"num::traits::ops::checked",r_yh,N,N],[10,r_zf,E,r_zh,8,[[[r_ea],[r_ea]],[r_va]]],[8,r_Ub,E,r_Ah,N,N],[10,r_Af,E,r_Bh,9,[[[r_ea],[r_ea]],[r_va]]],[8,r_Vb,E,r_Ch,N,N],[10,r_Bf,E,r_Dh,10,[[[r_ea],[r_ea]],[r_va]]],[8,r_Wb,E,r_Eh,N,N],[10,r_Cf,E,r_Fh,11,[[[r_ea],[r_ea]],[r_va]]],[8,r_Xb,E,r_dk,N,N],[10,r_ek,E,r_fk,21,[[[r_ea],[r_ea]],[r_va]]],[8,r_Yb,E,r_gk,N,N],[10,r_hk,E,r_ik,22,[[[r_ea]],[r_va]]],[8,r_Zb,E,r_jk,N,N],[10,r_kk,E,r_yb,23,[[[r_ea],[r_vb]],[r_va]]],[8,r_0b,E,r_lk,N,N],[10,r_mk,E,r_yb,24,[[[r_ea],[r_vb]],[r_va]]],[0,r_Xi,r_Gh,E,N,N],[8,"Inv","num::traits::ops::inv",r_nk,N,N],[16,r_Ab,E,r_Db,25,N],[10,r_Xi,E,r_ok,25,N],[0,r_Bb,r_Gh,E,N,N],[8,r_1b,"num::traits::ops::mul_add",r_pk,N,N],[16,r_Ab,E,r_qk,26,N],[10,r_Bb,E,r_Cb,26,N],[8,r_2b,E,r_rk,N,N],[10,r_sk,E,r_Cb,27,N],[0,r_tk,r_Gh,E,N,N],[8,r_3b,"num::traits::ops::saturating",r_Hh,N,N],[10,r_Ih,E,r_Jh,7,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Kh,E,r_Lh,7,[[[r_ea],[r_ea]],[r_ea]]],[0,r_uk,r_Gh,E,N,N],[8,r_4b,"num::traits::ops::wrapping",r_vk,N,N],[10,r_wk,E,r_xk,28,[[[r_ea],[r_ea]],[r_ea]]],[8,r_5b,E,r_yk,N,N],[10,r_zk,E,r_Ak,29,[[[r_ea],[r_ea]],[r_ea]]],[8,r_6b,E,r_Bk,N,N],[10,r_Ck,E,r_Dk,30,[[[r_ea],[r_ea]],[r_ea]]],[8,r_7b,E,r_Ek,N,N],[10,r_Fk,E,r_Gk,31,[[[r_ea],[r_vb]],[r_ea]]],[8,r_8b,E,r_Hk,N,N],[10,r_Ik,E,r_Jk,32,[[[r_ea],[r_vb]],[r_ea]]],[0,r_qf,r_Yg,E,N,N],[8,"Pow","num::traits::pow",r_Mh,N,N],[16,r_Ab,E,r_Db,17,N],[10,r_qf,E,r_Nh,17,N],[5,r_qf,E,r_tg,N,[[[T],[r_da]],[T]]],[5,r_ug,E,r_vg,N,[[[T],[r_da]],[r_va]]],[0,"sign",r_Yg,E,N,N],[8,r_9b,"num::traits::sign",r_Oh,N,N],[10,r_5h,E,r_Fb,5,[[[r_ea]],[r_ea]]],[10,r_Gb,E,r_Hb,5,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Eb,E,r_Ib,5,[[[r_ea]],[r_ea]]],[10,r_Df,E,r_Ph,5,[[[r_ea]],[r_ja]]],[10,r_Ef,E,r_Qh,5,[[[r_ea]],[r_ja]]],[5,r_5h,E,r_Fb,N,[[[T]],[T]]],[5,r_Gb,E,r_Hb,N,[[[T],[T]],[T]]],[5,r_Eb,E,r_Ib,N,[[[T]],[T]]],[8,r_Rh,E,r_Sh,N,N],[8,"Num",r_Yg,r_Th,N,N],[16,r_Uh,E,E,2,N],[10,r_jf,E,r_Vh,2,[[[r_4a],[r_vb]],[r_ya]]],[8,r_Kk,E,r_Lk,N,N],[8,r_Mk,E,r_Nk,N,N],[8,r_Ok,E,r_Pk,N,N],[8,r_Qk,E,r_Rk,N,N],[8,r_Sk,E,r_Tk,N,N],[8,r_Uk,E,r_Vk,N,N],[4,r_Kb,E,E,N,N],[13,r_Yi,E,E,33,N],[13,r_Zi,E,E,33,N],[3,r_Jb,E,E,N,N],[12,"kind",E,E,34,N],[5,r_Wh,E,r_Xh,N,[[[T],[T],[T]],[T]]],[0,"rational",r_Ng,E,N,N],[3,r_rf,r_3h,r_qi,N,N],[6,r_Yh,E,r_Zh,N,N],[6,r_ri,E,r_si,N,N],[6,r_ti,E,r_ui,N,N],[3,r_sf,E,E,N,N],[11,r_za,r_0h,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,35,[[[U]],[r_ya]]],[11,r_Fa,E,E,35,[[[T]],[T]]],[11,r_Aa,E,E,35,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,35,[[[r_ea]],[U]]],[11,r_Ba,E,E,35,[[[r_ea]],[T]]],[11,r_Ca,E,E,35,[[[r_ea]],[T]]],[11,r_Da,E,E,35,[[[r_ea]],[r_Ea]]],[11,r_za,r_1h,E,36,[[[U]],[r_ya]]],[11,r_Fa,E,E,36,[[[T]],[T]]],[11,r_Kf,E,E,36,[[[r_ea]],["i"]]],[11,r_Aa,E,E,36,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,36,[[[r_ea]],[U]]],[11,r_Ba,E,E,36,[[[r_ea]],[T]]],[11,r_Ca,E,E,36,[[[r_ea]],[T]]],[11,r_Da,E,E,36,[[[r_ea]],[r_Ea]]],[11,r_za,r_2h,E,37,[[[U]],[r_ya]]],[11,r_Fa,E,E,37,[[[T]],[T]]],[11,r_Kf,E,E,37,[[[r_ea]],["i"]]],[11,r_Aa,E,E,37,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,37,[[[r_ea]],[U]]],[11,r_Ba,E,E,37,[[[r_ea]],[T]]],[11,r_Ca,E,E,37,[[[r_ea]],[T]]],[11,r_Da,E,E,37,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,38,[[[U]],[r_ya]]],[11,r_Fa,E,E,38,[[[T]],[T]]],[11,r_Kf,E,E,38,[[[r_ea]],["i"]]],[11,r_Aa,E,E,38,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,38,[[[r_ea]],[U]]],[11,r_Ba,E,E,38,[[[r_ea]],[T]]],[11,r_Ca,E,E,38,[[[r_ea]],[T]]],[11,r_Da,E,E,38,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,39,[[[U]],[r_ya]]],[11,r_Fa,E,E,39,[[[T]],[T]]],[11,r_Kf,E,E,39,[[[r_ea]],["i"]]],[11,r_Aa,E,E,39,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,39,[[[r_ea]],[U]]],[11,r_Ba,E,E,39,[[[r_ea]],[T]]],[11,r_Ca,E,E,39,[[[r_ea]],[T]]],[11,r_Da,E,E,39,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,40,[[[U]],[r_ya]]],[11,r_Fa,E,E,40,[[[T]],[T]]],[11,r_Kf,E,E,40,[[[r_ea]],["i"]]],[11,r_Aa,E,E,40,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,40,[[[r_ea]],[U]]],[11,r_Ba,E,E,40,[[[r_ea]],[T]]],[11,r_Ca,E,E,40,[[[r_ea]],[T]]],[11,r_Da,E,E,40,[[[r_ea]],[r_Ea]]],[11,r_za,r_Yg,E,33,[[[U]],[r_ya]]],[11,r_Fa,E,E,33,[[[T]],[T]]],[11,r_Aa,E,E,33,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,33,[[[r_ea]],[U]]],[11,r_Ba,E,E,33,[[[r_ea]],[T]]],[11,r_Ca,E,E,33,[[[r_ea]],[T]]],[11,r_Da,E,E,33,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,34,[[[U]],[r_ya]]],[11,r_Fa,E,E,34,[[[T]],[T]]],[11,r_Aa,E,E,34,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,34,[[[r_ea]],[U]]],[11,r_Ba,E,E,34,[[[r_ea]],[T]]],[11,r_Ca,E,E,34,[[[r_ea]],[T]]],[11,r_Da,E,E,34,[[[r_ea]],[r_Ea]]],[11,r_za,r_3h,E,41,[[[U]],[r_ya]]],[11,r_Fa,E,E,41,[[[T]],[T]]],[11,r_Aa,E,E,41,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,41,[[[r_ea]],[U]]],[11,r_Ba,E,E,41,[[[r_ea]],[T]]],[11,r_Ca,E,E,41,[[[r_ea]],[T]]],[11,r_Da,E,E,41,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,42,[[[U]],[r_ya]]],[11,r_Fa,E,E,42,[[[T]],[T]]],[11,r_Aa,E,E,42,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,42,[[[r_ea]],[U]]],[11,r_Ba,E,E,42,[[[r_ea]],[T]]],[11,r_Ca,E,E,42,[[[r_ea]],[T]]],[11,r_Da,E,E,42,[[[r_ea]],[r_Ea]]],[11,r_Ia,r_0h,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_hb,E,r_De,0,[[[r_4a]],[r_ya,[r_we]]]],[11,r_Ff,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ff,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ff,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ff,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Be,E,E,0,N],[11,r_Be,E,E,0,N],[11,r_Be,E,E,0,N],[11,r_Be,E,E,0,N],[11,"eq",E,E,0,[[[r_ea],[r_we]],[r_ja]]],[11,"ne",E,E,0,[[[r_ea],[r_we]],[r_ja]]],[11,"eq",E,E,35,[[[r_ea],[r_xe]],[r_ja]]],[11,"ne",E,E,35,[[[r_ea],[r_xe]],[r_ja]]],[11,r_Pe,E,E,0,[[[r_ea]],[r_va,[r_da]]]],[11,r_Ie,E,E,0,[[[r_ea]],[r_va,[r_sb]]]],[11,r_Qe,E,E,0,[[[r_ea]],[r_va,["u8"]]]],[11,r_Re,E,E,0,[[[r_ea]],[r_va,[r_Rc]]]],[11,r_Se,E,E,0,[[[r_ea]],[r_va,[r_vb]]]],[11,r_Te,E,E,0,[[[r_ea]],[r_va,[r_Ue]]]],[11,r_Je,E,E,0,[[[r_ea]],[r_va,["i8"]]]],[11,r_Ke,E,E,0,[[[r_ea]],[r_va,[r_If]]]],[11,r_Le,E,E,0,[[[r_ea]],[r_va,[r_yf]]]],[11,r_Me,E,E,0,[[[r_ea]],[r_va,[r_nf]]]],[11,r_Ve,E,E,0,[[[r_ea]],[r_va,[r_We]]]],[11,r_Ne,E,E,0,[[[r_ea]],[r_va,[r_Oe]]]],[11,r_Xe,E,E,0,[[[r_ea]],[r_va,[r_of]]]],[11,r_Ye,E,E,0,[[[r_ea]],[r_va,[r_pf]]]],[11,r_ge,E,E,0,[[],[r_we]]],[11,r_hf,E,E,0,[[[r_ea]],[r_ja]]],[11,r_Vi,E,E,0,[[["i"]],[r_we]]],[11,r_Vi,E,E,0,[[["i"]],[r_we]]],[11,"neg",E,E,0,[[[r_ea]],[r_we]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_ze,E,E,0,N],[11,r_ze,E,E,0,N],[11,r_ze,E,E,0,N],[11,r_ze,E,E,0,N],[11,r_Ae,E,E,0,N],[11,r_Ae,E,E,0,N],[11,r_Ae,E,E,0,N],[11,r_Ae,E,E,0,N],[11,r_rd,E,E,0,N],[11,r_rd,E,E,0,N],[11,r_rd,E,E,0,N],[11,r_rd,E,E,0,N],[11,r_ye,E,E,0,N],[11,r_ye,E,E,0,N],[11,r_ye,E,E,0,N],[11,r_ye,E,E,0,N],[11,r_jf,E,r_De,0,[[[r_4a],[r_vb]],[r_ya,[r_we]]]],[11,r_Xi,E,E,0,[[[r_ea]],[r_we]]],[11,r_Ia,E,E,35,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Hf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Hf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Hf,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Hf,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_5e,E,E,0,[[[r_da]],[r_va,[r_we]]]],[11,r_Ze,E,E,0,[[[r_sb]],[r_va,[r_we]]]],[11,r_6e,E,E,0,[[["u8"]],[r_va,[r_we]]]],[11,r_7e,E,E,0,[[[r_Rc]],[r_va,[r_we]]]],[11,r_8e,E,E,0,[[[r_vb]],[r_va,[r_we]]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va,[r_we]]]],[11,r_0e,E,E,0,[[["i8"]],[r_va,[r_we]]]],[11,r_1e,E,E,0,[[[r_If]],[r_va,[r_we]]]],[11,r_2e,E,E,0,[[[r_yf]],[r_va,[r_we]]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va,[r_we]]]],[11,r_af,E,E,0,[[[r_We]],[r_va,[r_we]]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va,[r_we]]]],[11,r_bf,E,E,0,[[[r_of]],[r_va,[r_we]]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va,[r_we]]]],[11,r_Ce,E,E,0,[[["i"]],[r_we]]],[11,r_Ce,E,E,0,[[["i"]],[r_we]]],[11,r_Fa,E,E,0,[[[U]],[r_va,[r_we]]]],[11,r_Na,E,E,0,[[],[r_we]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_He,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_He,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_He,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_He,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_6h,E,E,0,[[],[r_we]]],[11,r_if,E,E,0,[[[r_ea]],[r_ja]]],[11,r_db,E,E,0,[[[r_ea]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ia,E,E,35,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,"as_",E,E,0,[[[r_ea]],[U]]],[11,r_Fa,E,E,0,[[[T]],[r_we]]],[11,r_Fa,E,E,0,[[[T]],[r_we]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_ib,E,E,0,N],[11,r_Gf,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Gf,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Gf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Gf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ia,r_Yg,E,33,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Ia,E,E,34,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Ia,E,E,34,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Qf,r_1h,E,36,[[[r_ea]],[r_va]]],[11,r_Qf,r_2h,E,40,[[[r_ea]],[r_va]]],[11,r_Qf,E,E,38,[[[r_ea]],[r_va]]],[11,r_Pf,E,E,38,N],[11,r_Qf,E,E,37,[[[r_ea]],[r_va]]],[11,r_Pf,E,E,37,N],[11,r_Qf,E,E,39,[[[r_ea]],[r_va]]],[11,r_Of,E,E,37,[[[r_ea]],[r_va]]],[11,r_Of,E,E,38,[[[r_ea]],[r_va]]],[11,r_db,E,E,37,[[[r_ea]],[r_fa]]],[11,r_db,E,E,39,[[[r_ea]],[r_Mf]]],[11,r_db,E,E,40,[[[r_ea]],[r_Nf]]],[11,r_db,E,E,38,[[[r_ea]],[r_Lf]]],[11,r_hb,r_3h,r_Ui,41,[[[r_4a]],[r_ya,[r_lf,r_mf]]]],[11,r_Ff,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ff,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ff,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_Ff,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_Be,E,E,41,N],[11,r_Be,E,E,41,N],[11,r_Be,E,E,41,N],[11,r_Be,E,E,41,N],[11,"eq",E,E,41,[[[r_ea],[r_lf]],[r_ja]]],[11,"eq",E,E,42,[[[r_ea],[r_mf]],[r_ja]]],[11,"ne",E,E,42,[[[r_ea],[r_mf]],[r_ja]]],[11,r_ge,E,E,41,[[],[r_lf]]],[11,r_hf,E,E,41,[[[r_ea]],[r_ja]]],[11,r_Cf,E,E,41,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_Vi,E,E,41,[[["i"]],[r_lf]]],[11,r_Vi,E,E,41,[[["i"]],[r_lf]]],[11,r_gb,E,E,41,[[[r_ea],[r_lf]],[r_va,[r_fb]]]],[11,"neg",E,E,41,[[[r_ea]],[r_lf]]],[11,r_Af,E,E,41,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_ze,E,E,41,N],[11,r_ze,E,E,41,N],[11,r_ze,E,E,41,N],[11,r_ze,E,E,41,N],[11,r_Ae,E,E,41,N],[11,r_Ae,E,E,41,N],[11,r_Ae,E,E,41,N],[11,r_Ae,E,E,41,N],[11,r_rd,E,E,41,N],[11,r_rd,E,E,41,N],[11,r_rd,E,E,41,N],[11,r_rd,E,E,41,N],[11,r_ye,E,E,41,N],[11,r_ye,E,E,41,N],[11,r_ye,E,E,41,N],[11,r_ye,E,E,41,N],[11,r_qf,E,E,41,[[[r_ea],[r_If]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_yf]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_nf]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_vb]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_nf]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_vb]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_Rc]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_yf]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_Ue]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],["u8"]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_sb]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_da]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_sb]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],["i8"]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_Ue]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_If]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],["u8"]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_Rc]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],[r_da]],[r_lf]]],[11,r_qf,E,E,41,[[[r_ea],["i8"]],[r_lf]]],[11,r_jf,E,r_Wi,41,[[[r_4a],[r_vb]],[r_ya,[r_lf,r_mf]]]],[11,r_Xi,E,E,41,[[[r_ea]],[r_lf]]],[11,r_Ia,E,E,42,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Ia,E,E,41,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Hf,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_Hf,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Hf,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Hf,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_3e,E,E,41,[[[r_nf]],[r_va,[r_lf]]]],[11,r_4e,E,E,41,[[[r_Oe]],[r_va,[r_lf]]]],[11,r_9e,E,E,41,[[[r_Ue]],[r_va,[r_lf]]]],[11,r_af,E,E,41,[[[r_We]],[r_va,[r_lf]]]],[11,r_bf,E,E,41,[[[r_of]],[r_va,[r_lf]]]],[11,r_cf,E,E,41,[[[r_pf]],[r_va,[r_lf]]]],[11,r_Ce,E,E,41,[[["i"]],[r_lf]]],[11,r_Ce,E,E,41,[[["i"]],[r_lf]]],[11,r_zf,E,E,41,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_5h,E,E,41,[[[r_ea]],[r_lf]]],[11,r_Gb,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Eb,E,E,41,[[[r_ea]],[r_lf]]],[11,r_Df,E,E,41,[[[r_ea]],[r_ja]]],[11,r_Ef,E,E,41,[[[r_ea]],[r_ja]]],[11,r_fe,E,E,41,[[[r_ea],[r_lf]],[r_fb]]],[11,r_He,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_He,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_He,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_He,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_6h,E,E,41,[[],[r_lf]]],[11,r_if,E,E,41,[[[r_ea]],[r_ja]]],[11,r_db,E,E,41,[[[r_ea]],[r_lf]]],[11,r_db,E,E,42,[[[r_ea]],[r_mf]]],[11,r_Ge,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ge,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ge,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_Ge,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_Ia,E,r_Ti,41,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Ia,E,E,42,[[[r_ea],[r_Ha]],[r_ya,[r_4h]]]],[11,r_Ga,E,E,41,N],[11,r_Bf,E,E,41,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_Fa,E,E,41,N],[11,r_Fa,E,E,41,[[[T]],[r_lf]]],[11,r_ib,E,E,41,N],[11,r_Gf,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_Gf,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Gf,E,E,41,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Gf,E,E,41,[[[r_ea],[T]],[r_lf]]],[11,r_Hc,r_0h,r_Yk,0,[[[T],[T]],[r_we]]],[11,"i",E,r_Zk,0,[[],[r_we]]],[11,r_0k,E,r_1k,0,[[[r_ea]],[T]]],[11,r_2k,E,r_3k,0,[[[r_ea],[T]],[r_we]]],[11,r_4k,E,r_5k,0,[[[r_ea],[T]],[r_we]]],[11,"conj",E,r_6k,0,[[[r_ea]],[r_we]]],[11,r_Xi,E,r_7k,0,[[[r_ea]],[r_we]]],[11,r_df,E,r_8k,0,[[[r_ea]],[r_ja]]],[11,r_ef,E,r_9k,0,[[[r_ea]],[r_ja]]],[11,r_ff,E,r_al,0,[[[r_ea]],[r_ja]]],[11,r_gf,E,r_bl,0,[[[r_ea]],[r_ja]]],[11,r_Hc,r_1h,r_oi,36,[[[T]],[r_pi]]],[11,r_Hc,r_3h,r_vi,41,[[[T],[T]],[r_lf]]],[11,r_wi,E,r_xi,41,[[[T]],[r_lf]]],[11,r_yi,E,r_zi,41,[[[T],[T]],[r_lf]]],[11,r_Ai,E,r_Bi,41,[[[r_ea]],[T]]],[11,r_Ci,E,r_Di,41,[[[r_ea]],[T]]],[11,r_Ei,E,r_Fi,41,[[[r_ea]],[T]]],[11,r_Gi,E,r_Hi,41,[[[r_ea]],[r_ja]]],[11,r_Ii,E,r_Ji,41,[[[r_ea]],[r_lf]]],[11,r_xf,E,r_Ki,41,[[[r_ea]],[r_lf]]],[11,r_tf,E,r_Li,41,[[[r_ea]],[r_lf]]],[11,r_Mi,E,r_Ni,41,[[[r_ea]],[r_lf]]],[11,r_uf,E,r_Oi,41,[[[r_ea]],[r_lf]]],[11,r_vf,E,r_Pi,41,[[[r_ea]],[r_lf]]],[11,r_wf,E,r_Qi,41,[[[r_ea]],[r_lf]]],[11,r_qf,E,r_Ri,41,[[[r_ea],[r_yf]],[r_lf]]],[11,r_Si,E,E,41,[[["f"]],[r_va,[r_lf]]]]],"p":[[3,r_Ee],[8,r_te],[8,"Num"],[8,r_7h],[8,"One"],[8,r_9b],[8,r_Lb],[8,r_3b],[8,r_Tb],[8,r_Ub],[8,r_Vb],[8,r_Wb],[8,r_Sb],[8,r_Mb],[8,r_Nb],[8,r_Ob],[8,r_Pb],[8,"Pow"],[8,r_se],[8,r_Qb],[8,r_Rb],[8,r_Xb],[8,r_Yb],[8,r_Zb],[8,r_0b],[8,"Inv"],[8,r_1b],[8,r_2b],[8,r_4b],[8,r_5b],[8,r_6b],[8,r_7b],[8,r_8b],[4,r_Kb],[3,r_Jb],[3,r_Fe],[3,r_ue],[3,r_Rf],[3,r_Sf],[3,r_Tf],[3,r_Uf],[3,r_rf],[3,r_sf]]};
searchIndex[r_aa]={r_ac:"A macro for defining `#[cfg]` if-else statements.","i":[[14,r_aa,r_aa,E,N,N]],"p":[]};
searchIndex[r_ba]={r_ac:"A typesafe bitmask flag generator useful for sets of…","i":[[14,r_ba,r_ba,"The macro used to generate the flag structure.",N,N]],"p":[]};
searchIndex[r_ca]={r_ac:"Provides the abstraction of a bit field, which allows for…","i":[[8,r_qa,r_ca,"A generic trait which provides methods for extracting and…",N,N],[10,r_ga,E,"Returns the length, eg number of bits, in this bit field.",0,[[],[r_da]]],[10,r_ha,E,r_ia,0,[[[r_ea],[r_da]],[r_ja]]],[10,r_ka,E,r_la,0,[[[r_ea],[r_fa,[r_da]]],[r_ea]]],[10,r_ma,E,r_na,0,[[[r_ea],[r_da],[r_ja]],[r_ea]]],[10,r_oa,E,r_pa,0,[[[r_ea],[r_fa,[r_da]],[r_ea]],[r_ea]]],[8,r_ra,E,E,N,N],[10,r_ga,E,"Returns the length, eg number of bits, in this bit array.",1,[[[r_ea]],[r_da]]],[10,r_ha,E,r_ia,1,[[[r_ea],[r_da]],[r_ja]]],[10,r_ka,E,r_la,1,[[[r_ea],[r_fa,[r_da]]],[T]]],[10,r_ma,E,r_na,1,[[[r_ea],[r_da],[r_ja]]]],[10,r_oa,E,r_pa,1,[[[r_ea],[r_fa,[r_da]],[T]]]]],"p":[[8,r_qa],[8,r_ra]]};
searchIndex[r_cb]={r_ac:"A lightweight logging facade.","i":[[3,r_lb,r_cb,"The \"payload\" of a log message.",N,N],[3,r_mb,E,"Builder for `Record`.",N,N],[3,r_nb,E,"Metadata about a log message.",N,N],[3,r_ob,E,"Builder for `Metadata`.",N,N],[3,r_pb,E,"The type returned by [`set_logger`] if [`set_logger`] has…",N,N],[3,r_qb,E,"The type returned by [`from_str`] when the string doesn't…",N,N],[4,r_jb,E,"An enum representing the available verbosity levels of the…",N,N],[13,r_Ua,E,"The \"error\" level.",0,N],[13,"Warn",E,"The \"warn\" level.",0,N],[13,"Info",E,"The \"info\" level.",0,N],[13,r_Va,E,"The \"debug\" level.",0,N],[13,r_Wa,E,"The \"trace\" level.",0,N],[4,r_kb,E,"An enum representing the available verbosity level filters…",N,N],[13,"Off",E,"A level lower than all log levels.",1,N],[13,r_Ua,E,"Corresponds to the `Error` log level.",1,N],[13,"Warn",E,"Corresponds to the `Warn` log level.",1,N],[13,"Info",E,"Corresponds to the `Info` log level.",1,N],[13,r_Va,E,"Corresponds to the `Debug` log level.",1,N],[13,r_Wa,E,"Corresponds to the `Trace` log level.",1,N],[5,"set_max_level",E,"Sets the global maximum log level.",N,[[[r_Xa]]]],[5,"max_level",E,"Returns the current maximum log level.",N,[[],[r_Xa]]],[5,"set_logger",E,"Sets the global logger to a `&'static Log`.",N,[[[r_cb]],[r_ya,["setloggererror"]]]],[5,r_Xl,E,"Returns a reference to the logger.",N,[[],[r_cb]]],[17,"STATIC_MAX_LEVEL",E,"The statically resolved maximum log level.",N,N],[8,"Log",E,"A trait encapsulating the operations required of a logger.",N,N],[10,r_Yl,E,"Determines if a log message with the specified metadata…",2,[[[r_ea],[r_Za]],[r_ja]]],[10,r_cb,E,"Logs the `Record`.",2,[[[r_ea],[r_5a]]]],[10,r_ee,E,"Flushes any buffered records.",2,[[[r_ea]]]],[11,"max",E,"Returns the most verbose logging level.",0,[[],[r_Ya]]],[11,"to_level_filter",E,"Converts the `Level` to the equivalent `LevelFilter`.",0,[[[r_ea]],[r_Xa]]],[11,"max",E,"Returns the most verbose logging level filter.",1,[[],[r_Xa]]],[11,"to_level",E,"Converts `self` to the equivalent `Level`.",1,[[[r_ea]],[r_va,[r_Ya]]]],[11,r_6a,E,r_7a,3,[[],[r_0a]]],[11,"args",E,"The message body.",3,[[[r_ea]],[r_1a]]],[11,r_Za,E,"Metadata about the log directive.",3,[[[r_ea]],[r_Za]]],[11,r_Ya,E,r_8a,3,[[[r_ea]],[r_Ya]]],[11,r_2a,E,r_9a,3,[[[r_ea]],[r_4a]]],[11,r_3a,E,"The module path of the message.",3,[[[r_ea]],[r_va,[r_4a]]]],[11,"file",E,"The source file containing the message.",3,[[[r_ea]],[r_va,[r_4a]]]],[11,"line",E,"The line containing the message.",3,[[[r_ea]],[r_va,[r_vb]]]],[11,r_Hc,E,"Construct new `RecordBuilder`.",4,[[],[r_0a]]],[11,"args",E,"Set `args`.",4,[[[r_ea],[r_1a]],[r_0a]]],[11,r_Za,E,"Set `metadata`. Construct a `Metadata` object with…",4,[[[r_ea],[r_Za]],[r_0a]]],[11,r_Ya,E,"Set `Metadata::level`.",4,[[[r_ea],[r_Ya]],[r_0a]]],[11,r_2a,E,"Set `Metadata::target`",4,[[[r_ea],[r_4a]],[r_0a]]],[11,r_3a,E,"Set `module_path`",4,[[[r_ea],[r_va,[r_4a]]],[r_0a]]],[11,"file",E,"Set `file`",4,[[[r_ea],[r_va,[r_4a]]],[r_0a]]],[11,"line",E,"Set `line`",4,[[[r_ea],[r_va,[r_vb]]],[r_0a]]],[11,r_bb,E,"Invoke the builder and return a `Record`",4,[[[r_ea]],[r_5a]]],[11,r_6a,E,r_7a,5,[[],[r_ab]]],[11,r_Ya,E,r_8a,5,[[[r_ea]],[r_Ya]]],[11,r_2a,E,r_9a,5,[[[r_ea]],[r_4a]]],[11,r_Hc,E,"Construct a new `MetadataBuilder`.",6,[[],[r_ab]]],[11,r_Ya,E,"Setter for `level`.",6,[[[r_ea],[r_Ya]],[r_ab]]],[11,r_2a,E,"Setter for `target`.",6,[[[r_ea],[r_4a]],[r_ab]]],[11,r_bb,E,"Returns a `Metadata` object.",6,[[[r_ea]],[r_Za]]],[14,r_cb,E,"The standard logging macro.",N,N],[14,r_4h,E,"Logs a message at the error level.",N,N],[14,"warn",E,"Logs a message at the warn level.",N,N],[14,r_Zl,E,"Logs a message at the info level.",N,N],[14,"debug",E,"Logs a message at the debug level.",N,N],[14,"trace",E,"Logs a message at the trace level.",N,N],[14,"log_enabled",E,"Determines if a message logged at the specified level in…",N,N],[11,r_za,E,E,3,[[[U]],[r_ya]]],[11,r_Fa,E,E,3,[[[T]],[T]]],[11,r_Aa,E,E,3,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,3,[[[r_ea]],[U]]],[11,r_Ba,E,E,3,[[[r_ea]],[T]]],[11,r_Ca,E,E,3,[[[r_ea]],[T]]],[11,r_Da,E,E,3,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,4,[[[U]],[r_ya]]],[11,r_Fa,E,E,4,[[[T]],[T]]],[11,r_Aa,E,E,4,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,4,[[[r_ea]],[U]]],[11,r_Ba,E,E,4,[[[r_ea]],[T]]],[11,r_Ca,E,E,4,[[[r_ea]],[T]]],[11,r_Da,E,E,4,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,5,[[[U]],[r_ya]]],[11,r_Fa,E,E,5,[[[T]],[T]]],[11,r_Aa,E,E,5,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,5,[[[r_ea]],[U]]],[11,r_Ba,E,E,5,[[[r_ea]],[T]]],[11,r_Ca,E,E,5,[[[r_ea]],[T]]],[11,r_Da,E,E,5,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,6,[[[U]],[r_ya]]],[11,r_Fa,E,E,6,[[[T]],[T]]],[11,r_Aa,E,E,6,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,6,[[[r_ea]],[U]]],[11,r_Ba,E,E,6,[[[r_ea]],[T]]],[11,r_Ca,E,E,6,[[[r_ea]],[T]]],[11,r_Da,E,E,6,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,7,[[[U]],[r_ya]]],[11,r_Fa,E,E,7,[[[T]],[T]]],[11,r_Aa,E,E,7,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,7,[[[r_ea]],[U]]],[11,r_Ba,E,E,7,[[[r_ea]],[T]]],[11,r_Ca,E,E,7,[[[r_ea]],[T]]],[11,r_Da,E,E,7,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,8,[[[U]],[r_ya]]],[11,r_Fa,E,E,8,[[[T]],[T]]],[11,r_Aa,E,E,8,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,8,[[[r_ea]],[U]]],[11,r_Ba,E,E,8,[[[r_ea]],[T]]],[11,r_Ca,E,E,8,[[[r_ea]],[T]]],[11,r_Da,E,E,8,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_db,E,E,0,[[[r_ea]],[r_Ya]]],[11,r_db,E,E,1,[[[r_ea]],[r_Xa]]],[11,r_db,E,E,3,[[[r_ea]],[r_5a]]],[11,r_db,E,E,5,[[[r_ea]],[r_Za]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,7,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,8,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,3,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,4,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,5,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,6,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,7,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,8,[[[r_ea],[r_Ha]],[r_ya]]],[11,"eq",E,E,0,[[[r_ea],[r_Ya]],[r_ja]]],[11,"eq",E,E,0,[[[r_ea],[r_Xa]],[r_ja]]],[11,"eq",E,E,1,[[[r_ea],[r_Xa]],[r_ja]]],[11,"eq",E,E,1,[[[r_ea],[r_Ya]],[r_ja]]],[11,"eq",E,E,5,[[[r_ea],[r_Za]],[r_ja]]],[11,"ne",E,E,5,[[[r_ea],[r_Za]],[r_ja]]],[11,"eq",E,E,6,[[[r_ea],[r_ab]],[r_ja]]],[11,"ne",E,E,6,[[[r_ea],[r_ab]],[r_ja]]],[11,"eq",E,E,8,[[[r_ea],[r_eb]],[r_ja]]],[11,"ne",E,E,8,[[[r_ea],[r_eb]],[r_ja]]],[11,r_fe,E,E,0,[[[r_ea],[r_Ya]],[r_fb]]],[11,r_fe,E,E,1,[[[r_ea],[r_Xa]],[r_fb]]],[11,r_fe,E,E,5,[[[r_ea],[r_Za]],[r_fb]]],[11,r_fe,E,E,6,[[[r_ea],[r_ab]],[r_fb]]],[11,r_gb,E,E,0,[[[r_ea],[r_Ya]],[r_va,[r_fb]]]],[11,"lt",E,E,0,[[[r_ea],[r_Ya]],[r_ja]]],[11,"le",E,E,0,[[[r_ea],[r_Ya]],[r_ja]]],[11,"gt",E,E,0,[[[r_ea],[r_Ya]],[r_ja]]],[11,"ge",E,E,0,[[[r_ea],[r_Ya]],[r_ja]]],[11,r_gb,E,E,0,[[[r_ea],[r_Xa]],[r_va,[r_fb]]]],[11,"lt",E,E,0,[[[r_ea],[r_Xa]],[r_ja]]],[11,"le",E,E,0,[[[r_ea],[r_Xa]],[r_ja]]],[11,"gt",E,E,0,[[[r_ea],[r_Xa]],[r_ja]]],[11,"ge",E,E,0,[[[r_ea],[r_Xa]],[r_ja]]],[11,r_gb,E,E,1,[[[r_ea],[r_Xa]],[r_va,[r_fb]]]],[11,"lt",E,E,1,[[[r_ea],[r_Xa]],[r_ja]]],[11,"le",E,E,1,[[[r_ea],[r_Xa]],[r_ja]]],[11,"gt",E,E,1,[[[r_ea],[r_Xa]],[r_ja]]],[11,"ge",E,E,1,[[[r_ea],[r_Xa]],[r_ja]]],[11,r_gb,E,E,1,[[[r_ea],[r_Ya]],[r_va,[r_fb]]]],[11,"lt",E,E,1,[[[r_ea],[r_Ya]],[r_ja]]],[11,"le",E,E,1,[[[r_ea],[r_Ya]],[r_ja]]],[11,"gt",E,E,1,[[[r_ea],[r_Ya]],[r_ja]]],[11,"ge",E,E,1,[[[r_ea],[r_Ya]],[r_ja]]],[11,r_gb,E,E,5,[[[r_ea],[r_Za]],[r_va,[r_fb]]]],[11,"lt",E,E,5,[[[r_ea],[r_Za]],[r_ja]]],[11,"le",E,E,5,[[[r_ea],[r_Za]],[r_ja]]],[11,"gt",E,E,5,[[[r_ea],[r_Za]],[r_ja]]],[11,"ge",E,E,5,[[[r_ea],[r_Za]],[r_ja]]],[11,r_gb,E,E,6,[[[r_ea],[r_ab]],[r_va,[r_fb]]]],[11,"lt",E,E,6,[[[r_ea],[r_ab]],[r_ja]]],[11,"le",E,E,6,[[[r_ea],[r_ab]],[r_ja]]],[11,"gt",E,E,6,[[[r_ea],[r_ab]],[r_ja]]],[11,"ge",E,E,6,[[[r_ea],[r_ab]],[r_ja]]],[11,r_hb,E,E,0,[[[r_4a]],[r_ya,[r_Ya]]]],[11,r_hb,E,E,1,[[[r_4a]],[r_ya,[r_Xa]]]],[11,r_ib,E,E,0,N],[11,r_ib,E,E,1,N],[11,r_ib,E,E,5,N],[11,r_ib,E,E,6,N]],"p":[[4,r_jb],[4,r_kb],[8,"Log"],[3,r_lb],[3,r_mb],[3,r_nb],[3,r_ob],[3,r_pb],[3,r_qb]]};
searchIndex[r_hc]={r_ac:E,"i":[[3,r_tc,r_hc,E,N,N],[3,r_nc,E,E,N,N],[12,r_0l,E,E,0,N],[12,r_1l,E,E,0,N],[12,"state",E,"The state of this processor. Always check that the…",0,N],[12,r_2l,E,"Whether this processor is the Bootstrap Processor (BSP),…",0,N],[3,r_oc,E,"Describes a physical mapping created by…",N,N],[12,"physical_start",E,E,1,N],[12,"virtual_start",E,E,1,N],[12,"region_length",E,E,1,N],[12,"mapped_length",E,E,1,N],[3,r_Cc,E,"All the information from parsing the static tables. This…",N,N],[4,r_pc,E,E,N,N],[13,"EndOfStream",E,E,2,N],[13,"UnexpectedByte",E,E,2,N],[13,"IncompatibleValueConversion",E,E,2,N],[13,"InvalidPath",E,E,2,N],[13,"InvalidFieldFlags",E,E,2,N],[13,"InvalidNameSeg",E,E,2,N],[13,"NeedsBacktrack",E,"This is a special error type that marks that the parser…",2,N],[4,r_qc,E,E,N,N],[13,"UnexpectedEntry",E,E,3,N],[13,"InterruptOverrideEntryHasInvalidBus",E,E,3,N],[13,"InvalidLocalNmiLine",E,E,3,N],[13,"NoLocalNmiLineSpecified",E,E,3,N],[13,"MpsIntiInvalidPolarity",E,E,3,N],[13,"MpsIntiInvalidTriggerMode",E,E,3,N],[4,r_rc,E,E,N,N],[13,"RsdpIncorrectSignature",E,E,4,N],[13,"RsdpInvalidOemId",E,E,4,N],[13,"RsdpInvalidChecksum",E,E,4,N],[13,"NoValidRsdp",E,E,4,N],[13,"SdtInvalidSignature",E,E,4,N],[13,"SdtInvalidOemId",E,E,4,N],[13,"SdtInvalidTableId",E,E,4,N],[13,"SdtInvalidChecksum",E,E,4,N],[13,"InvalidAmlTable",E,E,4,N],[13,"InvalidMadt",E,E,4,N],[4,r_sc,E,E,N,N],[13,"Disabled",E,"A processor in this state is unusable, and you must not…",5,N],[13,"WaitingForSipi",E,"A processor waiting for a SIPI (Startup Inter-processor…",5,N],[13,"Running",E,"A Running processor is currently brought up and running…",5,N],[5,"search_for_rsdp_bios",E,"This is the entry point of `acpi` if you have no…",N,[[["h"]],[r_ya,[r_bc,r_cc]]]],[5,"parse_rsdp",E,"This is the entry point of `acpi` if you have the physical…",N,[[["h"],[r_da]],[r_ya,[r_bc,r_cc]]]],[5,"parse_rsdt",E,"This is the entry point of `acpi` if you already have the…",N,[[["h"],["u8"],[r_da]],[r_ya,[r_bc,r_cc]]]],[11,"parse_aml_tables",E,E,6,[[[r_bc],["h"]],[r_ya,["amlnamespace",r_cc]]]],[0,"interrupt",E,E,N,N],[3,r_uc,r_lc,E,N,N],[12,"id",E,E,7,N],[12,"address",E,E,7,N],[12,"global_system_interrupt_base",E,E,7,N],[3,r_vc,E,"Describes a difference in the mapping of an ISA interrupt…",N,N],[12,"isa_source",E,E,8,N],[12,r_dc,E,E,8,N],[12,r_ec,E,E,8,N],[12,r_fc,E,E,8,N],[3,r_wc,E,"Describes a Global System Interrupt that should be enabled…",N,N],[12,r_dc,E,E,9,N],[12,r_ec,E,E,9,N],[12,r_fc,E,E,9,N],[4,r_xc,E,E,N,N],[13,"Lint0",E,E,10,N],[13,"Lint1",E,E,10,N],[4,r_yc,E,E,N,N],[13,r_gc,E,E,11,N],[13,"ActiveHigh",E,E,11,N],[13,"ActiveLow",E,E,11,N],[4,r_zc,E,E,N,N],[13,r_gc,E,E,12,N],[13,"Edge",E,E,12,N],[13,r_jb,E,E,12,N],[4,r_Ac,E,E,N,N],[13,"Pic",E,"This model is only chosen when a newer one can not be…",13,N],[13,"Apic",E,"Describes an interrupt controller based around the…",13,N],[12,"local_apic_address","acpi::interrupt::InterruptModel",E,13,N],[12,"io_apics",E,E,13,N],[12,"local_apic_nmi_line",E,E,13,N],[12,"interrupt_source_overrides",E,E,13,N],[12,"nmi_sources",E,E,13,N],[12,"also_has_legacy_pics",E,"If this field is set, you must remap and mask all the…",13,N],[8,r_Bc,r_hc,"An implementation of this trait must be provided to allow…",N,N],[10,r_Dl,E,"Given a starting physical address and a size, map a region…",14,[[[r_ea],[r_da],[r_da]],[r_ic]]],[10,r_El,E,"Unmap the given physical mapping. Safe because we consume…",14,[[[r_ea],[r_ic]]]],[11,"boot_processor",E,"A description of the boot processor. Until you bring any…",15,[[[r_ea]],[r_va]]],[11,"application_processors",E,"Descriptions of each of the application processors. These…",15,[[[r_ea]],["vec"]]],[11,"interrupt_model",E,"The interrupt model supported by this system.",15,[[[r_ea]],[r_va]]],[14,"parser_trace",E,"Easy macro for controlling whether debug output is printed…",N,N],[14,"parse_any_of",E,"This macro takes a parser and one or more parsing…",N,N],[14,"check_attempt",E,"This macro wraps parselets that check if we're parsing the…",N,N],[11,r_za,E,E,6,[[[U]],[r_ya]]],[11,r_Fa,E,E,6,[[[T]],[T]]],[11,r_Aa,E,E,6,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,6,[[[r_ea]],[U]]],[11,r_Ba,E,E,6,[[[r_ea]],[T]]],[11,r_Ca,E,E,6,[[[r_ea]],[T]]],[11,r_Da,E,E,6,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,0,[[[r_ea]],[T]]],[11,r_kc,E,E,0,N],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,15,[[[U]],[r_ya]]],[11,r_Fa,E,E,15,[[[T]],[T]]],[11,r_Aa,E,E,15,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,15,[[[r_ea]],[U]]],[11,r_Ba,E,E,15,[[[r_ea]],[T]]],[11,r_Ca,E,E,15,[[[r_ea]],[T]]],[11,r_Da,E,E,15,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,2,[[[U]],[r_ya]]],[11,r_Fa,E,E,2,[[[T]],[T]]],[11,r_Aa,E,E,2,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,2,[[[r_ea]],[U]]],[11,r_Ba,E,E,2,[[[r_ea]],[T]]],[11,r_Ca,E,E,2,[[[r_ea]],[T]]],[11,r_Da,E,E,2,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,3,[[[U]],[r_ya]]],[11,r_Fa,E,E,3,[[[T]],[T]]],[11,r_Aa,E,E,3,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,3,[[[r_ea]],[U]]],[11,r_Ba,E,E,3,[[[r_ea]],[T]]],[11,r_Ca,E,E,3,[[[r_ea]],[T]]],[11,r_Da,E,E,3,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,4,[[[U]],[r_ya]]],[11,r_Fa,E,E,4,[[[T]],[T]]],[11,r_Aa,E,E,4,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,4,[[[r_ea]],[U]]],[11,r_Ba,E,E,4,[[[r_ea]],[T]]],[11,r_Ca,E,E,4,[[[r_ea]],[T]]],[11,r_Da,E,E,4,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,5,[[[U]],[r_ya]]],[11,r_Fa,E,E,5,[[[T]],[T]]],[11,r_Aa,E,E,5,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,5,[[[r_ea]],[U]]],[11,r_Ba,E,E,5,[[[r_ea]],[T]]],[11,r_Ca,E,E,5,[[[r_ea]],[T]]],[11,r_Da,E,E,5,[[[r_ea]],[r_Ea]]],[11,r_jc,E,E,5,[[[r_ea]],[T]]],[11,r_kc,E,E,5,N],[11,r_za,r_lc,E,7,[[[U]],[r_ya]]],[11,r_Fa,E,E,7,[[[T]],[T]]],[11,r_Aa,E,E,7,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,7,[[[r_ea]],[U]]],[11,r_Ba,E,E,7,[[[r_ea]],[T]]],[11,r_Ca,E,E,7,[[[r_ea]],[T]]],[11,r_Da,E,E,7,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,8,[[[U]],[r_ya]]],[11,r_Fa,E,E,8,[[[T]],[T]]],[11,r_Aa,E,E,8,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,8,[[[r_ea]],[U]]],[11,r_Ba,E,E,8,[[[r_ea]],[T]]],[11,r_Ca,E,E,8,[[[r_ea]],[T]]],[11,r_Da,E,E,8,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,9,[[[U]],[r_ya]]],[11,r_Fa,E,E,9,[[[T]],[T]]],[11,r_Aa,E,E,9,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,9,[[[r_ea]],[U]]],[11,r_Ba,E,E,9,[[[r_ea]],[T]]],[11,r_Ca,E,E,9,[[[r_ea]],[T]]],[11,r_Da,E,E,9,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,10,[[[U]],[r_ya]]],[11,r_Fa,E,E,10,[[[T]],[T]]],[11,r_Aa,E,E,10,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,10,[[[r_ea]],[U]]],[11,r_Ba,E,E,10,[[[r_ea]],[T]]],[11,r_Ca,E,E,10,[[[r_ea]],[T]]],[11,r_Da,E,E,10,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,11,[[[U]],[r_ya]]],[11,r_Fa,E,E,11,[[[T]],[T]]],[11,r_Aa,E,E,11,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,11,[[[r_ea]],[U]]],[11,r_Ba,E,E,11,[[[r_ea]],[T]]],[11,r_Ca,E,E,11,[[[r_ea]],[T]]],[11,r_Da,E,E,11,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,12,[[[U]],[r_ya]]],[11,r_Fa,E,E,12,[[[T]],[T]]],[11,r_Aa,E,E,12,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,12,[[[r_ea]],[U]]],[11,r_Ba,E,E,12,[[[r_ea]],[T]]],[11,r_Ca,E,E,12,[[[r_ea]],[T]]],[11,r_Da,E,E,12,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,13,[[[U]],[r_ya]]],[11,r_Fa,E,E,13,[[[T]],[T]]],[11,r_Aa,E,E,13,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,13,[[[r_ea]],[U]]],[11,r_Ba,E,E,13,[[[r_ea]],[T]]],[11,r_Ca,E,E,13,[[[r_ea]],[T]]],[11,r_Da,E,E,13,[[[r_ea]],[r_Ea]]],[11,r_db,r_hc,E,5,[[[r_ea]],[r_mc]]],[11,r_db,E,E,0,[[[r_ea]],[r_3l]]],[11,r_Ia,E,E,2,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_lc,E,7,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,10,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,11,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,12,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,8,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,9,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,13,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,r_hc,E,3,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,4,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,5,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,15,[[[r_ea],[r_Ha]],[r_ya]]],[11,"eq",E,E,5,[[[r_ea],[r_mc]],[r_ja]]],[11,r_Ja,E,E,1,[[[r_ea]],[T]]]],"p":[[3,r_nc],[3,r_oc],[4,r_pc],[4,r_qc],[4,r_rc],[4,r_sc],[3,r_tc],[3,r_uc],[3,r_vc],[3,r_wc],[4,r_xc],[4,r_yc],[4,r_zc],[4,r_Ac],[8,r_Bc],[3,r_Cc]]};
searchIndex[r_he]={r_ac:"Integer trait and functions.","i":[[3,r_ue,r_he,r_ci,N,N],[5,r_qe,E,r_ke,N,[[[T]],[T]]],[5,r_re,E,r_le,N,[[[T]],[T]]],[5,r_ie,E,r_je,N,[[[T],[r_vb]],[T]]],[5,r_oe,E,r_di,N,N],[5,r_me,E,r_ei,N,[[[T],[T]],[T]]],[5,r_ne,E,r_fi,N,[[[T],[T]],[T]]],[5,r_pe,E,r_gi,N,N],[5,"gcd",E,r_hi,N,[[[T],[T]],[T]]],[5,"lcm",E,r_ii,N,[[[T],[T]],[T]]],[5,r_ji,E,r_ki,N,[[[T],[T]],[T]]],[5,r_li,E,r_mi,N,N],[8,r_se,E,r_ni,N,N],[10,r_ie,E,r_je,0,[[[r_ea],[r_vb]],[r_ea]]],[11,r_qe,E,r_ke,0,[[[r_ea]],[r_ea]]],[11,r_re,E,r_le,0,[[[r_ea]],[r_ea]]],[8,r_te,E,E,N,N],[10,r_me,E,r_zg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,r_ne,E,r_Ag,1,[[[r_ea],[r_ea]],[r_ea]]],[10,"gcd",E,r_Bg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,"lcm",E,r_Cg,1,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Dg,E,r_Eg,1,[[[r_ea],[r_ea]],[r_ja]]],[10,r_Fg,E,r_Gg,1,[[[r_ea],[r_ea]],[r_ja]]],[10,r_Hg,E,r_Ig,1,[[[r_ea]],[r_ja]]],[10,r_Jg,E,r_Kg,1,[[[r_ea]],[r_ja]]],[10,r_oe,E,r_Lg,1,N],[11,r_pe,E,r_Mg,1,N],[11,r_Hc,E,r_oi,2,[[[T]],[r_pi]]],[11,r_za,E,E,2,[[[U]],[r_ya]]],[11,r_Fa,E,E,2,[[[T]],[T]]],[11,r_Kf,E,E,2,[[[r_ea]],["i"]]],[11,r_Aa,E,E,2,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,2,[[[r_ea]],[U]]],[11,r_Ba,E,E,2,[[[r_ea]],[T]]],[11,r_Ca,E,E,2,[[[r_ea]],[T]]],[11,r_Da,E,E,2,[[[r_ea]],[r_Ea]]],[11,r_Qf,E,E,2,[[[r_ea]],[r_va]]],[11,r_qe,E,r_ke,0,[[[r_ea]],[r_ea]]],[11,r_re,E,r_le,0,[[[r_ea]],[r_ea]]]],"p":[[8,r_se],[8,r_te],[3,r_ue]]};
searchIndex[r_kf]={r_ac:"Rational numbers","i":[[3,r_rf,r_kf,r_qi,N,N],[3,r_sf,E,E,N,N],[6,r_Yh,E,r_Zh,N,N],[6,r_ri,E,r_si,N,N],[6,r_ti,E,r_ui,N,N],[11,r_Hc,E,r_vi,0,[[[T],[T]],[r_lf]]],[11,r_wi,E,r_xi,0,[[[T]],[r_lf]]],[11,r_yi,E,r_zi,0,[[[T],[T]],[r_lf]]],[11,r_Ai,E,r_Bi,0,[[[r_ea]],[T]]],[11,r_Ci,E,r_Di,0,[[[r_ea]],[T]]],[11,r_Ei,E,r_Fi,0,[[[r_ea]],[T]]],[11,r_Gi,E,r_Hi,0,[[[r_ea]],[r_ja]]],[11,r_Ii,E,r_Ji,0,[[[r_ea]],[r_lf]]],[11,r_xf,E,r_Ki,0,[[[r_ea]],[r_lf]]],[11,r_tf,E,r_Li,0,[[[r_ea]],[r_lf]]],[11,r_Mi,E,r_Ni,0,[[[r_ea]],[r_lf]]],[11,r_uf,E,r_Oi,0,[[[r_ea]],[r_lf]]],[11,r_vf,E,r_Pi,0,[[[r_ea]],[r_lf]]],[11,r_wf,E,r_Qi,0,[[[r_ea]],[r_lf]]],[11,r_qf,E,r_Ri,0,[[[r_ea],[r_yf]],[r_lf]]],[11,r_Si,E,E,0,[[["f"]],[r_va,[r_lf]]]],[11,r_za,E,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_db,E,E,0,[[[r_ea]],[r_lf]]],[11,r_db,E,E,1,[[[r_ea]],[r_mf]]],[11,r_Ia,E,r_Ti,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,"eq",E,E,0,[[[r_ea],[r_ea]],[r_ja]]],[11,"eq",E,E,1,[[[r_ea],[r_mf]],[r_ja]]],[11,"ne",E,E,1,[[[r_ea],[r_mf]],[r_ja]]],[11,r_fe,E,E,0,[[[r_ea],[r_ea]],[r_fb]]],[11,r_gb,E,E,0,[[[r_ea],[r_ea]],[r_va,[r_fb]]]],[11,r_hb,E,r_Ui,0,[[[r_4a]],[r_ya,[r_lf,r_mf]]]],[11,r_ib,E,E,0,[[[r_ea],["h"]]]],[11,r_Fa,E,E,0,[[[T]],[r_lf]]],[11,r_Fa,E,E,0,N],[11,r_Ge,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ge,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_Ge,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ge,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_He,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_He,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_He,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_He,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_Ff,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ff,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_Ff,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Ff,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_Gf,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Gf,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_Gf,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Gf,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_Hf,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Hf,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,r_Hf,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Hf,E,E,0,[[[r_ea],[T]],[r_lf]]],[11,"neg",E,E,0,[[[r_ea]],[r_lf]]],[11,r_rd,E,E,0,[[[r_ea],[r_lf]]]],[11,r_rd,E,E,0,[[[r_ea],[T]]]],[11,r_rd,E,E,0,[[[r_ea],[r_lf]]]],[11,r_rd,E,E,0,[[[r_ea],[T]]]],[11,r_ye,E,E,0,[[[r_ea],[r_lf]]]],[11,r_ye,E,E,0,[[[r_ea],[T]]]],[11,r_ye,E,E,0,[[[r_ea],[r_lf]]]],[11,r_ye,E,E,0,[[[r_ea],[T]]]],[11,r_ze,E,E,0,[[[r_ea],[r_lf]]]],[11,r_ze,E,E,0,[[[r_ea],[T]]]],[11,r_ze,E,E,0,[[[r_ea],[r_lf]]]],[11,r_ze,E,E,0,[[[r_ea],[T]]]],[11,r_Ae,E,E,0,[[[r_ea],[r_lf]]]],[11,r_Ae,E,E,0,[[[r_ea],[T]]]],[11,r_Ae,E,E,0,[[[r_ea],[r_lf]]]],[11,r_Ae,E,E,0,[[[r_ea],[T]]]],[11,r_Be,E,E,0,[[[r_ea],[r_lf]]]],[11,r_Be,E,E,0,[[[r_ea],[T]]]],[11,r_Be,E,E,0,[[[r_ea],[r_lf]]]],[11,r_Be,E,E,0,[[[r_ea],[T]]]],[11,r_Ce,E,E,0,[[["i"]],[r_ea]]],[11,r_Ce,E,E,0,[[["i"]],[r_ea]]],[11,r_Vi,E,E,0,[[["i"]],[r_ea]]],[11,r_Vi,E,E,0,[[["i"]],[r_ea]]],[11,r_Ga,E,E,0,N],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_jf,E,r_Wi,0,[[[r_4a],[r_vb]],[r_ya,[r_lf,r_mf]]]],[11,r_ge,E,E,0,[[],[r_lf]]],[11,r_hf,E,E,0,[[[r_ea]],[r_ja]]],[11,r_6h,E,E,0,[[],[r_lf]]],[11,r_if,E,E,0,[[[r_ea]],[r_ja]]],[11,r_Bf,E,E,0,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_Cf,E,E,0,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_Af,E,E,0,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_zf,E,E,0,[[[r_ea],[r_lf]],[r_va,[r_lf]]]],[11,r_Xi,E,E,0,[[[r_ea]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],["i8"]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],["i8"]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_If]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_If]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_yf]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_yf]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_nf]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_nf]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_sb]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_sb]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],["u8"]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],["u8"]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_Rc]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_Rc]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_vb]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_vb]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_Ue]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_Ue]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_da]],[r_lf]]],[11,r_qf,E,E,0,[[[r_ea],[r_da]],[r_lf]]],[11,r_5h,E,E,0,[[[r_ea]],[r_lf]]],[11,r_Gb,E,E,0,[[[r_ea],[r_lf]],[r_lf]]],[11,r_Eb,E,E,0,[[[r_ea]],[r_lf]]],[11,r_Df,E,E,0,[[[r_ea]],[r_ja]]],[11,r_Ef,E,E,0,[[[r_ea]],[r_ja]]]],"p":[[3,r_rf],[3,r_sf]]};
searchIndex[r_rb]={r_ac:"Numeric traits for generic mathematics","i":[[3,r_Jb,r_rb,E,N,N],[12,"kind",E,E,0,N],[4,r_Kb,E,E,N,N],[13,r_Yi,E,E,1,N],[13,r_Zi,E,E,1,N],[5,r_Wh,E,r_Xh,N,[[[T],[T],[T]],[T]]],[0,r_0i,E,E,N,N],[8,r_Lb,"num_traits::bounds",r_Vg,N,N],[10,r_tb,E,r_Wg,2,[[],[r_ea]]],[10,r_ub,E,r_Xg,2,[[],[r_ea]]],[0,r_rg,r_rb,E,N,N],[5,r_rg,"num_traits::cast",r_sg,N,[[[T]],[r_va]]],[8,r_Mb,E,r_Vf,N,N],[11,r_Ie,E,r_Wf,3,[[[r_ea]],[r_va,[r_sb]]]],[11,r_Je,E,r_Xf,3,[[[r_ea]],[r_va,["i8"]]]],[11,r_Ke,E,r_Yf,3,[[[r_ea]],[r_va,[r_If]]]],[11,r_Le,E,r_Zf,3,[[[r_ea]],[r_va,[r_yf]]]],[10,r_Me,E,r_0f,3,[[[r_ea]],[r_va,[r_nf]]]],[11,r_Ne,E,r_1f,3,[[[r_ea]],[r_va,[r_Oe]]]],[11,r_Pe,E,r_2f,3,[[[r_ea]],[r_va,[r_da]]]],[11,r_Qe,E,r_3f,3,[[[r_ea]],[r_va,["u8"]]]],[11,r_Re,E,r_4f,3,[[[r_ea]],[r_va,[r_Rc]]]],[11,r_Se,E,r_5f,3,[[[r_ea]],[r_va,[r_vb]]]],[10,r_Te,E,r_6f,3,[[[r_ea]],[r_va,[r_Ue]]]],[11,r_Ve,E,r_7f,3,[[[r_ea]],[r_va,[r_We]]]],[11,r_Xe,E,r_8f,3,[[[r_ea]],[r_va,[r_of]]]],[11,r_Ye,E,r_9f,3,[[[r_ea]],[r_va,[r_pf]]]],[8,r_Nb,E,r_ag,N,N],[11,r_Ze,E,r_bg,4,[[[r_sb]],[r_va]]],[11,r_0e,E,r_cg,4,[[["i8"]],[r_va]]],[11,r_1e,E,r_dg,4,[[[r_If]],[r_va]]],[11,r_2e,E,r_eg,4,[[[r_yf]],[r_va]]],[10,r_3e,E,r_fg,4,[[[r_nf]],[r_va]]],[11,r_4e,E,r_gg,4,[[[r_Oe]],[r_va]]],[11,r_5e,E,r_hg,4,[[[r_da]],[r_va]]],[11,r_6e,E,r_ig,4,[[["u8"]],[r_va]]],[11,r_7e,E,r_jg,4,[[[r_Rc]],[r_va]]],[11,r_8e,E,r_kg,4,[[[r_vb]],[r_va]]],[10,r_9e,E,r_lg,4,[[[r_Ue]],[r_va]]],[11,r_af,E,r_mg,4,[[[r_We]],[r_va]]],[11,r_bf,E,r_ng,4,[[[r_of]],[r_va]]],[11,r_cf,E,r_og,4,[[[r_pf]],[r_va]]],[8,r_Ob,E,r_pg,N,N],[10,r_Fa,E,r_qg,5,[[[T]],[r_va]]],[8,r_Pb,E,r_Zg,N,N],[10,"as_",E,r_0g,6,[[[r_ea]],[T]]],[0,r_1i,r_rb,E,N,N],[8,r_Qb,"num_traits::float",r_2i,N,N],[10,r_3i,E,r_4i,7,[[],[r_ea]]],[10,r_5i,E,r_6i,7,[[],[r_ea]]],[10,"nan",E,r_7i,7,[[],[r_ea]]],[10,r_8i,E,r_9i,7,[[],[r_ea]]],[10,r_tb,E,r_aj,7,[[],[r_ea]]],[10,r_bj,E,r_cj,7,[[],[r_ea]]],[10,r_dj,E,r_ej,7,[[],[r_ea]]],[10,r_ub,E,r_fj,7,[[],[r_ea]]],[11,r_df,E,r_gj,7,[[[r_ea]],[r_ja]]],[11,r_ef,E,r_hj,7,[[[r_ea]],[r_ja]]],[11,r_ff,E,r_ij,7,[[[r_ea]],[r_ja]]],[11,r_gf,E,r_jj,7,[[[r_ea]],[r_ja]]],[10,r_kj,E,r_lj,7,[[[r_ea]],[r_mj]]],[11,r_tf,E,r_nj,7,[[[r_ea]],[r_ea]]],[11,r_Mi,E,r_oj,7,[[[r_ea]],[r_ea]]],[11,r_uf,E,r_pj,7,[[[r_ea]],[r_ea]]],[11,r_vf,E,r_qj,7,[[[r_ea]],[r_ea]]],[11,r_wf,E,r_rj,7,[[[r_ea]],[r_ea]]],[11,r_5h,E,r_sj,7,[[[r_ea]],[r_ea]]],[11,r_Eb,E,r_tj,7,[[[r_ea]],[r_ea]]],[11,r_uj,E,r_vj,7,[[[r_ea]],[r_ja]]],[11,r_wj,E,r_xj,7,[[[r_ea]],[r_ja]]],[11,"min",E,r_yj,7,[[[r_ea],[r_ea]],[r_ea]]],[11,"max",E,r_zj,7,[[[r_ea],[r_ea]],[r_ea]]],[11,r_xf,E,r_Aj,7,[[[r_ea]],[r_ea]]],[11,"powi",E,r_Bj,7,[[[r_ea],[r_yf]],[r_ea]]],[10,r_Cj,E,r_Dj,7,[[[r_ea]],[r_ea]]],[10,r_Ej,E,r_Fj,7,[[[r_ea]],[r_ea]]],[10,r_Gj,E,r_Hj,7,N],[8,r_Rb,E,E,N,N],[10,"E",E,r_Ij,8,[[],[r_ea]]],[10,r_Jj,E,r_Kj,8,[[],[r_ea]]],[10,r_Lj,E,r_Mj,8,[[],[r_ea]]],[10,r_Nj,E,r_Oj,8,[[],[r_ea]]],[10,r_Pj,E,r_Qj,8,[[],[r_ea]]],[10,r_Rj,E,r_Sj,8,[[],[r_ea]]],[10,r_Tj,E,r_Uj,8,[[],[r_ea]]],[10,r_Vj,E,r_Wj,8,[[],[r_ea]]],[10,r_Xj,E,r_Yj,8,[[],[r_ea]]],[10,r_Zj,E,r_0j,8,[[],[r_ea]]],[10,r_1j,E,r_2j,8,[[],[r_ea]]],[10,"LN_2",E,r_3j,8,[[],[r_ea]]],[10,r_4j,E,r_5j,8,[[],[r_ea]]],[10,r_6j,E,r_7j,8,[[],[r_ea]]],[10,"PI",E,r_8j,8,[[],[r_ea]]],[10,r_9j,E,r_ak,8,[[],[r_ea]]],[0,r_bk,r_rb,E,N,N],[5,r_ge,"num_traits::identities",r_7g,N,[[],[T]]],[5,r_6h,E,r_8g,N,[[],[T]]],[8,r_7h,E,r_1g,N,N],[10,r_ge,E,r_2g,9,[[],[r_ea]]],[10,r_hf,E,r_3g,9,[[[r_ea]],[r_ja]]],[8,"One",E,r_4g,N,N],[10,r_6h,E,r_5g,10,[[],[r_ea]]],[11,r_if,E,r_6g,10,[[[r_ea]],[r_ja]]],[0,"int",r_rb,E,N,N],[8,r_Sb,"num_traits::int",E,N,N],[10,r_9g,E,r_ah,11,[[[r_ea]],[r_vb]]],[10,r_bh,E,r_ch,11,[[[r_ea]],[r_vb]]],[10,r_dh,E,r_eh,11,[[[r_ea]],[r_vb]]],[10,r_fh,E,r_gh,11,[[[r_ea]],[r_vb]]],[10,r_hh,E,r_wb,11,[[[r_ea],[r_vb]],[r_ea]]],[10,r_ih,E,r_xb,11,[[[r_ea],[r_vb]],[r_ea]]],[10,r_jh,E,r_wb,11,[[[r_ea],[r_vb]],[r_ea]]],[10,r_kh,E,r_xb,11,[[[r_ea],[r_vb]],[r_ea]]],[10,r_lh,E,r_wb,11,[[[r_ea],[r_vb]],[r_ea]]],[10,r_mh,E,r_xb,11,[[[r_ea],[r_vb]],[r_ea]]],[10,r_nh,E,r_oh,11,[[[r_ea]],[r_ea]]],[10,r_ph,E,r_qh,11,[[[r_ea]],[r_ea]]],[10,r_rh,E,r_sh,11,[[[r_ea]],[r_ea]]],[10,r_th,E,r_uh,11,[[[r_ea]],[r_ea]]],[10,r_vh,E,r_wh,11,[[[r_ea]],[r_ea]]],[10,r_qf,E,r_xh,11,[[[r_ea],[r_vb]],[r_ea]]],[0,"ops",r_rb,E,N,N],[0,r_ck,r_zb,E,N,N],[8,r_Tb,"num_traits::ops::checked",r_yh,N,N],[10,r_zf,E,r_zh,12,[[[r_ea],[r_ea]],[r_va]]],[8,r_Ub,E,r_Ah,N,N],[10,r_Af,E,r_Bh,13,[[[r_ea],[r_ea]],[r_va]]],[8,r_Vb,E,r_Ch,N,N],[10,r_Bf,E,r_Dh,14,[[[r_ea],[r_ea]],[r_va]]],[8,r_Wb,E,r_Eh,N,N],[10,r_Cf,E,r_Fh,15,[[[r_ea],[r_ea]],[r_va]]],[8,r_Xb,E,r_dk,N,N],[10,r_ek,E,r_fk,16,[[[r_ea],[r_ea]],[r_va]]],[8,r_Yb,E,r_gk,N,N],[10,r_hk,E,r_ik,17,[[[r_ea]],[r_va]]],[8,r_Zb,E,r_jk,N,N],[10,r_kk,E,r_yb,18,[[[r_ea],[r_vb]],[r_va]]],[8,r_0b,E,r_lk,N,N],[10,r_mk,E,r_yb,19,[[[r_ea],[r_vb]],[r_va]]],[0,r_Xi,r_zb,E,N,N],[8,"Inv","num_traits::ops::inv",r_nk,N,N],[16,r_Ab,E,r_Db,20,N],[10,r_Xi,E,r_ok,20,N],[0,r_Bb,r_zb,E,N,N],[8,r_1b,"num_traits::ops::mul_add",r_pk,N,N],[16,r_Ab,E,r_qk,21,N],[10,r_Bb,E,r_Cb,21,N],[8,r_2b,E,r_rk,N,N],[10,r_sk,E,r_Cb,22,[[[r_ea],["a"],["b"]]]],[0,r_tk,r_zb,E,N,N],[8,r_3b,"num_traits::ops::saturating",r_Hh,N,N],[10,r_Ih,E,r_Jh,23,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Kh,E,r_Lh,23,[[[r_ea],[r_ea]],[r_ea]]],[0,r_uk,r_zb,E,N,N],[8,r_4b,"num_traits::ops::wrapping",r_vk,N,N],[10,r_wk,E,r_xk,24,[[[r_ea],[r_ea]],[r_ea]]],[8,r_5b,E,r_yk,N,N],[10,r_zk,E,r_Ak,25,[[[r_ea],[r_ea]],[r_ea]]],[8,r_6b,E,r_Bk,N,N],[10,r_Ck,E,r_Dk,26,[[[r_ea],[r_ea]],[r_ea]]],[8,r_7b,E,r_Ek,N,N],[10,r_Fk,E,r_Gk,27,[[[r_ea],[r_vb]],[r_ea]]],[8,r_8b,E,r_Hk,N,N],[10,r_Ik,E,r_Jk,28,[[[r_ea],[r_vb]],[r_ea]]],[0,r_qf,r_rb,E,N,N],[5,r_qf,"num_traits::pow",r_tg,N,[[[T],[r_da]],[T]]],[5,r_ug,E,r_vg,N,[[[T],[r_da]],[r_va]]],[8,"Pow",E,r_Mh,N,N],[16,r_Ab,E,r_Db,29,N],[10,r_qf,E,r_Nh,29,N],[0,"sign",r_rb,E,N,N],[5,r_5h,"num_traits::sign",r_Fb,N,[[[T]],[T]]],[5,r_Gb,E,r_Hb,N,[[[T],[T]],[T]]],[5,r_Eb,E,r_Ib,N,[[[T]],[T]]],[8,r_9b,E,r_Oh,N,N],[10,r_5h,E,r_Fb,30,[[[r_ea]],[r_ea]]],[10,r_Gb,E,r_Hb,30,[[[r_ea],[r_ea]],[r_ea]]],[10,r_Eb,E,r_Ib,30,[[[r_ea]],[r_ea]]],[10,r_Df,E,r_Ph,30,[[[r_ea]],[r_ja]]],[10,r_Ef,E,r_Qh,30,[[[r_ea]],[r_ja]]],[8,r_Rh,E,r_Sh,N,N],[8,"Num",r_rb,r_Th,N,N],[16,r_Uh,E,E,31,N],[10,r_jf,E,r_Vh,31,[[[r_4a],[r_vb]],[r_ya]]],[8,r_Kk,E,r_Lk,N,N],[8,r_Mk,E,r_Nk,N,N],[8,r_Ok,E,r_Pk,N,N],[8,r_Qk,E,r_Rk,N,N],[8,r_Sk,E,r_Tk,N,N],[8,r_Uk,E,r_Vk,N,N],[11,r_za,E,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]]],"p":[[3,r_Jb],[4,r_Kb],[8,r_Lb],[8,r_Mb],[8,r_Nb],[8,r_Ob],[8,r_Pb],[8,r_Qb],[8,r_Rb],[8,r_7h],[8,"One"],[8,r_Sb],[8,r_Tb],[8,r_Ub],[8,r_Vb],[8,r_Wb],[8,r_Xb],[8,r_Yb],[8,r_Zb],[8,r_0b],[8,"Inv"],[8,r_1b],[8,r_2b],[8,r_3b],[8,r_4b],[8,r_5b],[8,r_6b],[8,r_7b],[8,r_8b],[8,"Pow"],[8,r_9b],[8,"Num"]]};
searchIndex[r_ve]={r_ac:"Complex numbers.","i":[[3,r_Ee,r_ve,r_wg,N,N],[12,"re",E,r_xg,0,N],[12,"im",E,r_yg,0,N],[3,r_Fe,E,E,N,N],[6,r_Wk,E,E,N,N],[6,r_Xk,E,E,N,N],[11,r_Hc,E,r_Yk,0,[[[T],[T]],[r_we]]],[11,"i",E,r_Zk,0,[[],[r_we]]],[11,r_0k,E,r_1k,0,[[[r_ea]],[T]]],[11,r_2k,E,r_3k,0,[[[r_ea],[T]],[r_we]]],[11,r_4k,E,r_5k,0,[[[r_ea],[T]],[r_we]]],[11,"conj",E,r_6k,0,[[[r_ea]],[r_we]]],[11,r_Xi,E,r_7k,0,[[[r_ea]],[r_we]]],[11,r_df,E,r_8k,0,[[[r_ea]],[r_ja]]],[11,r_ef,E,r_9k,0,[[[r_ea]],[r_ja]]],[11,r_ff,E,r_al,0,[[[r_ea]],[r_ja]]],[11,r_gf,E,r_bl,0,[[[r_ea]],[r_ja]]],[11,r_za,E,E,0,[[[U]],[r_ya]]],[11,r_Fa,E,E,0,[[[T]],[T]]],[11,r_Aa,E,E,0,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,0,[[[r_ea]],[U]]],[11,r_Ba,E,E,0,[[[r_ea]],[T]]],[11,r_Ca,E,E,0,[[[r_ea]],[T]]],[11,r_Da,E,E,0,[[[r_ea]],[r_Ea]]],[11,r_za,E,E,1,[[[U]],[r_ya]]],[11,r_Fa,E,E,1,[[[T]],[T]]],[11,r_Aa,E,E,1,[[[r_ea]],[r_ya]]],[11,r_Ga,E,E,1,[[[r_ea]],[U]]],[11,r_Ba,E,E,1,[[[r_ea]],[T]]],[11,r_Ca,E,E,1,[[[r_ea]],[T]]],[11,r_Da,E,E,1,[[[r_ea]],[r_Ea]]],[11,r_db,E,E,0,[[[r_ea]],[r_we]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,1,[[[r_ea],[r_Ha]],[r_ya]]],[11,"eq",E,E,0,[[[r_ea],[r_we]],[r_ja]]],[11,"ne",E,E,0,[[[r_ea],[r_we]],[r_ja]]],[11,"eq",E,E,1,[[[r_ea],[r_xe]],[r_ja]]],[11,"ne",E,E,1,[[[r_ea],[r_xe]],[r_ja]]],[11,r_hb,E,r_De,0,[[[r_4a]],[r_ya]]],[11,r_ib,E,E,0,N],[11,r_Fa,E,E,0,[[[T]],[r_we]]],[11,r_Fa,E,E,0,[[[T]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ge,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_He,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_He,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_He,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_He,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ff,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ff,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Ff,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Ff,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Gf,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Gf,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Gf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Gf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Hf,E,E,0,[[[r_ea],[r_we]],[r_we]]],[11,r_Hf,E,E,0,[[[r_ea],[r_we]],[r_ea]]],[11,r_Hf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,r_Hf,E,E,0,[[[r_ea],[T]],[r_we]]],[11,"neg",E,E,0,[[[r_ea]],[r_we]]],[11,r_rd,E,E,0,[[[r_ea],[r_we]]]],[11,r_rd,E,E,0,[[[r_ea],[T]]]],[11,r_rd,E,E,0,[[[r_ea],[r_we]]]],[11,r_rd,E,E,0,[[[r_ea],[T]]]],[11,r_ye,E,E,0,[[[r_ea],[r_we]]]],[11,r_ye,E,E,0,[[[r_ea],[T]]]],[11,r_ye,E,E,0,[[[r_ea],[r_we]]]],[11,r_ye,E,E,0,[[[r_ea],[T]]]],[11,r_ze,E,E,0,[[[r_ea],[r_we]]]],[11,r_ze,E,E,0,[[[r_ea],[T]]]],[11,r_ze,E,E,0,[[[r_ea],[r_we]]]],[11,r_ze,E,E,0,[[[r_ea],[T]]]],[11,r_Ae,E,E,0,[[[r_ea],[r_we]]]],[11,r_Ae,E,E,0,[[[r_ea],[T]]]],[11,r_Ae,E,E,0,[[[r_ea],[r_we]]]],[11,r_Ae,E,E,0,[[[r_ea],[T]]]],[11,r_Be,E,E,0,[[[r_ea],[r_we]]]],[11,r_Be,E,E,0,[[[r_ea],[T]]]],[11,r_Be,E,E,0,[[[r_ea],[r_we]]]],[11,r_Be,E,E,0,[[[r_ea],[T]]]],[11,r_Ce,E,E,0,[[["i"]],[r_ea]]],[11,r_Ce,E,E,0,[[["i"]],[r_ea]]],[11,r_Vi,E,E,0,[[["i"]],[r_ea]]],[11,r_Vi,E,E,0,[[["i"]],[r_ea]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Ia,E,E,0,[[[r_ea],[r_Ha]],[r_ya]]],[11,r_Na,E,E,0,[[],[r_we]]],[11,r_Pe,E,E,0,[[[r_ea]],[r_va,[r_da]]]],[11,r_Ie,E,E,0,[[[r_ea]],[r_va,[r_sb]]]],[11,r_Qe,E,E,0,[[[r_ea]],[r_va,["u8"]]]],[11,r_Re,E,E,0,[[[r_ea]],[r_va,[r_Rc]]]],[11,r_Se,E,E,0,[[[r_ea]],[r_va,[r_vb]]]],[11,r_Te,E,E,0,[[[r_ea]],[r_va,[r_Ue]]]],[11,r_Je,E,E,0,[[[r_ea]],[r_va,["i8"]]]],[11,r_Ke,E,E,0,[[[r_ea]],[r_va,[r_If]]]],[11,r_Le,E,E,0,[[[r_ea]],[r_va,[r_yf]]]],[11,r_Me,E,E,0,[[[r_ea]],[r_va,[r_nf]]]],[11,r_Ve,E,E,0,[[[r_ea]],[r_va,[r_We]]]],[11,r_Ne,E,E,0,[[[r_ea]],[r_va,[r_Oe]]]],[11,r_Xe,E,E,0,[[[r_ea]],[r_va,[r_of]]]],[11,r_Ye,E,E,0,[[[r_ea]],[r_va,[r_pf]]]],[11,r_5e,E,E,0,[[[r_da]],[r_va]]],[11,r_Ze,E,E,0,[[[r_sb]],[r_va]]],[11,r_6e,E,E,0,[[["u8"]],[r_va]]],[11,r_7e,E,E,0,[[[r_Rc]],[r_va]]],[11,r_8e,E,E,0,[[[r_vb]],[r_va]]],[11,r_9e,E,E,0,[[[r_Ue]],[r_va]]],[11,r_0e,E,E,0,[[["i8"]],[r_va]]],[11,r_1e,E,E,0,[[[r_If]],[r_va]]],[11,r_2e,E,E,0,[[[r_yf]],[r_va]]],[11,r_3e,E,E,0,[[[r_nf]],[r_va]]],[11,r_af,E,E,0,[[[r_We]],[r_va]]],[11,r_4e,E,E,0,[[[r_Oe]],[r_va]]],[11,r_bf,E,E,0,[[[r_of]],[r_va]]],[11,r_cf,E,E,0,[[[r_pf]],[r_va]]],[11,r_Fa,E,E,0,[[[U]],[r_va]]],[11,"as_",E,E,0,[[[r_ea]],[U]]],[11,r_jf,E,r_De,0,[[[r_4a],[r_vb]],[r_ya]]],[11,r_ge,E,E,0,[[],[r_we]]],[11,r_hf,E,E,0,[[[r_ea]],[r_ja]]],[11,r_6h,E,E,0,[[],[r_we]]],[11,r_if,E,E,0,[[[r_ea]],[r_ja]]],[11,r_Xi,E,E,0,[[[r_ea]],[r_we]]]],"p":[[3,r_Ee],[3,r_Fe]]};
initSearch(searchIndex);addSearchOptions(searchIndex);