var N=null,E="",T="t",U="u",searchIndex={};
var R=["cfg_if","bit_field","usize","bit_length","get_bit","Obtains the bit at the index `bit`; note that index 0 is…","get_bits","Obtains the range of bits specified by `range`; note that…","set_bit","Sets the bit at the index `bit` to the value `value`…","set_bits","Sets the range of bits defined by the range `range` to the…","BitField","BitArray","bitflags","mutexguard","Creates a new spinlock wrapping the supplied data.","into_inner","rwlockreadguard","rwlockwriteguard","option","try_from","try_into","borrow_mut","result","type_id","borrow","typeid","deref_mut","formatter","MutexGuard","RwLockReadGuard","RwLockWriteGuard","libpebble","libpebble::syscall","libpebble::object","kernelobjectid","KernelObjectId","levelfilter","setloggererror","metadata","recordbuilder","arguments","module_path","Returns a new builder.","The verbosity level of the message.","The name of the target of the directive.","metadatabuilder","parselevelerror","ordering","partial_cmp","from_str","LevelFilter","RecordBuilder","Metadata","MetadataBuilder","SetLoggerError","ParseLevelError","num_traits","partialord","min_value","max_value","Shifts the bits to the left by a specified amount amount,…","Shifts the bits to the right by a specified amount amount,…","Shifts a number to the left, checking for overflow. If…","num_traits::ops","Performs the fused multiply-add operation.","checkedmul","The result after applying the operator.","signed","Computes the absolute value.","The positive difference of two numbers.","Returns the sign of the number.","ParseFloatError","FloatErrorKind","ToPrimitive","FromPrimitive","AsPrimitive","FloatCore","FloatConst","CheckedAdd","CheckedSub","CheckedMul","CheckedDiv","CheckedRem","CheckedNeg","CheckedShl","CheckedShr","MulAddAssign","Saturating","WrappingAdd","WrappingSub","WrappingMul","WrappingShl","WrappingShr","acpierror","acpistaticinfo","amlnamespace","global_system_interrupt","polarity","trigger_mode","SameAsBus","physicalmapping","clone_into","acpi::interrupt","processorstate","Processor","PhysicalMapping","MadtError","AcpiError","ProcessorState","AmlNamespace","InterruptSourceOverride","NmiSource","LocalInterruptLine","TriggerMode","InterruptModel","AcpiHandler","AcpiStaticInfo","This marks memory that the OS should preserve in the…","privilegelevel","tsssegment","segmentselector","x86_64::hw","idtentry","microarch","virtualaddress","x86_64::memory","entryflags","x86_64::memory::paging","physicaladdress","contains","start_address","This is a marker type that specifies that we are in an…","inactivepagetable","identitymapping","switch_to","Switch to this set of page tables. This returns a tuple…","activepagetable","recursivemapping","x86_64::boot","to_owned","x86_64::hw::gdt","x86_64::hw::tss","x86_64::hw::idt","x86_64::hw::i8259_pic","x86_64::hw::local_apic","x86_64::hw::cpu","x86_64::hw::port","x86_64::hw::registers","x86_64::hw::serial","x86_64::memory::paging::entry","x86_64::memory::paging::frame","x86_64::memory::paging::mapper","x86_64::memory::paging::page","x86_64::memory::paging::table","next_table_address","add_assign","sub_assign","index_mut","steps_between","replace_one","replace_zero","add_usize","intoiterator","memorytype","MemoryEntry","PayloadInfo","BootInfo","MemoryType","DescriptorTablePointer","SegmentSelector","PrivilegeLevel","CodeSegment","DataSegment","TssSegment","InterruptStackFrame","LocalApicRegister","LocalApic","ModelInfo","Microarch","HypervisorVendor","SerialPort","InactivePageTable","EntryFlags","FrameAllocator","HierarchicalLevel","TableMapping","ActivePageTable","PhysicalAddress","HypervisorInfo","IdentityMapping","RecursiveMapping","num_integer","integer","Returns the truncated principal `n`th root of an integer…","Returns the truncated principal square root of an integer…","Returns the truncated principal cube root of an integer --…","div_floor","mod_floor","div_mod_floor","IterBinomial","num_complex","complex","parsecomplexerror","mul_assign","div_assign","rem_assign","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…","ParseComplexError","default","from_isize","from_i128","from_usize","from_u128","toprimitive","is_infinite","is_finite","is_normal","from_str_radix","into_iter","size_hint","next_back","rangeinclusive","rangestep","rangestepinclusive","RangeInclusive","RangeStep","RangeStepInclusive","num_rational","parseratioerror","from_i64","from_u64","from_f32","from_f64","ParseRatioError","checked_add","checked_sub","checked_mul","checked_div","is_positive","is_negative","A generic trait for converting a value to a number.","Converts the value of `self` to an `isize`.","Converts the value of `self` to an `i8`.","Converts the value of `self` to an `i16`.","Converts the value of `self` to an `i32`.","Converts the value of `self` to an `i64`.","Converts the value of `self` to an `i128`.","Converts the value of `self` to a `usize`.","Converts the value of `self` to an `u8`.","Converts the value of `self` to an `u16`.","Converts the value of `self` to an `u32`.","Converts the value of `self` to an `u64`.","Converts the value of `self` to an `u128`.","Converts the value of `self` to an `f32`.","Converts the value of `self` to an `f64`.","A generic trait for converting a number to a value.","Convert an `isize` to return an optional value of this…","Convert an `i8` to return an optional value of this type.…","Convert an `i16` to return an optional value of this type.…","Convert an `i32` to return an optional value of this type.…","Convert an `i64` to return an optional value of this type.…","Convert an `i128` to return an optional value of this…","Convert a `usize` to return an optional value of this…","Convert an `u8` to return an optional value of this type.…","Convert an `u16` to return an optional value of this type.…","Convert an `u32` to return an optional value of this type.…","Convert an `u64` to return an optional value of this type.…","Convert an `u128` to return an optional value of this…","Convert a `f32` to return an optional value of this type.…","Convert a `f64` to return an optional value of this type.…","An interface for casting between machine scalars.","Creates a number from another value that can be converted…","Cast from one machine scalar to another.","Raises a value to the power of exp, using exponentiation…","checked_pow","Raises a value to the power of exp, returning `None` if an…","A complex number in Cartesian form.","Real portion of the complex number","Imaginary portion of the complex number","Floored integer division.","Floored integer modulo, satisfying:","Greatest Common Divisor (GCD).","Lowest Common Multiple (LCM).","Deprecated, use `is_multiple_of` instead.","is_multiple_of","Returns `true` if `self` is a multiple of `other`.","Returns `true` if the number is even.","Returns `true` if the number is odd.","Simultaneous truncated integer division and modulus.…","Simultaneous floored integer division and modulus. Returns…","Returns an iterator over the given range [start, stop)…","range_inclusive","Return an iterator over the range [start, stop]","range_step","Return an iterator over the range [start, stop) by `step`.…","range_step_inclusive","Return an iterator over the range [start, stop] by `step`.…","Numbers which have upper and lower bounds","returns the smallest finite number this type can represent","returns the largest finite number this type can represent","num::traits","to_isize","to_usize","from_i16","from_i32","from_u16","from_u32","A generic interface for casting between machine scalars…","Convert a value to another, using the `as` operator.","Defines an additive identity element for `Self`.","Returns the additive identity element of `Self`, `0`.","Returns `true` if `self` is equal to the additive identity.","Defines a multiplicative identity element for `Self`.","Returns the multiplicative identity element of `Self`, `1`.","Returns `true` if `self` is equal to the multiplicative…","Returns the additive identity, `0`.","Returns the multiplicative identity, `1`.","count_ones","Returns the number of ones in the binary representation of…","count_zeros","Returns the number of zeros in the binary representation…","leading_zeros","Returns the number of leading zeros in the binary…","trailing_zeros","Returns the number of trailing zeros in the binary…","rotate_left","rotate_right","signed_shl","signed_shr","unsigned_shl","unsigned_shr","swap_bytes","Reverses the byte order of the integer.","Convert an integer from big endian to the target's…","Convert an integer from little endian to the target's…","Convert `self` to big endian from the target's endianness.","Convert `self` to little endian from the target's…","Raises self to the power of `exp`, using exponentiation by…","Performs addition that returns `None` instead of wrapping…","Adds two numbers, checking for overflow. If overflow…","Performs subtraction that returns `None` instead of…","Subtracts two numbers, checking for underflow. If…","Performs multiplication that returns `None` instead of…","Multiplies two numbers, checking for underflow or…","Performs division that returns `None` instead of panicking…","Divides two numbers, checking for underflow, overflow and…","num::traits::ops","Saturating math operations","saturating_add","Saturating addition operator. Returns a+b, saturating at…","saturating_sub","Saturating subtraction operator. Returns a-b, saturating…","Binary operator for raising a value to a power.","Returns `self` to the power `rhs`.","Useful functions for signed numbers (i.e. numbers that can…","Returns true if the number is positive and false if the…","Returns true if the number is negative and false if the…","A trait for values which cannot be negative","The base trait for numeric types, covering `0` and `1`…","FromStrRadixErr","Convert from a string and radix <= 36.","A value bounded by a minimum and a maximum","Alias for a `Ratio` of machine-sized integers.","num::complex","num::integer","num::iter","num::rational","An iterator over the range [start, stop)","An iterator over the range [start, stop]","An iterator over the range [start, stop) by `step`. It…","An iterator over the range [start, stop] by `step`. It…","An iterator over binomial coefficients.","nth_root","Simultaneous integer division and modulus","Floored integer division","Floored integer modulus","Simultaneous floored integer division and modulus","Calculates the Greatest Common Divisor (GCD) of the number…","Calculates the Lowest Common Multiple (LCM) of the number…","Calculate the binomial coefficient.","multinomial","Calculate the multinomial coefficient.","Provides methods to compute an integer's square root, cube…","For a given n, iterate over all binomial coefficients…","iterbinomial","Complex32","Complex64","Create a new Complex","Returns imaginary unit","Returns the square of the norm (since `T` doesn't…","Multiplies `self` by the scalar `t`.","Divides `self` by the scalar `t`.","Returns the complex conjugate. i.e. `re - i im`","Returns `1/self`","Checks if the given complex number is NaN","Checks if the given complex number is infinite","Checks if the given complex number is finite","Checks if the given complex number is normal","product","Represents the ratio between two numbers.","Rational","Rational32","Alias for a `Ratio` of 32-bit-sized integers.","Rational64","Alias for a `Ratio` of 64-bit-sized integers.","Creates a new `Ratio`. Fails if `denom` is zero.","from_integer","Creates a `Ratio` representing the integer `t`.","Creates a `Ratio` without checking for `denom == 0` or…","to_integer","Converts to an integer, rounding towards zero.","Gets an immutable reference to the numerator.","Gets an immutable reference to the denominator.","is_integer","Returns true if the rational number is an integer…","Returns a reduced copy of self.","Returns the reciprocal.","Rounds towards minus infinity.","Rounds towards plus infinity.","Rounds to the nearest integer. Rounds half-way cases away…","Rounds towards zero.","Returns the fractional part of a number, with division…","Raises the `Ratio` to the power of an exponent.","approximate_float","Renders as `numer/denom`. If denom=1, renders as numer.","Parses `numer/denom` or just `numer`.","Parses `numer/denom` where the numbers are in base `radix`.","is_zero","abs_sub","to_i128","to_u128","from_i8","from_u8","Generic trait for floating point numbers that works with…","Returns positive infinity.","neg_infinity","Returns negative infinity.","Returns NaN.","Returns `-0.0`.","Returns the smallest finite value that this type can…","min_positive_value","Returns the smallest positive, normalized value that this…","Returns epsilon, a small positive value.","Returns the largest finite value that this type can…","Returns `true` if the number is NaN.","Returns `true` if the number is infinite.","Returns `true` if the number is neither infinite or NaN.","Returns `true` if the number is neither zero, infinite,…","Returns the floating point category of the number. If only…","fpcategory","Returns the largest integer less than or equal to a number.","Returns the smallest integer greater than or equal to a…","Returns the nearest integer to a number. Round half-way…","Return the integer part of a number.","Returns the fractional part of a number.","Computes the absolute value of `self`. Returns…","Returns a number that represents the sign of `self`.","is_sign_positive","Returns `true` if `self` is positive, including `+0.0` and…","is_sign_negative","Returns `true` if `self` is negative, including `-0.0` and…","Returns the minimum of the two numbers.","Returns the maximum of the two numbers.","Returns the reciprocal (multiplicative inverse) of the…","Raise a number to an integer power.","to_degrees","Converts to degrees, assuming the number is in radians.","to_radians","Converts to radians, assuming the number is in degrees.","integer_decode","Returns the mantissa, base 2 exponent, and sign as…","Return Euler’s number.","FRAC_1_PI","Return `1.0 / π`.","FRAC_1_SQRT_2","Return `1.0 / sqrt(2.0)`.","FRAC_2_PI","Return `2.0 / π`.","FRAC_2_SQRT_PI","Return `2.0 / sqrt(π)`.","FRAC_PI_2","Return `π / 2.0`.","FRAC_PI_3","Return `π / 3.0`.","FRAC_PI_4","Return `π / 4.0`.","FRAC_PI_6","Return `π / 6.0`.","FRAC_PI_8","Return `π / 8.0`.","Return `ln(10.0)`.","Return `ln(2.0)`.","Return `log10(e)`.","Return `log2(e)`.","Return Archimedes’ constant.","Return `sqrt(2.0)`.","identities","Performs an integral remainder that returns `None` instead…","checked_rem","Finds the remainder of dividing two numbers, checking for…","Performs negation that returns `None` if the result can't…","checked_neg","Negates a number, returning `None` for results that can't…","Performs a left shift that returns `None` on overflow.","checked_shl","Performs a right shift that returns `None` on overflow.","checked_shr","Unary operator for retrieving the multiplicative inverse,…","Returns the multiplicative inverse of `self`.","Fused multiply-add. Computes `(self * a) + b` with only…","The resulting type after applying the fused multiply-add.","The fused multiply-add assignment operation.","mul_add_assign","saturating","Performs addition that wraps around on overflow.","wrapping_add","Wrapping (modular) addition. Computes `self + other`,…","Performs subtraction that wraps around on overflow.","wrapping_sub","Wrapping (modular) subtraction. Computes `self - other`,…","Performs multiplication that wraps around on overflow.","wrapping_mul","Wrapping (modular) multiplication. Computes `self *…","Performs a left shift that does not panic.","wrapping_shl","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…","Performs a right shift that does not panic.","wrapping_shr","Panic-free bitwise shift-right; yields `self >>…","Unsigned","The trait for types implementing basic numeric operations","The trait for `Num` types which also implement numeric…","The trait for references which implement numeric…","NumAssignOps","The trait for types implementing numeric assignment…","NumAssign","The trait for `Num` types which also implement assignment…","NumAssignRef","The trait for `NumAssign` types which also implement…","NumCast","This is the entry point for the kernel on x86_64. It is…","physical_region_mapper","kernel::x86_64","processor_uid","local_apic_id","processor","interruptstackframe","kernel::x86_64::memory","buddy_allocator","lockedphysicalmemorymanager","map_physical_region","unmap_physical_region","address_space","AddressSpace","allocation","new_uninitialized","allocate_first_fit","allocerr","kernel::object::map","kernel::object::map::Entry","kernelobject","kernel::object","kernel::util","kernel::x86_64::acpi_handler","kernel::x86_64::address_space","kernel::x86_64::cpu","kernel::x86_64::interrupts","kernel::x86_64::logger","kernel::x86_64::memory::buddy_allocator","kernel::x86_64::memory::physical","kernel::x86_64::task","kernel::heap_allocator","kernel::util::binary_pretty_print","holeinfo","allocate_n","acpiphysicalmapping","PebbleAcpiHandler","AddressSpaceState","TableState","InterruptController","PhysicalRegionMapper","BuddyAllocator","PhysicalMemoryManager","LockedPhysicalMemoryManager","Architecture","HoleAllocator","LockedHoleAllocator","Allocation","KernelObject","ObjectMap","BinaryPrettyPrint","KernelLogger","instruction_pointer","stack_pointer","set_handler","HEAP_START","frame_allocator","generation"];
searchIndex["acpi"]={"doc":E,"i":[[3,R[111],"acpi",E,N,N],[3,R[106],E,E,N,N],[12,R[545],E,E,0,N],[12,R[546],E,E,0,N],[12,"state",E,"The state of this processor. Always check that the…",0,N],[12,"is_ap",E,"Whether this processor is the Bootstrap Processor (BSP),…",0,N],[3,R[107],E,"Describes a physical mapping created by…",N,N],[12,"physical_start",E,E,1,N],[12,"virtual_start",E,E,1,N],[12,"region_length",E,E,1,N],[12,"mapped_length",E,E,1,N],[3,R[118],E,"All the information from parsing the static tables. This…",N,N],[4,"AmlError",E,E,N,N],[13,"EndOfStream",E,E,2,N],[13,"UnexpectedByte",E,E,2,N],[13,"IncompatibleValueConversion",E,E,2,N],[13,"InvalidPath",E,E,2,N],[13,"InvalidFieldFlags",E,E,2,N],[13,"InvalidNameSeg",E,E,2,N],[13,"NeedsBacktrack",E,"This is a special error type that marks that the parser…",2,N],[4,R[108],E,E,N,N],[13,"UnexpectedEntry",E,E,3,N],[13,"InterruptOverrideEntryHasInvalidBus",E,E,3,N],[13,"InvalidLocalNmiLine",E,E,3,N],[13,"NoLocalNmiLineSpecified",E,E,3,N],[13,"MpsIntiInvalidPolarity",E,E,3,N],[13,"MpsIntiInvalidTriggerMode",E,E,3,N],[4,R[109],E,E,N,N],[13,"RsdpIncorrectSignature",E,E,4,N],[13,"RsdpInvalidOemId",E,E,4,N],[13,"RsdpInvalidChecksum",E,E,4,N],[13,"NoValidRsdp",E,E,4,N],[13,"SdtInvalidSignature",E,E,4,N],[13,"SdtInvalidOemId",E,E,4,N],[13,"SdtInvalidTableId",E,E,4,N],[13,"SdtInvalidChecksum",E,E,4,N],[13,"InvalidAmlTable",E,E,4,N],[13,"InvalidMadt",E,E,4,N],[4,R[110],E,E,N,N],[13,"Disabled",E,"A processor in this state is unusable, and you must not…",5,N],[13,"WaitingForSipi",E,"A processor waiting for a SIPI (Startup Inter-processor…",5,N],[13,"Running",E,"A Running processor is currently brought up and running…",5,N],[5,"search_for_rsdp_bios",E,"This is the entry point of `acpi` if you have no…",N,[[["h"]],[[R[95]],[R[24],[R[96],R[95]]],[R[96]]]]],[5,"parse_rsdp",E,"This is the entry point of `acpi` if you have the physical…",N,[[["h"],[R[2]]],[[R[95]],[R[24],[R[96],R[95]]],[R[96]]]]],[5,"parse_rsdt",E,"This is the entry point of `acpi` if you already have the…",N,[[["h"],["u8"],[R[2]]],[[R[95]],[R[24],[R[96],R[95]]],[R[96]]]]],[11,"parse_aml_tables",E,E,6,[[["h"],[R[96]]],[[R[95]],[R[24],[R[97],R[95]]],[R[97]]]]],[0,"interrupt",E,E,N,N],[3,"IoApic",R[104],E,N,N],[12,"id",E,E,7,N],[12,"address",E,E,7,N],[12,"global_system_interrupt_base",E,E,7,N],[3,R[112],E,"Describes a difference in the mapping of an ISA interrupt…",N,N],[12,"isa_source",E,E,8,N],[12,R[98],E,E,8,N],[12,R[99],E,E,8,N],[12,R[100],E,E,8,N],[3,R[113],E,"Describes a Global System Interrupt that should be enabled…",N,N],[12,R[98],E,E,9,N],[12,R[99],E,E,9,N],[12,R[100],E,E,9,N],[4,R[114],E,E,N,N],[13,"Lint0",E,E,10,N],[13,"Lint1",E,E,10,N],[4,"Polarity",E,E,N,N],[13,R[101],E,E,11,N],[13,"ActiveHigh",E,E,11,N],[13,"ActiveLow",E,E,11,N],[4,R[115],E,E,N,N],[13,R[101],E,E,12,N],[13,"Edge",E,E,12,N],[13,"Level",E,E,12,N],[4,R[116],E,E,N,N],[13,"Pic",E,"This model is only chosen when a newer one can not be…",13,N],[13,"Apic",E,"Describes an interrupt controller based around the…",13,N],[12,"local_apic_address","acpi::interrupt::InterruptModel",E,13,N],[12,"io_apics",E,E,13,N],[12,"local_apic_nmi_line",E,E,13,N],[12,"interrupt_source_overrides",E,E,13,N],[12,"nmi_sources",E,E,13,N],[12,"also_has_legacy_pics",E,"If this field is set, you must remap and mask all the…",13,N],[8,R[117],"acpi","An implementation of this trait must be provided to allow…",N,N],[10,R[552],E,"Given a starting physical address and a size, map a region…",14,[[["self"],[R[2]]],[R[102]]]],[10,R[553],E,"Unmap the given physical mapping. Safe because we consume…",14,[[[R[102]],["self"]]]],[11,"boot_processor",E,"A description of the boot processor. Until you bring any…",15,[[["self"]],[R[20]]]],[11,"application_processors",E,"Descriptions of each of the application processors. These…",15,[[["self"]],["vec"]]],[11,"interrupt_model",E,"The interrupt model supported by this system.",15,[[["self"]],[R[20]]]],[14,"parser_trace",E,"Easy macro for controlling whether debug output is printed…",N,N],[14,"parse_any_of",E,"This macro takes a parser and one or more parsing…",N,N],[14,"check_attempt",E,"This macro wraps parselets that check if we're parsing the…",N,N],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[[U]],[R[24]]]],[11,R[22],E,E,6,[[],[R[24]]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"]],[R[27]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,R[141],E,E,0,[[["self"]],[T]]],[11,R[103],E,E,0,[[[T],["self"]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[21],E,E,15,[[[U]],[R[24]]]],[11,R[22],E,E,15,[[],[R[24]]]],[11,"into",E,E,15,[[],[U]]],[11,R[26],E,E,15,[[["self"]],[T]]],[11,R[23],E,E,15,[[["self"]],[T]]],[11,R[25],E,E,15,[[["self"]],[R[27]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[[U]],[R[24]]]],[11,R[22],E,E,2,[[],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"]],[R[27]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[[U]],[R[24]]]],[11,R[22],E,E,3,[[],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"]],[R[27]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[[U]],[R[24]]]],[11,R[22],E,E,4,[[],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,R[26],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"]],[R[27]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[[U]],[R[24]]]],[11,R[22],E,E,5,[[],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"]],[R[27]]]],[11,R[141],E,E,5,[[["self"]],[T]]],[11,R[103],E,E,5,[[[T],["self"]]]],[11,"from",R[104],E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[[U]],[R[24]]]],[11,R[22],E,E,7,[[],[R[24]]]],[11,"into",E,E,7,[[],[U]]],[11,R[26],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[25],E,E,7,[[["self"]],[R[27]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[[U]],[R[24]]]],[11,R[22],E,E,8,[[],[R[24]]]],[11,"into",E,E,8,[[],[U]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[25],E,E,8,[[["self"]],[R[27]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[[U]],[R[24]]]],[11,R[22],E,E,9,[[],[R[24]]]],[11,"into",E,E,9,[[],[U]]],[11,R[26],E,E,9,[[["self"]],[T]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[25],E,E,9,[[["self"]],[R[27]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[[U]],[R[24]]]],[11,R[22],E,E,10,[[],[R[24]]]],[11,"into",E,E,10,[[],[U]]],[11,R[26],E,E,10,[[["self"]],[T]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[25],E,E,10,[[["self"]],[R[27]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[[U]],[R[24]]]],[11,R[22],E,E,11,[[],[R[24]]]],[11,"into",E,E,11,[[],[U]]],[11,R[26],E,E,11,[[["self"]],[T]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[25],E,E,11,[[["self"]],[R[27]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[21],E,E,12,[[[U]],[R[24]]]],[11,R[22],E,E,12,[[],[R[24]]]],[11,"into",E,E,12,[[],[U]]],[11,R[26],E,E,12,[[["self"]],[T]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[25],E,E,12,[[["self"]],[R[27]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[21],E,E,13,[[[U]],[R[24]]]],[11,R[22],E,E,13,[[],[R[24]]]],[11,"into",E,E,13,[[],[U]]],[11,R[26],E,E,13,[[["self"]],[T]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[25],E,E,13,[[["self"]],[R[27]]]],[11,"fmt","acpi",E,2,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[104],E,7,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,10,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,11,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,12,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,8,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,9,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,13,[[["self"],[R[29]]],[R[24]]]],[11,"fmt","acpi",E,3,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,4,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,5,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,15,[[["self"],[R[29]]],[R[24]]]],[11,"eq",E,E,5,[[["self"],[R[105]]],["bool"]]],[11,"deref",E,E,1,[[["self"]],[T]]],[11,"clone",E,E,5,[[["self"]],[R[105]]]],[11,"clone",E,E,0,[[["self"]],[R[547]]]]],"p":[[3,R[106]],[3,R[107]],[4,"AmlError"],[4,R[108]],[4,R[109]],[4,R[110]],[3,R[111]],[3,"IoApic"],[3,R[112]],[3,R[113]],[4,R[114]],[4,"Polarity"],[4,R[115]],[4,R[116]],[8,R[117]],[3,R[118]]]};
searchIndex["kernel"]={"doc":"This module probably looks rather sparse! Check the root…","i":[[5,"kmain","kernel",R[542],N,[[]]],[5,"panic",E,E,N,[[["panicinfo"]]]],[0,"x86_64",E,"This module defines the kernel entry-point on x86_64.",N,N],[3,"Arch",R[544],E,N,N],[12,"physical_memory_manager",E,E,0,N],[12,"kernel_page_table",E,"This is the main set of page tables for the kernel. It is…",0,N],[12,R[543],E,E,0,N],[12,"object_map",E,E,0,N],[5,"kmain",E,R[542],N,[[]]],[5,"drop_to_userboot",E,E,N,[[["tss"],["arch"],["bootinfo"]]]],[0,"acpi_handler",E,E,N,N],[3,R[578],R[565],E,N,N],[12,R[543],E,E,1,N],[12,"page_table",E,E,1,N],[12,R[598],E,E,1,N],[11,"new",E,E,1,[[[R[551]],["mutex"],["mutex"]],["pebbleacpihandler"]]],[0,R[554],R[544],E,N,N],[3,R[579],R[566],"Contains information about what is mapped in an…",N,N],[12,"stack_bitmap",E,"Bitmap of allocated stacks in this address space. Each bit…",2,N],[3,R[555],E,E,N,N],[12,"table",E,E,3,N],[12,"state",E,E,3,N],[3,"StackSet",E,E,N,N],[12,"kernel_stack_top",E,E,4,N],[12,"user_stack_top",E,E,4,N],[4,R[580],E,E,N,N],[13,"Poisoned",E,"An `AddressSpace` is put in the `Poisoned` state while we…",5,N],[13,"NotActive",E,E,5,N],[13,"Active",E,E,5,N],[11,"add_stack",E,E,2,[[["a"],["self"],["mapper"],[R[2]]],[["stackset"],[R[20],["stackset"]]]]],[11,"from_page_table",E,E,3,[[["arch"],[R[139]],[R[134],[R[139]]]],["addressspace"]]],[11,R[136],E,E,3,[[["self"]]]],[11,"modify",E,E,3,[[["self"],["arch"],["f"]],["r"]]],[0,"cpu",R[544],E,N,N],[3,"Cpu",R[567],E,N,N],[12,R[545],E,E,6,N],[12,R[546],E,E,6,N],[12,"is_ap",E,E,6,N],[12,"tss",E,E,6,N],[12,"tss_selector",E,E,6,N],[11,"from_acpi",E,E,6,[[[R[122]],["pin",["box"]],["box",["tss"]],[R[547]]],["cpu"]]],[0,"interrupts",R[544],E,N,N],[3,R[581],R[568],E,N,N],[5,"syscall_handler",E,E,N,[[]]],[5,"nmi_handler",E,E,N,[[[R[548]]]]],[5,"breakpoint_handler",E,E,N,[[[R[548]]]]],[5,"invalid_opcode_handler",E,E,N,[[[R[548]]]]],[5,"general_protection_fault_handler",E,E,N,[[["u64"],[R[548]]]]],[5,"page_fault_handler",E,E,N,[[["u64"],[R[548]]]]],[5,"double_fault_handler",E,E,N,[[["u64"],[R[548]]]]],[5,"spurious_handler",E,E,N,[[[R[548]]]]],[7,"IDT",E,"This should only be accessed directly by the bootstrap…",N,N],[17,"LEGACY_PIC_VECTOR",E,E,N,N],[17,"APIC_SPURIOUS_VECTOR",E,E,N,N],[11,"init",E,E,7,[[["arch"],["interruptmodel"]],["interruptcontroller"]]],[11,"install_exception_handlers",E,E,7,[[]]],[11,"install_syscall_handler",E,E,7,[[]]],[0,"logger",R[544],E,N,N],[3,R[593],R[569],"This handles calls to the log macros throughout the…",N,N],[7,"COM1",E,"The COM1 serial port, accessed through the UART 16550…",N,N],[0,"memory",R[544],"This module contains the physical memory manager Pebble…",N,N],[3,R[107],R[549],"Sometimes the system needs to access specific areas of…",N,N],[12,"physical_base",E,"The address of the start of the mapping in the physical…",8,N],[12,"virtual_base",E,"The address of the start of the mapping in the virtual…",8,N],[12,"size",E,"Size, in bytes, of the mapping. Must be a multiple of the…",8,N],[3,R[582],E,E,N,N],[12,"mappings",E,"This maps `PhysicalMapping`s to their starting…",9,N],[12,"virtual_area_bitmap",E,"This tracks which of the pages in the area of virtual…",9,N],[0,R[550],E,"One of the allocators we use to manage physical memory is…",N,N],[3,R[583],R[570],E,N,N],[12,"bins",E,"The bins of free blocks, where bin `i` contains blocks of…",10,N],[11,"new",E,"Create a new `BuddyAllocator`, with a maximum block size…",10,[[[R[2]]],["buddyallocator"]]],[11,"add_range",E,"Add a range of `Frame`s to this allocator, marking them…",10,[[["self"],["range",["frame"]],["frame"]]]],[11,R[576],E,"Allocate (at least) `n` contiguous frames from this…",10,[[["self"],[R[2]]],[["frame"],[R[20],["frame"]]]]],[11,"free_n",E,"Free the given block (starting at `start` and of size `n`…",10,[[["self"],["frame"],[R[2]]]]],[11,"allocate_block",E,"Tries to allocate a block of the given order. If no blocks…",10,[[["self"],[R[2]]],[["frame"],[R[20],["frame"]]]]],[11,"buddy_of",E,"Finds the starting frame of the block that is the buddy of…",10,[[["frame"],[R[2]]],["frame"]]],[11,"max_order",E,"Get the order of the largest block this allocator can track.",10,[[["self"]],[R[2]]]],[0,"physical",R[549],E,N,N],[3,R[584],R[571],"The main physical memory manager. It tracks all…",N,N],[12,R[550],E,"A buddy allocator used to track all conventional memory.…",11,N],[3,R[585],E,E,N,N],[12,"0",E,E,12,N],[17,"BUDDY_ALLOCATOR_MAX_ORDER",E,E,N,N],[11,"new",E,E,12,[[["bootinfo"]],[R[551]]]],[0,"userspace_map",R[549],E,N,N],[17,"KERNEL_SPACE_START","kernel::x86_64::memory::userspace_map",E,N,N],[17,"KERNEL_SPACE_END",E,E,N,N],[17,"INITIAL_STACK_SIZE",E,"The initial size of a task's user and kernel stacks. Must…",N,N],[17,"MAX_STACK_SIZE",E,"Each task's usermode stack can be a maximum of 2MiB in…",N,N],[17,"MEMORY_OBJECTS_START",E,E,N,N],[17,"RECEIVE_BUFFERS_START",E,E,N,N],[17,"SEND_BUFFERS_START",E,E,N,N],[17,"KERNEL_STACKS_START",E,E,N,N],[17,"USER_STACKS_START",E,E,N,N],[17,R[597],E,E,N,N],[17,"IMAGE_START",E,E,N,N],[6,"KernelPageTable",R[549],"Type alias to hide the concrete type of the kernel's page…",N,N],[11,"new",E,E,9,[[],["physicalregionmapper"]]],[11,R[552],E,E,9,[[[R[138]],["self"],["frame"],[R[551]],[R[128]],[R[2]]],[R[102]]]],[11,R[553],E,E,9,[[[R[138]],[R[102]],["self"],[R[551]]]]],[0,"task",R[544],E,N,N],[3,"Task",R[572],"This is the representation of a task on x86_64. It's…",N,N],[12,R[554],E,E,13,N],[12,"stack_top",E,E,13,N],[12,"stack_size",E,E,13,N],[12,R[594],E,E,13,N],[12,R[595],E,E,13,N],[5,"drop_to_usermode",E,E,N,[[[R[36]],["tss"],["arch"]]]],[11,"new",E,"Create a new task in a given address space, which will…",13,[[[R[36]],["arch"],[R[126]]],["task"]]],[7,"GDT",R[544],"The kernel GDT. This is not thread-safe, and so should…",N,N],[0,"arch","kernel",E,N,N],[8,R[586],"kernel::arch","Trait that is implemented by a type in each architecture…",N,N],[16,R[555],E,E,14,N],[16,"Task",E,E,14,N],[0,"heap_allocator","kernel",E,N,N],[3,R[587],R[573],E,N,N],[12,"heap_bottom",E,E,15,N],[12,"heap_size",E,E,15,N],[12,"holes",E,E,15,N],[3,R[588],E,E,N,N],[12,"0",E,E,16,N],[3,"HoleInfo",E,E,N,N],[12,"addr",E,E,17,N],[12,"size",E,E,17,N],[3,"Hole",E,E,N,N],[12,"size",E,E,18,N],[12,"next",E,E,18,N],[3,"HoleList",E,E,N,N],[12,"first",E,E,19,N],[3,R[589],E,E,N,N],[12,"info",E,E,20,N],[12,"front_padding",E,E,20,N],[12,"back_padding",E,E,20,N],[5,"split_hole",E,"Split the given hole into…",N,[[[R[575]],["layout"]],[[R[20],[R[556]]],[R[556]]]]],[5,R[558],E,E,N,[[["layout"],["hole"]],[[R[556]],[R[24],[R[556],R[559]]],[R[559]]]]],[5,"free",E,"Walk the list, starting at `hole` and free the allocation…",N,[[[R[126]],[R[2]],["hole"]]]],[5,"align_down",E,"Get the greatest x with the given alignment such that x <=…",N,[[[R[2]]],[R[2]]]],[5,"align_up",E,"Get the smallest x with the given alignment such that x >=…",N,[[[R[2]]],[R[2]]]],[5,"handle_alloc_error",E,E,N,[[["layout"]]]],[11,R[557],E,"Create a new, uninitialized `HoleAllocator`. Before heap…",15,[[],["holeallocator"]]],[11,"init",E,"Initialise the `HoleAllocator`. This should only be called…",15,[[["self"],[R[126]]]]],[11,R[557],E,E,16,[[],["lockedholeallocator"]]],[11,"info",E,E,18,[[["self"]],[R[575]]]],[11,"new",E,"Create a new `HoleList` that contains the given hole.…",19,[[[R[126]],[R[2]]],["holelist"]]],[11,R[558],E,"Search for a big enough hole for the given `Layout` with…",19,[[["self"],["layout"]],[[R[559]],[R[24],[R[559]]]]]],[11,"free",E,"Free an allocation defined by `ptr` and `layout`. Unsafe…",19,[[["self"],["layout"]]]],[11,"get_min_size",E,E,19,[[],[R[2]]]],[0,"object","kernel",E,N,N],[4,R[590],R[563],E,N,N],[13,R[555],E,E,21,N],[13,"Task",E,E,21,N],[0,"map",E,E,N,N],[3,R[591],R[560],"Stores all the `KernelObject`s against their generational…",N,N],[12,"entries",E,E,22,N],[12,"free_list_head",E,E,22,N],[4,"Entry",E,E,N,N],[13,"Free",E,E,23,N],[12,"next_generation",R[561],E,23,N],[12,"next_free",E,E,23,N],[13,"Occupied",R[560],E,23,N],[12,R[599],R[561],E,23,N],[12,"object",E,E,23,N],[17,"INITIAL_OBJECT_CAPACITY",R[560],E,N,N],[11,"new",E,E,22,[[[R[2]]],["objectmap"]]],[11,"insert",E,"Insert a new object into the map, assigning it a…",22,[[[R[562]],["self"]],[R[36]]]],[11,"insert_into",E,E,22,[[[R[562]],["self"],[R[2]]],[R[36]]]],[11,"reserve",E,E,22,[[["self"],[R[2]]]]],[11,"get",E,E,22,[[[R[36]],["self"]],[[R[20],[R[562]]],[R[562]]]]],[11,"get_mut",E,E,22,[[[R[36]],["self"]],[[R[562]],[R[20],[R[562]]]]]],[11,"remove",E,E,22,[[[R[36]],["self"]],[[R[562]],[R[20],[R[562]]]]]],[11,R[131],E,E,22,[[[R[36]],["self"]],["bool"]]],[11,"len",E,E,22,[[["self"]],[R[2]]]],[11,R[554],R[563],E,21,[[["self"]],["rwlock"]]],[11,"task",E,E,21,[[["self"]],["rwlock"]]],[0,"syscall","kernel",E,N,N],[5,"handle_syscall","kernel::syscall","This is the architecture-independent syscall handler. It…",N,[[[R[2]]],[R[2]]]],[0,"util","kernel",E,N,N],[0,"binary_pretty_print",R[564],E,N,N],[3,R[592],R[574],"Values can be wrapped in this type when they're printed to…",N,N],[12,"0",E,E,24,N],[0,"bitmap",R[564],"It's useful to be able to model an integral type such as…",N,N],[8,"Bitmap","kernel::util::bitmap",E,N,N],[10,"alloc",E,"Find `n` consecutive unset bits, set them and return the…",25,[[["self"],[R[2]]],[[R[2]],[R[20],[R[2]]]]]],[0,"math",R[564],E,N,N],[5,"flooring_log2","kernel::util::math","Fast integer `log2` that floors to the lower power-of-2 if…",N,[[["u64"]],["u64"]]],[5,"ceiling_log2",E,E,N,[[["u64"]],["u64"]]],[5,"ceiling_integer_divide",E,"Divide `x` by `divide_by`, taking the ceiling if it does…",N,[[["u64"]],["u64"]]],[17,"KIBIBYTES_TO_BYTES",E,"A constant such that `x * KIBIBYTES_TO_BYTES` is `x` KiB…",N,N],[17,"MEBIBYTES_TO_BYTES",E,"A constant such that `x * MEBIBYTES_TO_BYTES` is `x` MiB…",N,N],[17,"GIBIBYTES_TO_BYTES",E,"A constant such that `x * GIBIBYTES_TO_BYTES` is `x` GiB…",N,N],[0,"__rg_allocator_abi","kernel",E,N,N],[5,"__rg_alloc","kernel::__rg_allocator_abi",E,N,[[[R[2]]]]],[5,"__rg_dealloc",E,E,N,[[[R[2]]]]],[5,"__rg_realloc",E,E,N,[[[R[2]]]]],[5,"__rg_alloc_zeroed",E,E,N,[[[R[2]]]]],[7,"ALLOCATOR","kernel",E,N,N],[14,R[596],E,E,N,N],[14,"set_handler_with_error_code",E,E,N,N],[14,"save_regs",E,"Macro to save the scratch registers. In System-V, `rbx`,…",N,N],[14,"restore_regs",E,"Restore the saved scratch registers.",N,N],[14,"wrap_handler",E,E,N,N],[14,"wrap_handler_with_error_code",E,E,N,N],[14,"kernel_object_table",E,E,N,N],[14,"assert_first_call",E,"This macro should be called at the beginning of functions…",N,N],[11,"from",R[544],E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",R[565],E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"from",R[566],E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[[U]],[R[24]]]],[11,R[22],E,E,2,[[],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"]],[R[27]]]],[11,R[141],E,E,2,[[["self"]],[T]]],[11,R[103],E,E,2,[[[T],["self"]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[[U]],[R[24]]]],[11,R[22],E,E,3,[[],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"]],[R[27]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[[U]],[R[24]]]],[11,R[22],E,E,4,[[],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,R[26],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"]],[R[27]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[[U]],[R[24]]]],[11,R[22],E,E,5,[[],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"]],[R[27]]]],[11,"from",R[567],E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[[U]],[R[24]]]],[11,R[22],E,E,6,[[],[R[24]]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"]],[R[27]]]],[11,"from",R[568],E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[[U]],[R[24]]]],[11,R[22],E,E,7,[[],[R[24]]]],[11,"into",E,E,7,[[],[U]]],[11,R[26],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[25],E,E,7,[[["self"]],[R[27]]]],[11,"from",R[569],E,26,[[[T]],[T]]],[11,R[21],E,E,26,[[[U]],[R[24]]]],[11,R[22],E,E,26,[[],[R[24]]]],[11,"into",E,E,26,[[],[U]]],[11,R[26],E,E,26,[[["self"]],[T]]],[11,R[23],E,E,26,[[["self"]],[T]]],[11,R[25],E,E,26,[[["self"]],[R[27]]]],[11,"from",R[549],E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[[U]],[R[24]]]],[11,R[22],E,E,8,[[],[R[24]]]],[11,"into",E,E,8,[[],[U]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[25],E,E,8,[[["self"]],[R[27]]]],[11,R[141],E,E,8,[[["self"]],[T]]],[11,R[103],E,E,8,[[[T],["self"]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[[U]],[R[24]]]],[11,R[22],E,E,9,[[],[R[24]]]],[11,"into",E,E,9,[[],[U]]],[11,R[26],E,E,9,[[["self"]],[T]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[25],E,E,9,[[["self"]],[R[27]]]],[11,"from",R[570],E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[[U]],[R[24]]]],[11,R[22],E,E,10,[[],[R[24]]]],[11,"into",E,E,10,[[],[U]]],[11,R[26],E,E,10,[[["self"]],[T]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[25],E,E,10,[[["self"]],[R[27]]]],[11,"from",R[571],E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[[U]],[R[24]]]],[11,R[22],E,E,11,[[],[R[24]]]],[11,"into",E,E,11,[[],[U]]],[11,R[26],E,E,11,[[["self"]],[T]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[25],E,E,11,[[["self"]],[R[27]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[21],E,E,12,[[[U]],[R[24]]]],[11,R[22],E,E,12,[[],[R[24]]]],[11,"into",E,E,12,[[],[U]]],[11,R[26],E,E,12,[[["self"]],[T]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[25],E,E,12,[[["self"]],[R[27]]]],[11,"from",R[572],E,13,[[[T]],[T]]],[11,R[21],E,E,13,[[[U]],[R[24]]]],[11,R[22],E,E,13,[[],[R[24]]]],[11,"into",E,E,13,[[],[U]]],[11,R[26],E,E,13,[[["self"]],[T]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[25],E,E,13,[[["self"]],[R[27]]]],[11,"from",R[573],E,15,[[[T]],[T]]],[11,R[21],E,E,15,[[[U]],[R[24]]]],[11,R[22],E,E,15,[[],[R[24]]]],[11,"into",E,E,15,[[],[U]]],[11,R[26],E,E,15,[[["self"]],[T]]],[11,R[23],E,E,15,[[["self"]],[T]]],[11,R[25],E,E,15,[[["self"]],[R[27]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[21],E,E,16,[[[U]],[R[24]]]],[11,R[22],E,E,16,[[],[R[24]]]],[11,"into",E,E,16,[[],[U]]],[11,R[26],E,E,16,[[["self"]],[T]]],[11,R[23],E,E,16,[[["self"]],[T]]],[11,R[25],E,E,16,[[["self"]],[R[27]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[21],E,E,17,[[[U]],[R[24]]]],[11,R[22],E,E,17,[[],[R[24]]]],[11,"into",E,E,17,[[],[U]]],[11,R[26],E,E,17,[[["self"]],[T]]],[11,R[23],E,E,17,[[["self"]],[T]]],[11,R[25],E,E,17,[[["self"]],[R[27]]]],[11,R[141],E,E,17,[[["self"]],[T]]],[11,R[103],E,E,17,[[[T],["self"]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[21],E,E,18,[[[U]],[R[24]]]],[11,R[22],E,E,18,[[],[R[24]]]],[11,"into",E,E,18,[[],[U]]],[11,R[26],E,E,18,[[["self"]],[T]]],[11,R[23],E,E,18,[[["self"]],[T]]],[11,R[25],E,E,18,[[["self"]],[R[27]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[21],E,E,19,[[[U]],[R[24]]]],[11,R[22],E,E,19,[[],[R[24]]]],[11,"into",E,E,19,[[],[U]]],[11,R[26],E,E,19,[[["self"]],[T]]],[11,R[23],E,E,19,[[["self"]],[T]]],[11,R[25],E,E,19,[[["self"]],[R[27]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[21],E,E,20,[[[U]],[R[24]]]],[11,R[22],E,E,20,[[],[R[24]]]],[11,"into",E,E,20,[[],[U]]],[11,R[26],E,E,20,[[["self"]],[T]]],[11,R[23],E,E,20,[[["self"]],[T]]],[11,R[25],E,E,20,[[["self"]],[R[27]]]],[11,R[141],E,E,20,[[["self"]],[T]]],[11,R[103],E,E,20,[[[T],["self"]]]],[11,"from",R[563],E,21,[[[T]],[T]]],[11,R[21],E,E,21,[[[U]],[R[24]]]],[11,R[22],E,E,21,[[],[R[24]]]],[11,"into",E,E,21,[[],[U]]],[11,R[26],E,E,21,[[["self"]],[T]]],[11,R[23],E,E,21,[[["self"]],[T]]],[11,R[25],E,E,21,[[["self"]],[R[27]]]],[11,"from",R[560],E,22,[[[T]],[T]]],[11,R[21],E,E,22,[[[U]],[R[24]]]],[11,R[22],E,E,22,[[],[R[24]]]],[11,"into",E,E,22,[[],[U]]],[11,R[26],E,E,22,[[["self"]],[T]]],[11,R[23],E,E,22,[[["self"]],[T]]],[11,R[25],E,E,22,[[["self"]],[R[27]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[21],E,E,23,[[[U]],[R[24]]]],[11,R[22],E,E,23,[[],[R[24]]]],[11,"into",E,E,23,[[],[U]]],[11,R[26],E,E,23,[[["self"]],[T]]],[11,R[23],E,E,23,[[["self"]],[T]]],[11,R[25],E,E,23,[[["self"]],[R[27]]]],[11,"from",R[574],E,24,[[[T]],[T]]],[11,R[21],E,E,24,[[[U]],[R[24]]]],[11,R[22],E,E,24,[[],[R[24]]]],[11,"into",E,E,24,[[],[U]]],[11,R[26],E,E,24,[[["self"]],[T]]],[11,R[23],E,E,24,[[["self"]],[T]]],[11,R[25],E,E,24,[[["self"]],[R[27]]]],[11,"to_string",E,E,24,[[["self"]],["string"]]],[11,"fmt",R[549],E,8,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[573],E,17,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,20,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[563],E,21,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[574],E,24,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,24,[[["self"],[R[29]]],[R[24]]]],[11,"deref",R[573],E,16,[[["self"]],["mutex"]]],[11,"drop",R[544],E,0,[[["self"]]]],[11,"clone",R[566],E,2,[[["self"]],["addressspacestate"]]],[11,"clone",R[549],E,8,[[["self"]],[R[102]]]],[11,"clone",R[573],E,17,[[["self"]],[R[575]]]],[11,"clone",E,E,20,[[["self"]],[R[556]]]],[11,"alloc",E,E,16,[[["self"],["layout"]]]],[11,"dealloc",E,E,16,[[["self"],["layout"]]]],[11,R[576],R[571],E,12,[[["self"],[R[2]]],[["range",["frame"]],["frame"]]]],[11,"free_n",E,E,12,[[["frame"],["self"],[R[2]]]]],[11,"enabled",R[569],E,26,[[["self"],[R[40]]],["bool"]]],[11,"log",E,E,26,[[["record"],["self"]]]],[11,"flush",E,E,26,[[["self"]]]],[11,R[552],R[565],E,1,[[["self"],[R[2]]],[R[577]]]],[11,R[553],E,E,1,[[[R[577]],["self"]]]]],"p":[[3,"Arch"],[3,R[578]],[3,R[579]],[3,R[555]],[3,"StackSet"],[4,R[580]],[3,"Cpu"],[3,R[581]],[3,R[107]],[3,R[582]],[3,R[583]],[3,R[584]],[3,R[585]],[3,"Task"],[8,R[586]],[3,R[587]],[3,R[588]],[3,"HoleInfo"],[3,"Hole"],[3,"HoleList"],[3,R[589]],[4,R[590]],[3,R[591]],[4,"Entry"],[3,R[592]],[8,"Bitmap"],[3,R[593]]]};
searchIndex["log"]={"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \"payload\" of a log message.",N,N],[3,R[53],E,"Builder for `Record`.",N,N],[3,R[54],E,"Metadata about a log message.",N,N],[3,R[55],E,"Builder for `Metadata`.",N,N],[3,R[56],E,"The type returned by [`set_logger`] if [`set_logger`] has…",N,N],[3,R[57],E,"The type returned by [`from_str`] when the string doesn't…",N,N],[4,"Level",E,"An enum representing the available verbosity levels of the…",N,N],[13,"Error",E,"The \"error\" level.",0,N],[13,"Warn",E,"The \"warn\" level.",0,N],[13,"Info",E,"The \"info\" level.",0,N],[13,"Debug",E,"The \"debug\" level.",0,N],[13,"Trace",E,"The \"trace\" level.",0,N],[4,R[52],E,"An enum representing the available verbosity level filters…",N,N],[13,"Off",E,"A level lower than all log levels.",1,N],[13,"Error",E,"Corresponds to the `Error` log level.",1,N],[13,"Warn",E,"Corresponds to the `Warn` log level.",1,N],[13,"Info",E,"Corresponds to the `Info` log level.",1,N],[13,"Debug",E,"Corresponds to the `Debug` log level.",1,N],[13,"Trace",E,"Corresponds to the `Trace` log level.",1,N],[5,"set_max_level",E,"Sets the global maximum log level.",N,[[[R[38]]]]],[5,"max_level",E,"Returns the current maximum log level.",N,[[],[R[38]]]],[5,"set_logger",E,"Sets the global logger to a `&'static Log`.",N,[[["log"]],[[R[39]],[R[24],[R[39]]]]]],[5,"logger",E,"Returns a reference to the logger.",N,[[],["log"]]],[17,"STATIC_MAX_LEVEL",E,"The statically resolved maximum log level.",N,N],[8,"Log",E,"A trait encapsulating the operations required of a logger.",N,N],[10,"enabled",E,"Determines if a log message with the specified metadata…",2,[[[R[40]],["self"]],["bool"]]],[10,"log",E,"Logs the `Record`.",2,[[["record"],["self"]]]],[10,"flush",E,"Flushes any buffered records.",2,[[["self"]]]],[11,"max",E,"Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter",E,"Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],[R[38]]]],[11,"max",E,"Returns the most verbose logging level filter.",1,[[],[R[38]]]],[11,"to_level",E,"Converts `self` to the equivalent `Level`.",1,[[["self"]],[["level"],[R[20],["level"]]]]],[11,"builder",E,R[44],3,[[],[R[41]]]],[11,"args",E,"The message body.",3,[[["self"]],[R[42]]]],[11,R[40],E,"Metadata about the log directive.",3,[[["self"]],[R[40]]]],[11,"level",E,R[45],3,[[["self"]],["level"]]],[11,"target",E,R[46],3,[[["self"]],["str"]]],[11,R[43],E,"The module path of the message.",3,[[["self"]],[["str"],[R[20],["str"]]]]],[11,"file",E,"The source file containing the message.",3,[[["self"]],[["str"],[R[20],["str"]]]]],[11,"line",E,"The line containing the message.",3,[[["self"]],[["u32"],[R[20],["u32"]]]]],[11,"new",E,"Construct new `RecordBuilder`.",4,[[],[R[41]]]],[11,"args",E,"Set `args`.",4,[[["self"],[R[42]]],[R[41]]]],[11,R[40],E,"Set `metadata`. Construct a `Metadata` object with…",4,[[["self"],[R[40]]],[R[41]]]],[11,"level",E,"Set `Metadata::level`.",4,[[["self"],["level"]],[R[41]]]],[11,"target",E,"Set `Metadata::target`",4,[[["str"],["self"]],[R[41]]]],[11,R[43],E,"Set `module_path`",4,[[["str"],["self"],[R[20],["str"]]],[R[41]]]],[11,"file",E,"Set `file`",4,[[["str"],["self"],[R[20],["str"]]],[R[41]]]],[11,"line",E,"Set `line`",4,[[["u32"],["self"],[R[20],["u32"]]],[R[41]]]],[11,"build",E,"Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder",E,R[44],5,[[],[R[47]]]],[11,"level",E,R[45],5,[[["self"]],["level"]]],[11,"target",E,R[46],5,[[["self"]],["str"]]],[11,"new",E,"Construct a new `MetadataBuilder`.",6,[[],[R[47]]]],[11,"level",E,"Setter for `level`.",6,[[["self"],["level"]],[R[47]]]],[11,"target",E,"Setter for `target`.",6,[[["str"],["self"]],[R[47]]]],[11,"build",E,"Returns a `Metadata` object.",6,[[["self"]],[R[40]]]],[14,"log",E,"The standard logging macro.",N,N],[14,"error",E,"Logs a message at the error level.",N,N],[14,"warn",E,"Logs a message at the warn level.",N,N],[14,"info",E,"Logs a message at the info level.",N,N],[14,"debug",E,"Logs a message at the debug level.",N,N],[14,"trace",E,"Logs a message at the trace level.",N,N],[14,"log_enabled",E,"Determines if a message logged at the specified level in…",N,N],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[[U]],[R[24]]]],[11,R[22],E,E,3,[[],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"]],[R[27]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[[U]],[R[24]]]],[11,R[22],E,E,4,[[],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,R[26],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"]],[R[27]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[[U]],[R[24]]]],[11,R[22],E,E,5,[[],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"]],[R[27]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[[U]],[R[24]]]],[11,R[22],E,E,6,[[],[R[24]]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"]],[R[27]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[[U]],[R[24]]]],[11,R[22],E,E,7,[[],[R[24]]]],[11,"into",E,E,7,[[],[U]]],[11,R[26],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[25],E,E,7,[[["self"]],[R[27]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[[U]],[R[24]]]],[11,R[22],E,E,8,[[],[R[24]]]],[11,"into",E,E,8,[[],[U]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[25],E,E,8,[[["self"]],[R[27]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,3,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,4,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,5,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,6,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,7,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,8,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,7,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,8,[[["self"],[R[29]]],[R[24]]]],[11,"eq",E,E,0,[[["self"],["level"]],["bool"]]],[11,"eq",E,E,0,[[["self"],[R[38]]],["bool"]]],[11,"eq",E,E,1,[[["self"],[R[38]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["level"]],["bool"]]],[11,"eq",E,E,5,[[[R[40]],["self"]],["bool"]]],[11,"ne",E,E,5,[[[R[40]],["self"]],["bool"]]],[11,"eq",E,E,6,[[[R[47]],["self"]],["bool"]]],[11,"ne",E,E,6,[[[R[47]],["self"]],["bool"]]],[11,"eq",E,E,8,[[[R[48]],["self"]],["bool"]]],[11,"ne",E,E,8,[[[R[48]],["self"]],["bool"]]],[11,"cmp",E,E,0,[[["self"],["level"]],[R[49]]]],[11,"cmp",E,E,1,[[["self"],[R[38]]],[R[49]]]],[11,"cmp",E,E,5,[[[R[40]],["self"]],[R[49]]]],[11,"cmp",E,E,6,[[[R[47]],["self"]],[R[49]]]],[11,R[50],E,E,0,[[["self"],["level"]],[[R[49]],[R[20],[R[49]]]]]],[11,"lt",E,E,0,[[["self"],["level"]],["bool"]]],[11,"le",E,E,0,[[["self"],["level"]],["bool"]]],[11,"gt",E,E,0,[[["self"],["level"]],["bool"]]],[11,"ge",E,E,0,[[["self"],["level"]],["bool"]]],[11,R[50],E,E,0,[[["self"],[R[38]]],[[R[49]],[R[20],[R[49]]]]]],[11,"lt",E,E,0,[[["self"],[R[38]]],["bool"]]],[11,"le",E,E,0,[[["self"],[R[38]]],["bool"]]],[11,"gt",E,E,0,[[["self"],[R[38]]],["bool"]]],[11,"ge",E,E,0,[[["self"],[R[38]]],["bool"]]],[11,R[50],E,E,1,[[["self"],[R[38]]],[[R[49]],[R[20],[R[49]]]]]],[11,"lt",E,E,1,[[["self"],[R[38]]],["bool"]]],[11,"le",E,E,1,[[["self"],[R[38]]],["bool"]]],[11,"gt",E,E,1,[[["self"],[R[38]]],["bool"]]],[11,"ge",E,E,1,[[["self"],[R[38]]],["bool"]]],[11,R[50],E,E,1,[[["self"],["level"]],[[R[49]],[R[20],[R[49]]]]]],[11,"lt",E,E,1,[[["self"],["level"]],["bool"]]],[11,"le",E,E,1,[[["self"],["level"]],["bool"]]],[11,"gt",E,E,1,[[["self"],["level"]],["bool"]]],[11,"ge",E,E,1,[[["self"],["level"]],["bool"]]],[11,R[50],E,E,5,[[[R[40]],["self"]],[[R[20],[R[49]]],[R[49]]]]],[11,"lt",E,E,5,[[[R[40]],["self"]],["bool"]]],[11,"le",E,E,5,[[[R[40]],["self"]],["bool"]]],[11,"gt",E,E,5,[[[R[40]],["self"]],["bool"]]],[11,"ge",E,E,5,[[[R[40]],["self"]],["bool"]]],[11,R[50],E,E,6,[[[R[47]],["self"]],[[R[20],[R[49]]],[R[49]]]]],[11,"lt",E,E,6,[[[R[47]],["self"]],["bool"]]],[11,"le",E,E,6,[[[R[47]],["self"]],["bool"]]],[11,"gt",E,E,6,[[[R[47]],["self"]],["bool"]]],[11,"ge",E,E,6,[[[R[47]],["self"]],["bool"]]],[11,"hash",E,E,0,[[["self"],["__h"]]]],[11,"hash",E,E,1,[[["self"],["__h"]]]],[11,"hash",E,E,5,[[["self"],["__h"]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]],[11,R[51],E,E,0,[[["str"]],[[R[24],["level"]],["level"]]]],[11,R[51],E,E,1,[[["str"]],[[R[38]],[R[24],[R[38]]]]]],[11,"clone",E,E,0,[[["self"]],["level"]]],[11,"clone",E,E,1,[[["self"]],[R[38]]]],[11,"clone",E,E,3,[[["self"]],["record"]]],[11,"clone",E,E,5,[[["self"]],[R[40]]]]],"p":[[4,"Level"],[4,R[52]],[8,"Log"],[3,"Record"],[3,R[53]],[3,R[54]],[3,R[55]],[3,R[56]],[3,R[57]]]};
searchIndex["num"]={"doc":"A collection of numeric types and traits for Rust.","i":[[3,"Complex","num",R[278],N,N],[12,"re",E,R[279],0,N],[12,"im",E,R[280],0,N],[6,R[402],E,R[364],N,N],[8,"Integer",E,E,N,N],[10,R[198],E,R[281],1,[[["self"]],["self"]]],[10,R[199],E,R[282],1,[[["self"]],["self"]]],[10,"gcd",E,R[283],1,[[["self"]],["self"]]],[10,"lcm",E,R[284],1,[[["self"]],["self"]]],[10,"divides",E,R[285],1,[[["self"]],["bool"]]],[10,R[286],E,R[287],1,[[["self"]],["bool"]]],[10,"is_even",E,R[288],1,[[["self"]],["bool"]]],[10,"is_odd",E,R[289],1,[[["self"]],["bool"]]],[10,"div_rem",E,R[290],1,[[["self"]]]],[11,R[200],E,R[291],1,[[["self"]]]],[5,"range",E,R[292],N,[[["a"]],["range"]]],[5,R[293],E,R[294],N,[[["a"]],[R[223]]]],[5,R[295],E,R[296],N,[[["a"]],[R[224]]]],[5,R[297],E,R[298],N,[[["a"]],[R[225]]]],[8,"Num",E,R[360],N,N],[16,R[361],E,E,2,N],[10,R[219],E,R[362],2,[[["u32"],["str"]],[R[24]]]],[8,"Zero",E,R[311],N,N],[10,"zero",E,R[312],3,[[],["self"]]],[10,R[429],E,R[313],3,[[["self"]],["bool"]]],[8,"One",E,R[314],N,N],[10,"one",E,R[315],4,[[],["self"]]],[11,"is_one",E,R[316],4,[[["self"]],["bool"]]],[8,"Signed",E,R[356],N,N],[10,"abs",E,R[70],5,[[["self"]],["self"]]],[10,R[430],E,R[71],5,[[["self"]],["self"]]],[10,"signum",E,R[72],5,[[["self"]],["self"]]],[10,R[240],E,R[357],5,[[["self"]],["bool"]]],[10,R[241],E,R[358],5,[[["self"]],["bool"]]],[8,R[531],E,R[359],N,N],[8,"Bounded",E,R[299],N,N],[10,R[60],E,R[300],6,[[],["self"]]],[10,R[61],E,R[301],6,[[],["self"]]],[5,"one",E,R[318],N,[[],[T]]],[5,"zero",E,R[317],N,[[],[T]]],[5,"abs",E,R[70],N,[[[T]],[T]]],[5,R[430],E,R[71],N,[[[T]],[T]]],[5,"signum",E,R[72],N,[[[T]],[T]]],[8,R[89],E,R[349],N,N],[10,R[350],E,R[351],7,[[],["self"]]],[10,R[352],E,R[353],7,[[],["self"]]],[8,R[80],E,R[340],N,N],[10,R[236],E,R[341],8,[[["self"]],[R[20]]]],[8,R[81],E,R[342],N,N],[10,R[237],E,R[343],9,[[["self"]],[R[20]]]],[8,R[82],E,R[344],N,N],[10,R[238],E,R[345],10,[[["self"]],[R[20]]]],[8,R[83],E,R[346],N,N],[10,R[239],E,R[347],11,[[["self"]],[R[20]]]],[8,"PrimInt",E,E,N,N],[10,R[319],E,R[320],12,[[],["u32"]]],[10,R[321],E,R[322],12,[[],["u32"]]],[10,R[323],E,R[324],12,[[],["u32"]]],[10,R[325],E,R[326],12,[[],["u32"]]],[10,R[327],E,R[62],12,[[["u32"]],["self"]]],[10,R[328],E,R[63],12,[[["u32"]],["self"]]],[10,R[329],E,R[62],12,[[["u32"]],["self"]]],[10,R[330],E,R[63],12,[[["u32"]],["self"]]],[10,R[331],E,R[62],12,[[["u32"]],["self"]]],[10,R[332],E,R[63],12,[[["u32"]],["self"]]],[10,R[333],E,R[334],12,[[],["self"]]],[10,"from_be",E,R[335],12,[[],["self"]]],[10,"from_le",E,R[336],12,[[],["self"]]],[10,"to_be",E,R[337],12,[[],["self"]]],[10,"to_le",E,R[338],12,[[],["self"]]],[10,"pow",E,R[339],12,[[["u32"]],["self"]]],[8,R[75],E,R[242],N,N],[11,R[303],E,R[243],13,[[["self"]],[["isize"],[R[20],["isize"]]]]],[11,"to_i8",E,R[244],13,[[["self"]],[[R[20],["i8"]],["i8"]]]],[11,"to_i16",E,R[245],13,[[["self"]],[[R[20],["i16"]],["i16"]]]],[11,"to_i32",E,R[246],13,[[["self"]],[["i32"],[R[20],["i32"]]]]],[10,"to_i64",E,R[247],13,[[["self"]],[["i64"],[R[20],["i64"]]]]],[11,R[431],E,R[248],13,[[["self"]],[["i128"],[R[20],["i128"]]]]],[11,R[304],E,R[249],13,[[["self"]],[[R[20],[R[2]]],[R[2]]]]],[11,"to_u8",E,R[250],13,[[["self"]],[[R[20],["u8"]],["u8"]]]],[11,"to_u16",E,R[251],13,[[["self"]],[["u16"],[R[20],["u16"]]]]],[11,"to_u32",E,R[252],13,[[["self"]],[["u32"],[R[20],["u32"]]]]],[10,"to_u64",E,R[253],13,[[["self"]],[[R[20],["u64"]],["u64"]]]],[11,R[432],E,R[254],13,[[["self"]],[["u128"],[R[20],["u128"]]]]],[11,"to_f32",E,R[255],13,[[["self"]],[["f32"],[R[20],["f32"]]]]],[11,"to_f64",E,R[256],13,[[["self"]],[["f64"],[R[20],["f64"]]]]],[8,R[76],E,R[257],N,N],[11,R[211],E,R[258],14,[[["isize"]],[R[20]]]],[11,R[433],E,R[259],14,[[["i8"]],[R[20]]]],[11,R[305],E,R[260],14,[[["i16"]],[R[20]]]],[11,R[306],E,R[261],14,[[["i32"]],[R[20]]]],[10,R[231],E,R[262],14,[[["i64"]],[R[20]]]],[11,R[212],E,R[263],14,[[["i128"]],[R[20]]]],[11,R[213],E,R[264],14,[[[R[2]]],[R[20]]]],[11,R[434],E,R[265],14,[[["u8"]],[R[20]]]],[11,R[307],E,R[266],14,[[["u16"]],[R[20]]]],[11,R[308],E,R[267],14,[[["u32"]],[R[20]]]],[10,R[232],E,R[268],14,[[["u64"]],[R[20]]]],[11,R[214],E,R[269],14,[[["u128"]],[R[20]]]],[11,R[233],E,R[270],14,[[["f32"]],[R[20]]]],[11,R[234],E,R[271],14,[[["f64"]],[R[20]]]],[8,R[541],E,R[272],N,N],[10,"from",E,R[273],15,[[[T]],[R[20]]]],[0,"cast",E,E,N,N],[8,R[75],"num::cast",R[242],N,N],[11,R[303],E,R[243],13,[[["self"]],[["isize"],[R[20],["isize"]]]]],[11,"to_i8",E,R[244],13,[[["self"]],[[R[20],["i8"]],["i8"]]]],[11,"to_i16",E,R[245],13,[[["self"]],[[R[20],["i16"]],["i16"]]]],[11,"to_i32",E,R[246],13,[[["self"]],[["i32"],[R[20],["i32"]]]]],[10,"to_i64",E,R[247],13,[[["self"]],[["i64"],[R[20],["i64"]]]]],[11,R[431],E,R[248],13,[[["self"]],[["i128"],[R[20],["i128"]]]]],[11,R[304],E,R[249],13,[[["self"]],[[R[20],[R[2]]],[R[2]]]]],[11,"to_u8",E,R[250],13,[[["self"]],[[R[20],["u8"]],["u8"]]]],[11,"to_u16",E,R[251],13,[[["self"]],[["u16"],[R[20],["u16"]]]]],[11,"to_u32",E,R[252],13,[[["self"]],[["u32"],[R[20],["u32"]]]]],[10,"to_u64",E,R[253],13,[[["self"]],[[R[20],["u64"]],["u64"]]]],[11,R[432],E,R[254],13,[[["self"]],[["u128"],[R[20],["u128"]]]]],[11,"to_f32",E,R[255],13,[[["self"]],[["f32"],[R[20],["f32"]]]]],[11,"to_f64",E,R[256],13,[[["self"]],[["f64"],[R[20],["f64"]]]]],[8,R[76],E,R[257],N,N],[11,R[211],E,R[258],14,[[["isize"]],[R[20]]]],[11,R[433],E,R[259],14,[[["i8"]],[R[20]]]],[11,R[305],E,R[260],14,[[["i16"]],[R[20]]]],[11,R[306],E,R[261],14,[[["i32"]],[R[20]]]],[10,R[231],E,R[262],14,[[["i64"]],[R[20]]]],[11,R[212],E,R[263],14,[[["i128"]],[R[20]]]],[11,R[213],E,R[264],14,[[[R[2]]],[R[20]]]],[11,R[434],E,R[265],14,[[["u8"]],[R[20]]]],[11,R[307],E,R[266],14,[[["u16"]],[R[20]]]],[11,R[308],E,R[267],14,[[["u32"]],[R[20]]]],[10,R[232],E,R[268],14,[[["u64"]],[R[20]]]],[11,R[214],E,R[269],14,[[["u128"]],[R[20]]]],[11,R[233],E,R[270],14,[[["f32"]],[R[20]]]],[11,R[234],E,R[271],14,[[["f64"]],[R[20]]]],[5,"cast",E,R[274],N,[[[T]],[R[20]]]],[8,R[541],E,R[272],N,N],[10,"from",E,R[273],15,[[[T]],[R[20]]]],[8,R[77],E,R[309],N,N],[10,"as_",E,R[310],16,[[],[T]]],[5,"cast","num",R[274],N,[[[T]],[R[20]]]],[0,"pow",E,E,N,N],[8,"Pow","num::pow",R[354],N,N],[16,"Output",E,R[68],17,N],[10,"pow",E,R[355],17,[[["rhs"]]]],[5,"pow",E,R[275],N,[[[R[2]],[T]],[T]]],[5,R[276],E,R[277],N,[[[R[2]],[T]],[R[20]]]],[5,"pow","num",R[275],N,[[[R[2]],[T]],[T]]],[5,R[276],E,R[277],N,[[[R[2]],[T]],[R[20]]]],[5,"clamp",E,R[363],N,[[[T]],[T]]],[0,R[203],E,E,N,N],[3,"Complex",R[365],R[278],N,N],[12,"re",E,R[279],0,N],[12,"im",E,R[280],0,N],[6,R[387],E,E,N,N],[6,R[388],E,E,N,N],[3,R[209],E,E,N,N],[0,R[194],"num",E,N,N],[8,"Integer",R[366],E,N,N],[10,R[198],E,R[281],1,[[["self"]],["self"]]],[10,R[199],E,R[282],1,[[["self"]],["self"]]],[10,"gcd",E,R[283],1,[[["self"]],["self"]]],[10,"lcm",E,R[284],1,[[["self"]],["self"]]],[10,"divides",E,R[285],1,[[["self"]],["bool"]]],[10,R[286],E,R[287],1,[[["self"]],["bool"]]],[10,"is_even",E,R[288],1,[[["self"]],["bool"]]],[10,"is_odd",E,R[289],1,[[["self"]],["bool"]]],[10,"div_rem",E,R[290],1,[[["self"]]]],[11,R[200],E,R[291],1,[[["self"]]]],[5,"div_rem",E,R[375],N,[[[T]]]],[5,R[198],E,R[376],N,[[[T]],[T]]],[5,R[199],E,R[377],N,[[[T]],[T]]],[5,R[200],E,R[378],N,[[[T]]]],[5,"gcd",E,R[379],N,[[[T]],[T]]],[5,"lcm",E,R[380],N,[[[T]],[T]]],[3,R[201],E,R[373],N,N],[5,"binomial",E,R[381],N,[[[T]],[T]]],[5,R[382],E,R[383],N,[[],[T]]],[8,"Roots",E,R[384],N,N],[10,R[374],E,R[195],18,[[["u32"],["self"]],["self"]]],[11,"sqrt",E,R[196],18,[[["self"]],["self"]]],[11,"cbrt",E,R[197],18,[[["self"]],["self"]]],[5,"sqrt",E,R[196],N,[[[T]],[T]]],[5,R[374],E,R[195],N,[[["u32"],[T]],[T]]],[5,"cbrt",E,R[197],N,[[[T]],[T]]],[0,"iter","num",E,N,N],[3,"Range",R[367],R[369],N,N],[5,"range",E,R[292],N,[[["a"]],["range"]]],[3,R[226],E,R[370],N,N],[5,R[293],E,R[294],N,[[["a"]],[R[223]]]],[3,R[227],E,R[371],N,N],[5,R[295],E,R[296],N,[[["a"]],[R[224]]]],[3,R[228],E,R[372],N,N],[5,R[297],E,R[298],N,[[["a"]],[R[225]]]],[0,"traits","num",E,N,N],[0,"bounds",R[302],E,N,N],[8,"Bounded","num::traits::bounds",R[299],N,N],[10,R[60],E,R[300],6,[[],["self"]]],[10,R[61],E,R[301],6,[[],["self"]]],[0,"cast",R[302],E,N,N],[8,R[75],"num::traits::cast",R[242],N,N],[11,R[303],E,R[243],13,[[["self"]],[["isize"],[R[20],["isize"]]]]],[11,"to_i8",E,R[244],13,[[["self"]],[[R[20],["i8"]],["i8"]]]],[11,"to_i16",E,R[245],13,[[["self"]],[[R[20],["i16"]],["i16"]]]],[11,"to_i32",E,R[246],13,[[["self"]],[["i32"],[R[20],["i32"]]]]],[10,"to_i64",E,R[247],13,[[["self"]],[["i64"],[R[20],["i64"]]]]],[11,R[431],E,R[248],13,[[["self"]],[["i128"],[R[20],["i128"]]]]],[11,R[304],E,R[249],13,[[["self"]],[[R[20],[R[2]]],[R[2]]]]],[11,"to_u8",E,R[250],13,[[["self"]],[[R[20],["u8"]],["u8"]]]],[11,"to_u16",E,R[251],13,[[["self"]],[["u16"],[R[20],["u16"]]]]],[11,"to_u32",E,R[252],13,[[["self"]],[["u32"],[R[20],["u32"]]]]],[10,"to_u64",E,R[253],13,[[["self"]],[[R[20],["u64"]],["u64"]]]],[11,R[432],E,R[254],13,[[["self"]],[["u128"],[R[20],["u128"]]]]],[11,"to_f32",E,R[255],13,[[["self"]],[["f32"],[R[20],["f32"]]]]],[11,"to_f64",E,R[256],13,[[["self"]],[["f64"],[R[20],["f64"]]]]],[8,R[76],E,R[257],N,N],[11,R[211],E,R[258],14,[[["isize"]],[R[20]]]],[11,R[433],E,R[259],14,[[["i8"]],[R[20]]]],[11,R[305],E,R[260],14,[[["i16"]],[R[20]]]],[11,R[306],E,R[261],14,[[["i32"]],[R[20]]]],[10,R[231],E,R[262],14,[[["i64"]],[R[20]]]],[11,R[212],E,R[263],14,[[["i128"]],[R[20]]]],[11,R[213],E,R[264],14,[[[R[2]]],[R[20]]]],[11,R[434],E,R[265],14,[[["u8"]],[R[20]]]],[11,R[307],E,R[266],14,[[["u16"]],[R[20]]]],[11,R[308],E,R[267],14,[[["u32"]],[R[20]]]],[10,R[232],E,R[268],14,[[["u64"]],[R[20]]]],[11,R[214],E,R[269],14,[[["u128"]],[R[20]]]],[11,R[233],E,R[270],14,[[["f32"]],[R[20]]]],[11,R[234],E,R[271],14,[[["f64"]],[R[20]]]],[5,"cast",E,R[274],N,[[[T]],[R[20]]]],[8,R[541],E,R[272],N,N],[10,"from",E,R[273],15,[[[T]],[R[20]]]],[8,R[77],E,R[309],N,N],[10,"as_",E,R[310],16,[[],[T]]],[0,"float",R[302],E,N,N],[8,R[78],"num::traits::float",R[435],N,N],[10,"infinity",E,R[436],19,[[],["self"]]],[10,R[437],E,R[438],19,[[],["self"]]],[10,"nan",E,R[439],19,[[],["self"]]],[10,"neg_zero",E,R[440],19,[[],["self"]]],[10,R[60],E,R[441],19,[[],["self"]]],[10,R[442],E,R[443],19,[[],["self"]]],[10,"epsilon",E,R[444],19,[[],["self"]]],[10,R[61],E,R[445],19,[[],["self"]]],[11,"is_nan",E,R[446],19,[[],["bool"]]],[11,R[216],E,R[447],19,[[],["bool"]]],[11,R[217],E,R[448],19,[[],["bool"]]],[11,R[218],E,R[449],19,[[],["bool"]]],[10,"classify",E,R[450],19,[[],[R[451]]]],[11,"floor",E,R[452],19,[[],["self"]]],[11,"ceil",E,R[453],19,[[],["self"]]],[11,"round",E,R[454],19,[[],["self"]]],[11,"trunc",E,R[455],19,[[],["self"]]],[11,"fract",E,R[456],19,[[],["self"]]],[11,"abs",E,R[457],19,[[],["self"]]],[11,"signum",E,R[458],19,[[],["self"]]],[11,R[459],E,R[460],19,[[],["bool"]]],[11,R[461],E,R[462],19,[[],["bool"]]],[11,"min",E,R[463],19,[[],["self"]]],[11,"max",E,R[464],19,[[],["self"]]],[11,"recip",E,R[465],19,[[],["self"]]],[11,"powi",E,R[466],19,[[["i32"]],["self"]]],[10,R[467],E,R[468],19,[[],["self"]]],[10,R[469],E,R[470],19,[[],["self"]]],[10,R[471],E,R[472],19,[[]]],[8,R[79],E,E,N,N],[10,"E",E,R[473],20,[[],["self"]]],[10,R[474],E,R[475],20,[[],["self"]]],[10,R[476],E,R[477],20,[[],["self"]]],[10,R[478],E,R[479],20,[[],["self"]]],[10,R[480],E,R[481],20,[[],["self"]]],[10,R[482],E,R[483],20,[[],["self"]]],[10,R[484],E,R[485],20,[[],["self"]]],[10,R[486],E,R[487],20,[[],["self"]]],[10,R[488],E,R[489],20,[[],["self"]]],[10,R[490],E,R[491],20,[[],["self"]]],[10,"LN_10",E,R[492],20,[[],["self"]]],[10,"LN_2",E,R[493],20,[[],["self"]]],[10,"LOG10_E",E,R[494],20,[[],["self"]]],[10,"LOG2_E",E,R[495],20,[[],["self"]]],[10,"PI",E,R[496],20,[[],["self"]]],[10,"SQRT_2",E,R[497],20,[[],["self"]]],[0,R[498],R[302],E,N,N],[8,"Zero","num::traits::identities",R[311],N,N],[10,"zero",E,R[312],3,[[],["self"]]],[10,R[429],E,R[313],3,[[["self"]],["bool"]]],[8,"One",E,R[314],N,N],[10,"one",E,R[315],4,[[],["self"]]],[11,"is_one",E,R[316],4,[[["self"]],["bool"]]],[5,"zero",E,R[317],N,[[],[T]]],[5,"one",E,R[318],N,[[],[T]]],[0,"int",R[302],E,N,N],[8,"PrimInt","num::traits::int",E,N,N],[10,R[319],E,R[320],12,[[],["u32"]]],[10,R[321],E,R[322],12,[[],["u32"]]],[10,R[323],E,R[324],12,[[],["u32"]]],[10,R[325],E,R[326],12,[[],["u32"]]],[10,R[327],E,R[62],12,[[["u32"]],["self"]]],[10,R[328],E,R[63],12,[[["u32"]],["self"]]],[10,R[329],E,R[62],12,[[["u32"]],["self"]]],[10,R[330],E,R[63],12,[[["u32"]],["self"]]],[10,R[331],E,R[62],12,[[["u32"]],["self"]]],[10,R[332],E,R[63],12,[[["u32"]],["self"]]],[10,R[333],E,R[334],12,[[],["self"]]],[10,"from_be",E,R[335],12,[[],["self"]]],[10,"from_le",E,R[336],12,[[],["self"]]],[10,"to_be",E,R[337],12,[[],["self"]]],[10,"to_le",E,R[338],12,[[],["self"]]],[10,"pow",E,R[339],12,[[["u32"]],["self"]]],[0,"ops",R[302],E,N,N],[0,"checked",R[348],E,N,N],[8,R[80],"num::traits::ops::checked",R[340],N,N],[10,R[236],E,R[341],8,[[["self"]],[R[20]]]],[8,R[81],E,R[342],N,N],[10,R[237],E,R[343],9,[[["self"]],[R[20]]]],[8,R[82],E,R[344],N,N],[10,R[238],E,R[345],10,[[["self"]],[R[20]]]],[8,R[83],E,R[346],N,N],[10,R[239],E,R[347],11,[[["self"]],[R[20]]]],[8,R[84],E,R[499],N,N],[10,R[500],E,R[501],21,[[["self"]],[R[20]]]],[8,R[85],E,R[502],N,N],[10,R[503],E,R[504],22,[[["self"]],[R[20]]]],[8,R[86],E,R[505],N,N],[10,R[506],E,R[64],23,[[["u32"],["self"]],[R[20]]]],[8,R[87],E,R[507],N,N],[10,R[508],E,R[64],24,[[["u32"],["self"]],[R[20]]]],[0,"inv",R[348],E,N,N],[8,"Inv","num::traits::ops::inv",R[509],N,N],[16,"Output",E,R[68],25,N],[10,"inv",E,R[510],25,[[]]],[0,"mul_add",R[348],E,N,N],[8,"MulAdd","num::traits::ops::mul_add",R[511],N,N],[16,"Output",E,R[512],26,N],[10,"mul_add",E,R[66],26,[[["a"],["b"]]]],[8,R[88],E,R[513],N,N],[10,R[514],E,R[66],27,[[["self"],["a"],["b"]]]],[0,R[515],R[348],E,N,N],[8,R[89],"num::traits::ops::saturating",R[349],N,N],[10,R[350],E,R[351],7,[[],["self"]]],[10,R[352],E,R[353],7,[[],["self"]]],[0,"wrapping",R[348],E,N,N],[8,R[90],"num::traits::ops::wrapping",R[516],N,N],[10,R[517],E,R[518],28,[[["self"]],["self"]]],[8,R[91],E,R[519],N,N],[10,R[520],E,R[521],29,[[["self"]],["self"]]],[8,R[92],E,R[522],N,N],[10,R[523],E,R[524],30,[[["self"]],["self"]]],[8,R[93],E,R[525],N,N],[10,R[526],E,R[527],31,[[["u32"],["self"]],["self"]]],[8,R[94],E,R[528],N,N],[10,R[529],E,R[530],32,[[["u32"],["self"]],["self"]]],[0,"pow",R[302],E,N,N],[8,"Pow","num::traits::pow",R[354],N,N],[16,"Output",E,R[68],17,N],[10,"pow",E,R[355],17,[[["rhs"]]]],[5,"pow",E,R[275],N,[[[R[2]],[T]],[T]]],[5,R[276],E,R[277],N,[[[R[2]],[T]],[R[20]]]],[0,"sign",R[302],E,N,N],[8,"Signed","num::traits::sign",R[356],N,N],[10,"abs",E,R[70],5,[[["self"]],["self"]]],[10,R[430],E,R[71],5,[[["self"]],["self"]]],[10,"signum",E,R[72],5,[[["self"]],["self"]]],[10,R[240],E,R[357],5,[[["self"]],["bool"]]],[10,R[241],E,R[358],5,[[["self"]],["bool"]]],[5,"abs",E,R[70],N,[[[T]],[T]]],[5,R[430],E,R[71],N,[[[T]],[T]]],[5,"signum",E,R[72],N,[[[T]],[T]]],[8,R[531],E,R[359],N,N],[8,"Num",R[302],R[360],N,N],[16,R[361],E,E,2,N],[10,R[219],E,R[362],2,[[["u32"],["str"]],[R[24]]]],[8,"NumOps",E,R[532],N,N],[8,"NumRef",E,R[533],N,N],[8,"RefNum",E,R[534],N,N],[8,R[535],E,R[536],N,N],[8,R[537],E,R[538],N,N],[8,R[539],E,R[540],N,N],[4,R[74],E,E,N,N],[13,"Empty",E,E,33,N],[13,"Invalid",E,E,33,N],[3,R[73],E,E,N,N],[12,"kind",E,E,34,N],[5,"clamp",E,R[363],N,[[[T]],[T]]],[0,"rational","num",E,N,N],[3,"Ratio",R[368],R[401],N,N],[6,R[402],E,R[364],N,N],[6,R[403],E,R[404],N,N],[6,R[405],E,R[406],N,N],[3,R[235],E,E,N,N],[11,"from",R[365],E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[21],E,E,35,[[[U]],[R[24]]]],[11,R[22],E,E,35,[[],[R[24]]]],[11,"into",E,E,35,[[],[U]]],[11,R[26],E,E,35,[[["self"]],[T]]],[11,R[23],E,E,35,[[["self"]],[T]]],[11,R[25],E,E,35,[[["self"]],[R[27]]]],[11,"from",R[366],E,36,[[[T]],[T]]],[11,R[220],E,E,36,[[],["i"]]],[11,R[21],E,E,36,[[[U]],[R[24]]]],[11,R[22],E,E,36,[[],[R[24]]]],[11,"into",E,E,36,[[],[U]]],[11,R[26],E,E,36,[[["self"]],[T]]],[11,R[23],E,E,36,[[["self"]],[T]]],[11,R[25],E,E,36,[[["self"]],[R[27]]]],[11,"from",R[367],E,37,[[[T]],[T]]],[11,R[220],E,E,37,[[],["i"]]],[11,R[21],E,E,37,[[[U]],[R[24]]]],[11,R[22],E,E,37,[[],[R[24]]]],[11,"into",E,E,37,[[],[U]]],[11,R[26],E,E,37,[[["self"]],[T]]],[11,R[23],E,E,37,[[["self"]],[T]]],[11,R[25],E,E,37,[[["self"]],[R[27]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[220],E,E,38,[[],["i"]]],[11,R[21],E,E,38,[[[U]],[R[24]]]],[11,R[22],E,E,38,[[],[R[24]]]],[11,"into",E,E,38,[[],[U]]],[11,R[26],E,E,38,[[["self"]],[T]]],[11,R[23],E,E,38,[[["self"]],[T]]],[11,R[25],E,E,38,[[["self"]],[R[27]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[220],E,E,39,[[],["i"]]],[11,R[21],E,E,39,[[[U]],[R[24]]]],[11,R[22],E,E,39,[[],[R[24]]]],[11,"into",E,E,39,[[],[U]]],[11,R[26],E,E,39,[[["self"]],[T]]],[11,R[23],E,E,39,[[["self"]],[T]]],[11,R[25],E,E,39,[[["self"]],[R[27]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[220],E,E,40,[[],["i"]]],[11,R[21],E,E,40,[[[U]],[R[24]]]],[11,R[22],E,E,40,[[],[R[24]]]],[11,"into",E,E,40,[[],[U]]],[11,R[26],E,E,40,[[["self"]],[T]]],[11,R[23],E,E,40,[[["self"]],[T]]],[11,R[25],E,E,40,[[["self"]],[R[27]]]],[11,"from",R[302],E,33,[[[T]],[T]]],[11,R[21],E,E,33,[[[U]],[R[24]]]],[11,R[22],E,E,33,[[],[R[24]]]],[11,"into",E,E,33,[[],[U]]],[11,R[26],E,E,33,[[["self"]],[T]]],[11,R[23],E,E,33,[[["self"]],[T]]],[11,R[25],E,E,33,[[["self"]],[R[27]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[21],E,E,34,[[[U]],[R[24]]]],[11,R[22],E,E,34,[[],[R[24]]]],[11,"into",E,E,34,[[],[U]]],[11,R[26],E,E,34,[[["self"]],[T]]],[11,R[23],E,E,34,[[["self"]],[T]]],[11,R[25],E,E,34,[[["self"]],[R[27]]]],[11,"from",R[368],E,41,[[[T]],[T]]],[11,R[21],E,E,41,[[[U]],[R[24]]]],[11,R[22],E,E,41,[[],[R[24]]]],[11,"into",E,E,41,[[],[U]]],[11,R[26],E,E,41,[[["self"]],[T]]],[11,R[23],E,E,41,[[["self"]],[T]]],[11,R[25],E,E,41,[[["self"]],[R[27]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[21],E,E,42,[[[U]],[R[24]]]],[11,R[22],E,E,42,[[],[R[24]]]],[11,"into",E,E,42,[[],[U]]],[11,R[26],E,E,42,[[["self"]],[T]]],[11,R[23],E,E,42,[[["self"]],[T]]],[11,R[25],E,E,42,[[["self"]],[R[27]]]],[11,"sum",R[365],E,0,[[["i"]],[R[203]]]],[11,"sum",E,E,0,[[["i"]],[R[203]]]],[11,R[304],E,E,0,[[["self"]],[[R[20],[R[2]]],[R[2]]]]],[11,R[303],E,E,0,[[["self"]],[["isize"],[R[20],["isize"]]]]],[11,"to_u8",E,E,0,[[["self"]],[[R[20],["u8"]],["u8"]]]],[11,"to_u16",E,E,0,[[["self"]],[["u16"],[R[20],["u16"]]]]],[11,"to_u32",E,E,0,[[["self"]],[["u32"],[R[20],["u32"]]]]],[11,"to_u64",E,E,0,[[["self"]],[[R[20],["u64"]],["u64"]]]],[11,"to_i8",E,E,0,[[["self"]],[[R[20],["i8"]],["i8"]]]],[11,"to_i16",E,E,0,[[["self"]],[[R[20],["i16"]],["i16"]]]],[11,"to_i32",E,E,0,[[["self"]],[["i32"],[R[20],["i32"]]]]],[11,"to_i64",E,E,0,[[["self"]],[["i64"],[R[20],["i64"]]]]],[11,R[432],E,E,0,[[["self"]],[["u128"],[R[20],["u128"]]]]],[11,R[431],E,E,0,[[["self"]],[["i128"],[R[20],["i128"]]]]],[11,"to_f32",E,E,0,[[["self"]],[["f32"],[R[20],["f32"]]]]],[11,"to_f64",E,E,0,[[["self"]],[["f64"],[R[20],["f64"]]]]],[11,"clone",E,E,0,[[["self"]],[R[203]]]],[11,"add",E,E,0,[[[R[203]]],[R[203]]]],[11,"add",E,E,0,[[[T]],[R[203]]]],[11,"add",E,E,0,[[[T]],[R[203]]]],[11,"add",E,E,0,[[[R[203]]],[R[203]]]],[11,"zero",E,E,0,[[],[R[203]]]],[11,R[429],E,E,0,[[["self"]],["bool"]]],[11,R[205],E,E,0,[[["self"],[T]]]],[11,R[205],E,E,0,[[["self"],[T]]]],[11,R[205],E,E,0,[[["self"],[R[203]]]]],[11,R[205],E,E,0,[[["self"],[R[203]]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"hash",E,E,0,[[["self"],["__ht"]]]],[11,R[157],E,E,0,[[["self"],[T]]]],[11,R[157],E,E,0,[[["self"],[R[203]]]]],[11,R[157],E,E,0,[[["self"],[R[203]]]]],[11,R[157],E,E,0,[[["self"],[T]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"fmt",E,E,35,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"rem",E,E,0,[[[R[203]]],[R[203]]]],[11,"rem",E,E,0,[[[T]],[R[203]]]],[11,"rem",E,E,0,[[[R[203]]],[R[203]]]],[11,"rem",E,E,0,[[[T]],[R[203]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"fmt",E,E,35,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,R[210],E,E,0,[[],[R[203]]]],[11,"mul",E,E,0,[[[R[203]]],[R[203]]]],[11,"mul",E,E,0,[[[T]],[R[203]]]],[11,"mul",E,E,0,[[[T]],[R[203]]]],[11,"mul",E,E,0,[[[R[203]]],[R[203]]]],[11,R[207],E,E,0,[[["self"],[T]]]],[11,R[207],E,E,0,[[["self"],[R[203]]]]],[11,R[207],E,E,0,[[["self"],[T]]]],[11,R[207],E,E,0,[[["self"],[R[203]]]]],[11,R[219],E,R[208],0,[[["u32"],["str"]],[[R[203]],[R[24],[R[203]]]]]],[11,R[400],E,E,0,[[["i"]],[R[203]]]],[11,R[400],E,E,0,[[["i"]],[R[203]]]],[11,"inv",E,E,0,[[],[R[203]]]],[11,"from",E,E,0,[[[T]],[R[203]]]],[11,"from",E,E,0,[[[T]],[R[203]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"sub",E,E,0,[[[R[203]]],[R[203]]]],[11,"sub",E,E,0,[[[T]],[R[203]]]],[11,"sub",E,E,0,[[[T]],[R[203]]]],[11,"sub",E,E,0,[[[R[203]]],[R[203]]]],[11,R[213],E,E,0,[[[R[2]]],[[R[203]],[R[20],[R[203]]]]]],[11,R[211],E,E,0,[[["isize"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[434],E,E,0,[[["u8"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[307],E,E,0,[[["u16"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[308],E,E,0,[[["u32"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[232],E,E,0,[[["u64"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[433],E,E,0,[[["i8"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[305],E,E,0,[[["i16"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[306],E,E,0,[[["i32"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[231],E,E,0,[[["i64"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[214],E,E,0,[[["u128"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[212],E,E,0,[[["i128"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[233],E,E,0,[[["f32"]],[[R[203]],[R[20],[R[203]]]]]],[11,R[234],E,E,0,[[["f64"]],[[R[203]],[R[20],[R[203]]]]]],[11,"from",E,E,0,[[[U]],[[R[203]],[R[20],[R[203]]]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"neg",E,E,0,[[],[R[203]]]],[11,R[51],E,R[208],0,[[["str"]],[[R[203]],[R[24],[R[203]]]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"one",E,E,0,[[],[R[203]]]],[11,"is_one",E,E,0,[[["self"]],["bool"]]],[11,R[206],E,E,0,[[["self"],[T]]]],[11,R[206],E,E,0,[[["self"],[T]]]],[11,R[206],E,E,0,[[["self"],[R[203]]]]],[11,R[206],E,E,0,[[["self"],[R[203]]]]],[11,"div",E,E,0,[[[T]],[R[203]]]],[11,"div",E,E,0,[[[R[203]]],[R[203]]]],[11,"div",E,E,0,[[[T]],[R[203]]]],[11,"div",E,E,0,[[[R[203]]],[R[203]]]],[11,R[158],E,E,0,[[["self"],[R[203]]]]],[11,R[158],E,E,0,[[["self"],[T]]]],[11,R[158],E,E,0,[[["self"],[T]]]],[11,R[158],E,E,0,[[["self"],[R[203]]]]],[11,"fmt",E,E,0,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"as_",E,E,0,[[],[U]]],[11,"eq",E,E,0,[[["self"],[R[203]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[203]]],["bool"]]],[11,"eq",E,E,35,[[[R[204]],["self"]],["bool"]]],[11,"ne",E,E,35,[[[R[204]],["self"]],["bool"]]],[11,"fmt",R[302],E,33,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"fmt",E,E,34,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"fmt",E,E,34,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"next",R[366],E,36,[[["self"]],[R[20]]]],[11,"clone",R[367],E,37,[[["self"]],["range"]]],[11,"clone",E,E,38,[[["self"]],[R[223]]]],[11,"clone",E,E,40,[[["self"]],[R[225]]]],[11,"clone",E,E,39,[[["self"]],[R[224]]]],[11,R[222],E,E,38,[[["self"]],[R[20]]]],[11,R[222],E,E,37,[[["self"]],[R[20]]]],[11,"next",E,E,39,[[["self"]],[R[20]]]],[11,"next",E,E,40,[[["self"]],[R[20]]]],[11,"next",E,E,37,[[["self"]],[R[20]]]],[11,R[221],E,E,37,[[["self"]]]],[11,"next",E,E,38,[[["self"]],[R[20]]]],[11,R[221],E,E,38,[[["self"]]]],[11,"sum",R[368],E,41,[[["i"]],["ratio"]]],[11,"sum",E,E,41,[[["i"]],["ratio"]]],[11,R[239],E,E,41,[[["ratio"],["self"]],[["ratio"],[R[20],["ratio"]]]]],[11,"clone",E,E,42,[[["self"]],[R[230]]]],[11,"clone",E,E,41,[[["self"]],["ratio"]]],[11,"add",E,E,41,[[[T]],["ratio"]]],[11,"add",E,E,41,[[[T]],["ratio"]]],[11,"add",E,E,41,[[["ratio"]],["ratio"]]],[11,"add",E,E,41,[[["ratio"]],["ratio"]]],[11,"zero",E,E,41,[[],["ratio"]]],[11,R[429],E,E,41,[[["self"]],["bool"]]],[11,R[205],E,E,41,[[["self"],["ratio"]]]],[11,R[205],E,E,41,[[["self"],[T]]]],[11,R[205],E,E,41,[[["self"],[T]]]],[11,R[205],E,E,41,[[["ratio"],["self"]]]],[11,"hash",E,E,41,[[["h"],["self"]]]],[11,R[237],E,E,41,[[["ratio"],["self"]],[["ratio"],[R[20],["ratio"]]]]],[11,R[157],E,E,41,[[["ratio"],["self"]]]],[11,R[157],E,E,41,[[["self"],[T]]]],[11,R[157],E,E,41,[[["self"],[T]]]],[11,R[157],E,E,41,[[["self"],["ratio"]]]],[11,"fmt",E,E,42,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"fmt",E,E,41,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"rem",E,E,41,[[[T]],["ratio"]]],[11,"rem",E,E,41,[[["ratio"]],["ratio"]]],[11,"rem",E,E,41,[[["ratio"]],["ratio"]]],[11,"rem",E,E,41,[[[T]],["ratio"]]],[11,"fmt",E,R[426],41,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"fmt",E,E,42,[[[R[29]],["self"]],[["error"],[R[24],["error"]]]]],[11,"mul",E,E,41,[[["ratio"]],["ratio"]]],[11,"mul",E,E,41,[[["ratio"]],["ratio"]]],[11,"mul",E,E,41,[[[T]],["ratio"]]],[11,"mul",E,E,41,[[[T]],["ratio"]]],[11,R[207],E,E,41,[[["self"],["ratio"]]]],[11,R[207],E,E,41,[[["self"],[T]]]],[11,R[207],E,E,41,[[["self"],[T]]]],[11,R[207],E,E,41,[[["ratio"],["self"]]]],[11,"pow",E,E,41,[[["u32"]],["ratio"]]],[11,"pow",E,E,41,[[["isize"]],["ratio"]]],[11,"pow",E,E,41,[[["u64"]],["ratio"]]],[11,"pow",E,E,41,[[["u8"]],["ratio"]]],[11,"pow",E,E,41,[[["i16"]],["ratio"]]],[11,"pow",E,E,41,[[["u64"]],["ratio"]]],[11,"pow",E,E,41,[[["isize"]],["ratio"]]],[11,"pow",E,E,41,[[["i64"]],["ratio"]]],[11,"pow",E,E,41,[[["i16"]],["ratio"]]],[11,"pow",E,E,41,[[[R[2]]],["ratio"]]],[11,"pow",E,E,41,[[[R[2]]],["ratio"]]],[11,"pow",E,E,41,[[["u16"]],["ratio"]]],[11,"pow",E,E,41,[[["u8"]],["ratio"]]],[11,"pow",E,E,41,[[["i8"]],["ratio"]]],[11,"pow",E,E,41,[[["u32"]],["ratio"]]],[11,"pow",E,E,41,[[["u16"]],["ratio"]]],[11,"pow",E,E,41,[[["i32"]],["ratio"]]],[11,"pow",E,E,41,[[["i8"]],["ratio"]]],[11,"pow",E,E,41,[[["i32"]],["ratio"]]],[11,"pow",E,E,41,[[["i64"]],["ratio"]]],[11,R[219],E,R[428],41,[[["u32"],["str"]],[["ratio"],[R[24],["ratio",R[230]]],[R[230]]]]],[11,R[400],E,E,41,[[["i"]],["ratio"]]],[11,R[400],E,E,41,[[["i"]],["ratio"]]],[11,"inv",E,E,41,[[],["ratio"]]],[11,R[50],E,E,41,[[["ratio"],["self"]],[[R[49]],[R[20],[R[49]]]]]],[11,"from",E,E,41,[[[T]],["ratio"]]],[11,"from",E,E,41,[[],["ratio"]]],[11,R[231],E,E,41,[[["i64"]],[[R[20],["ratio"]],["ratio",["isize"]]]]],[11,R[212],E,E,41,[[["i128"]],[[R[20],["ratio"]],["ratio",["isize"]]]]],[11,R[232],E,E,41,[[["u64"]],[[R[20],["ratio"]],["ratio",["isize"]]]]],[11,R[214],E,E,41,[[["u128"]],[[R[20],["ratio"]],["ratio",["isize"]]]]],[11,R[233],E,E,41,[[["f32"]],[[R[20],["ratio"]],["ratio",["isize"]]]]],[11,R[234],E,E,41,[[["f64"]],[[R[20],["ratio"]],["ratio",["isize"]]]]],[11,R[231],E,E,41,[[["i64"]],[["ratio",["i16"]],[R[20],["ratio"]]]]],[11,R[212],E,E,41,[[["i128"]],[["ratio",["i16"]],[R[20],["ratio"]]]]],[11,R[232],E,E,41,[[["u64"]],[["ratio",["i16"]],[R[20],["ratio"]]]]],[11,R[214],E,E,41,[[["u128"]],[["ratio",["i16"]],[R[20],["ratio"]]]]],[11,R[233],E,E,41,[[["f32"]],[["ratio",["i16"]],[R[20],["ratio"]]]]],[11,R[234],E,E,41,[[["f64"]],[["ratio",["i16"]],[R[20],["ratio"]]]]],[11,R[231],E,E,41,[[["i64"]],[[R[20],["ratio"]],["ratio",["i128"]]]]],[11,R[212],E,E,41,[[["i128"]],[[R[20],["ratio"]],["ratio",["i128"]]]]],[11,R[232],E,E,41,[[["u64"]],[[R[20],["ratio"]],["ratio",["i128"]]]]],[11,R[214],E,E,41,[[["u128"]],[[R[20],["ratio"]],["ratio",["i128"]]]]],[11,R[233],E,E,41,[[["f32"]],[[R[20],["ratio"]],["ratio",["i128"]]]]],[11,R[234],E,E,41,[[["f64"]],[[R[20],["ratio"]],["ratio",["i128"]]]]],[11,R[231],E,E,41,[[["i64"]],[[R[20],["ratio"]],["ratio",["u64"]]]]],[11,R[212],E,E,41,[[["i128"]],[[R[20],["ratio"]],["ratio",["u64"]]]]],[11,R[232],E,E,41,[[["u64"]],[[R[20],["ratio"]],["ratio",["u64"]]]]],[11,R[214],E,E,41,[[["u128"]],[[R[20],["ratio"]],["ratio",["u64"]]]]],[11,R[233],E,E,41,[[["f32"]],[[R[20],["ratio"]],["ratio",["u64"]]]]],[11,R[234],E,E,41,[[["f64"]],[[R[20],["ratio"]],["ratio",["u64"]]]]],[11,R[231],E,E,41,[[["i64"]],[[R[20],["ratio"]],["ratio",["u32"]]]]],[11,R[212],E,E,41,[[["i128"]],[[R[20],["ratio"]],["ratio",["u32"]]]]],[11,R[232],E,E,41,[[["u64"]],[[R[20],["ratio"]],["ratio",["u32"]]]]],[11,R[214],E,E,41,[[["u128"]],[[R[20],["ratio"]],["ratio",["u32"]]]]],[11,R[233],E,E,41,[[["f32"]],[[R[20],["ratio"]],["ratio",["u32"]]]]],[11,R[234],E,E,41,[[["f64"]],[[R[20],["ratio"]],["ratio",["u32"]]]]],[11,R[231],E,E,41,[[["i64"]],[["ratio",["u16"]],[R[20],["ratio"]]]]],[11,R[212],E,E,41,[[["i128"]],[["ratio",["u16"]],[R[20],["ratio"]]]]],[11,R[232],E,E,41,[[["u64"]],[["ratio",["u16"]],[R[20],["ratio"]]]]],[11,R[214],E,E,41,[[["u128"]],[["ratio",["u16"]],[R[20],["ratio"]]]]],[11,R[233],E,E,41,[[["f32"]],[["ratio",["u16"]],[R[20],["ratio"]]]]],[11,R[234],E,E,41,[[["f64"]],[["ratio",["u16"]],[R[20],["ratio"]]]]],[11,R[231],E,E,41,[[["i64"]],[["ratio",["i64"]],[R[20],["ratio"]]]]],[11,R[212],E,E,41,[[["i128"]],[["ratio",["i64"]],[R[20],["ratio"]]]]],[11,R[232],E,E,41,[[["u64"]],[["ratio",["i64"]],[R[20],["ratio"]]]]],[11,R[214],E,E,41,[[["u128"]],[["ratio",["i64"]],[R[20],["ratio"]]]]],[11,R[233],E,E,41,[[["f32"]],[["ratio",["i64"]],[R[20],["ratio"]]]]],[11,R[234],E,E,41,[[["f64"]],[["ratio",["i64"]],[R[20],["ratio"]]]]],[11,R[231],E,E,41,[[["i64"]],[["ratio",[R[2]]],[R[20],["ratio"]]]]],[11,R[212],E,E,41,[[["i128"]],[["ratio",[R[2]]],[R[20],["ratio"]]]]],[11,R[232],E,E,41,[[["u64"]],[["ratio",[R[2]]],[R[20],["ratio"]]]]],[11,R[214],E,E,41,[[["u128"]],[["ratio",[R[2]]],[R[20],["ratio"]]]]],[11,R[233],E,E,41,[[["f32"]],[["ratio",[R[2]]],[R[20],["ratio"]]]]],[11,R[234],E,E,41,[[["f64"]],[["ratio",[R[2]]],[R[20],["ratio"]]]]],[11,R[231],E,E,41,[[["i64"]],[[R[20],["ratio"]],["ratio",["i32"]]]]],[11,R[212],E,E,41,[[["i128"]],[[R[20],["ratio"]],["ratio",["i32"]]]]],[11,R[232],E,E,41,[[["u64"]],[[R[20],["ratio"]],["ratio",["i32"]]]]],[11,R[214],E,E,41,[[["u128"]],[[R[20],["ratio"]],["ratio",["i32"]]]]],[11,R[233],E,E,41,[[["f32"]],[[R[20],["ratio"]],["ratio",["i32"]]]]],[11,R[234],E,E,41,[[["f64"]],[[R[20],["ratio"]],["ratio",["i32"]]]]],[11,R[231],E,E,41,[[["i64"]],[["ratio",["i8"]],[R[20],["ratio"]]]]],[11,R[212],E,E,41,[[["i128"]],[["ratio",["i8"]],[R[20],["ratio"]]]]],[11,R[232],E,E,41,[[["u64"]],[["ratio",["i8"]],[R[20],["ratio"]]]]],[11,R[214],E,E,41,[[["u128"]],[["ratio",["i8"]],[R[20],["ratio"]]]]],[11,R[233],E,E,41,[[["f32"]],[["ratio",["i8"]],[R[20],["ratio"]]]]],[11,R[234],E,E,41,[[["f64"]],[["ratio",["i8"]],[R[20],["ratio"]]]]],[11,R[231],E,E,41,[[["i64"]],[["ratio",["u128"]],[R[20],["ratio"]]]]],[11,R[212],E,E,41,[[["i128"]],[["ratio",["u128"]],[R[20],["ratio"]]]]],[11,R[232],E,E,41,[[["u64"]],[["ratio",["u128"]],[R[20],["ratio"]]]]],[11,R[214],E,E,41,[[["u128"]],[["ratio",["u128"]],[R[20],["ratio"]]]]],[11,R[233],E,E,41,[[["f32"]],[["ratio",["u128"]],[R[20],["ratio"]]]]],[11,R[234],E,E,41,[[["f64"]],[["ratio",["u128"]],[R[20],["ratio"]]]]],[11,R[231],E,E,41,[[["i64"]],[["ratio",["u8"]],[R[20],["ratio"]]]]],[11,R[212],E,E,41,[[["i128"]],[["ratio",["u8"]],[R[20],["ratio"]]]]],[11,R[232],E,E,41,[[["u64"]],[["ratio",["u8"]],[R[20],["ratio"]]]]],[11,R[214],E,E,41,[[["u128"]],[["ratio",["u8"]],[R[20],["ratio"]]]]],[11,R[233],E,E,41,[[["f32"]],[["ratio",["u8"]],[R[20],["ratio"]]]]],[11,R[234],E,E,41,[[["f64"]],[["ratio",["u8"]],[R[20],["ratio"]]]]],[11,"sub",E,E,41,[[[T]],["ratio"]]],[11,"sub",E,E,41,[[["ratio"]],["ratio"]]],[11,"sub",E,E,41,[[[T]],["ratio"]]],[11,"sub",E,E,41,[[["ratio"]],["ratio"]]],[11,"abs",E,E,41,[[["self"]],["ratio"]]],[11,R[430],E,E,41,[[["ratio"],["self"]],["ratio"]]],[11,"signum",E,E,41,[[["self"]],["ratio"]]],[11,R[240],E,E,41,[[["self"]],["bool"]]],[11,R[241],E,E,41,[[["self"]],["bool"]]],[11,R[236],E,E,41,[[["ratio"],["self"]],[["ratio"],[R[20],["ratio"]]]]],[11,"neg",E,E,41,[[],["ratio"]]],[11,R[51],E,R[427],41,[[["str"]],[["ratio"],[R[24],["ratio",R[230]]],[R[230]]]]],[11,"cmp",E,E,41,[[["ratio"],["self"]],[R[49]]]],[11,"one",E,E,41,[[],["ratio"]]],[11,"is_one",E,E,41,[[["self"]],["bool"]]],[11,R[206],E,E,41,[[["self"],[T]]]],[11,R[206],E,E,41,[[["self"],["ratio"]]]],[11,R[206],E,E,41,[[["ratio"],["self"]]]],[11,R[206],E,E,41,[[["self"],[T]]]],[11,"div",E,E,41,[[["ratio"]],["ratio"]]],[11,"div",E,E,41,[[["ratio"]],["ratio"]]],[11,"div",E,E,41,[[[T]],["ratio"]]],[11,"div",E,E,41,[[[T]],["ratio"]]],[11,R[158],E,E,41,[[["self"],[T]]]],[11,R[158],E,E,41,[[["self"],["ratio"]]]],[11,R[158],E,E,41,[[["ratio"],["self"]]]],[11,R[158],E,E,41,[[["self"],[T]]]],[11,R[238],E,E,41,[[["ratio"],["self"]],[["ratio"],[R[20],["ratio"]]]]],[11,"eq",E,E,42,[[["self"],[R[230]]],["bool"]]],[11,"ne",E,E,42,[[["self"],[R[230]]],["bool"]]],[11,"eq",E,E,41,[[["ratio"],["self"]],["bool"]]],[11,"into",E,E,41,[[]]],[11,"new",R[365],R[389],0,[[[T]],[R[203]]]],[11,"i",E,R[390],0,[[],[R[203]]]],[11,"norm_sqr",E,R[391],0,[[["self"]],[T]]],[11,"scale",E,R[392],0,[[["self"],[T]],[R[203]]]],[11,"unscale",E,R[393],0,[[["self"],[T]],[R[203]]]],[11,"conj",E,R[394],0,[[["self"]],[R[203]]]],[11,"inv",E,R[395],0,[[["self"]],[R[203]]]],[11,"is_nan",E,R[396],0,[[],["bool"]]],[11,R[216],E,R[397],0,[[],["bool"]]],[11,R[217],E,R[398],0,[[],["bool"]]],[11,R[218],E,R[399],0,[[],["bool"]]],[11,"new",R[366],R[385],36,[[[T]],[R[386]]]],[11,"new",R[368],R[407],41,[[[T]],["ratio"]]],[11,R[408],E,R[409],41,[[[T]],["ratio"]]],[11,"new_raw",E,R[410],41,[[[T]],["ratio"]]],[11,R[411],E,R[412],41,[[["self"]],[T]]],[11,"numer",E,R[413],41,[[["self"]],[T]]],[11,"denom",E,R[414],41,[[["self"]],[T]]],[11,R[415],E,R[416],41,[[["self"]],["bool"]]],[11,"reduced",E,R[417],41,[[["self"]],["ratio"]]],[11,"recip",E,R[418],41,[[["self"]],["ratio"]]],[11,"floor",E,R[419],41,[[["self"]],["ratio"]]],[11,"ceil",E,R[420],41,[[["self"]],["ratio"]]],[11,"round",E,R[421],41,[[["self"]],["ratio"]]],[11,"trunc",E,R[422],41,[[["self"]],["ratio"]]],[11,"fract",E,R[423],41,[[["self"]],["ratio"]]],[11,"pow",E,R[424],41,[[["i32"],["self"]],["ratio"]]],[11,R[425],E,E,41,[[["f"]],[["ratio"],[R[20],["ratio"]]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,R[89]],[8,R[80]],[8,R[81]],[8,R[82]],[8,R[83]],[8,"PrimInt"],[8,R[75]],[8,R[76]],[8,R[541]],[8,R[77]],[8,"Pow"],[8,"Roots"],[8,R[78]],[8,R[79]],[8,R[84]],[8,R[85]],[8,R[86]],[8,R[87]],[8,"Inv"],[8,"MulAdd"],[8,R[88]],[8,R[90]],[8,R[91]],[8,R[92]],[8,R[93]],[8,R[94]],[4,R[74]],[3,R[73]],[3,R[209]],[3,R[201]],[3,"Range"],[3,R[226]],[3,R[227]],[3,R[228]],[3,"Ratio"],[3,R[235]]]};
searchIndex["num_iter"]={"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter",R[369],N,N],[3,R[226],E,R[370],N,N],[3,R[227],E,R[371],N,N],[3,R[228],E,R[372],N,N],[5,"range",E,R[292],N,[[["a"]],["range"]]],[5,R[293],E,R[294],N,[[["a"]],[R[223]]]],[5,R[295],E,R[296],N,[[["a"]],[R[224]]]],[5,R[297],E,R[298],N,[[["a"]],[R[225]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[220],E,E,0,[[],["i"]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[220],E,E,1,[[],["i"]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[220],E,E,2,[[],["i"]]],[11,R[21],E,E,2,[[[U]],[R[24]]]],[11,R[22],E,E,2,[[],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"]],[R[27]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[220],E,E,3,[[],["i"]]],[11,R[21],E,E,3,[[[U]],[R[24]]]],[11,R[22],E,E,3,[[],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"]],[R[27]]]],[11,"next",E,E,0,[[["self"]],[R[20]]]],[11,R[221],E,E,0,[[["self"]]]],[11,"next",E,E,1,[[["self"]],[R[20]]]],[11,R[221],E,E,1,[[["self"]]]],[11,"next",E,E,2,[[["self"]],[R[20]]]],[11,"next",E,E,3,[[["self"]],[R[20]]]],[11,R[222],E,E,0,[[["self"]],[R[20]]]],[11,R[222],E,E,1,[[["self"]],[R[20]]]],[11,"clone",E,E,0,[[["self"]],["range"]]],[11,"clone",E,E,1,[[["self"]],[R[223]]]],[11,"clone",E,E,2,[[["self"]],[R[224]]]],[11,"clone",E,E,3,[[["self"]],[R[225]]]]],"p":[[3,"Range"],[3,R[226]],[3,R[227]],[3,R[228]]]};
searchIndex["spin"]={"doc":"Synchronization primitives based on spinning","i":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",N,N],[3,R[30],E,"A guard to which the protected data can be accessed",N,N],[3,"RwLock",E,"A reader-writer lock",N,N],[3,R[31],E,"A guard to which the protected data can be read",N,N],[3,R[32],E,"A guard to which the protected data can be written",N,N],[3,"Once",E,"A synchronization primitive which can be used to run a…",N,N],[11,"new",E,R[16],0,[[[T]],["mutex"]]],[11,R[17],E,"Consumes this mutex, returning the underlying data.",0,[[],[T]]],[11,"lock",E,"Locks the spinlock and returns a guard.",0,[[["self"]],[R[15]]]],[11,"force_unlock",E,"Force unlock the spinlock.",0,[[["self"]]]],[11,"try_lock",E,"Tries to lock the mutex. If it is already locked, it will…",0,[[["self"]],[[R[15]],[R[20],[R[15]]]]]],[11,"new",E,R[16],1,[[[T]],["rwlock"]]],[11,R[17],E,"Consumes this `RwLock`, returning the underlying data.",1,[[],[T]]],[11,"read",E,"Locks this rwlock with shared read access, blocking the…",1,[[["self"]],[R[18]]]],[11,"try_read",E,"Attempt to acquire this lock with shared read access.",1,[[["self"]],[[R[18]],[R[20],[R[18]]]]]],[11,"force_read_decrement",E,"Force decrement the reader count.",1,[[["self"]]]],[11,"force_write_unlock",E,"Force unlock exclusive write access.",1,[[["self"]]]],[11,"write",E,"Lock this rwlock with exclusive write access, blocking the…",1,[[["self"]],[R[19]]]],[11,"try_write",E,"Attempt to lock this rwlock with exclusive write access.",1,[[["self"]],[[R[20],[R[19]]],[R[19]]]]],[18,"INIT",E,"Initialization constant of `Once`.",2,N],[11,"new",E,"Creates a new `Once` value.",2,[[],["once"]]],[11,"call_once",E,"Performs an initialization routine once and only once. The…",2,[[["f"],["self"]],[T]]],[11,"try",E,"Returns a pointer iff the `Once` was previously initialized",2,[[["self"]],[[T],[R[20]]]]],[11,"wait",E,"Like try, but will spin if the `Once` is in the process of…",2,[[["self"]],[[T],[R[20]]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[[U]],[R[24]]]],[11,R[22],E,E,3,[[],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"]],[R[27]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[[U]],[R[24]]]],[11,R[22],E,E,4,[[],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,R[26],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"]],[R[27]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[[U]],[R[24]]]],[11,R[22],E,E,5,[[],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"]],[R[27]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[[U]],[R[24]]]],[11,R[22],E,E,2,[[],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"]],[R[27]]]],[11,R[28],E,E,3,[[["self"]],[T]]],[11,R[28],E,E,5,[[["self"]],[T]]],[11,"fmt",E,E,3,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,4,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,5,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,2,[[["self"],[R[29]]],[R[24]]]],[11,"deref",E,E,3,[[["self"]],[T]]],[11,"deref",E,E,4,[[["self"]],[T]]],[11,"deref",E,E,5,[[["self"]],[T]]],[11,"drop",E,"The dropping of the MutexGuard will release the lock it…",3,[[["self"]]]],[11,"drop",E,E,4,[[["self"]]]],[11,"drop",E,E,5,[[["self"]]]],[11,R[210],E,E,0,[[],["mutex"]]],[11,R[210],E,E,1,[[],["rwlock"]]]],"p":[[3,"Mutex"],[3,"RwLock"],[3,"Once"],[3,R[30]],[3,R[31]],[3,R[32]]]};
searchIndex["x86_64"]={"doc":E,"i":[[0,"boot","x86_64","TODO",N,N],[3,R[166],R[140],E,N,N],[12,"area",E,E,0,N],[12,"memory_type",E,E,0,N],[3,R[167],E,E,N,N],[12,"entry_point",E,E,1,N],[12,"page_table_address",E,"The physical address of the P4 frame of the process'…",1,N],[3,R[168],E,"This structure is placed in memory by the bootloader and a…",N,N],[12,"magic",E,"This should be set to `BOOT_INFO_MAGIC` by the bootloader.",2,N],[12,"memory_map",E,E,2,N],[12,"num_memory_map_entries",E,E,2,N],[12,"rsdp_address",E,E,2,N],[12,"payload",E,E,2,N],[4,R[169],E,E,N,N],[13,"UefiServices",E,"Memory used by the UEFI services. Cannot be used by the OS.",3,N],[13,"Conventional",E,"Conventional memory that can freely be used by the OS,",3,N],[13,"AcpiReclaimable",E,"Memory that contains ACPI tables. After the OS has parsed…",3,N],[13,"SleepPreserve",E,R[119],3,N],[13,"NonVolatileSleepPreserve",E,R[119],3,N],[13,"KernelImage",E,"Memory the bootloader has mapped the kernel image into.…",3,N],[13,"PayloadImage",E,"Memory the bootloader has mapped the payload image into.…",3,N],[13,"KernelPageTables",E,"Memory the bootloader has used for the page tables…",3,N],[13,"KernelHeap",E,"Memory the bootloader has mapped for use as the kernel…",3,N],[13,R[168],E,"Memory used for storing the `BootInfo` by the bootloader.…",3,N],[17,"BOOT_INFO_MAGIC",E,E,N,N],[17,"MEMORY_MAP_NUM_ENTRIES",E,E,N,N],[11,"memory_entries",E,E,2,[[["self"]]]],[0,"hw","x86_64",E,N,N],[3,R[170],R[123],E,N,N],[12,"limit",E,"`base + limit` is the last addressable byte of the…",4,N],[12,"base",E,"Virtual address of the start of the descriptor table.",4,N],[0,"gdt",E,E,N,N],[3,R[171],R[142],"An index into the GDT, specifying a particular segment.…",N,N],[12,"0",E,E,5,N],[3,R[173],E,E,N,N],[3,R[174],E,E,N,N],[3,R[175],E,E,N,N],[3,"Gdt",E,"A GDT suitable for the kernel to use. The order of the…",N,N],[4,R[172],E,E,N,N],[13,"Ring0",E,E,6,N],[13,"Ring1",E,E,6,N],[13,"Ring2",E,E,6,N],[13,"Ring3",E,E,6,N],[17,"KERNEL_CODE_SELECTOR",E,E,N,N],[17,"KERNEL_DATA_SELECTOR",E,E,N,N],[17,"USER_COMPAT_CODE_SELECTOR",E,E,N,N],[17,"USER_DATA_SELECTOR",E,E,N,N],[17,"USER_CODE64_SELECTOR",E,E,N,N],[17,"BOOTSTRAP_TSS_SELECTOR",E,E,N,N],[17,"NUM_STATIC_ENTRIES",E,E,N,N],[17,"MAX_CPUS",E,E,N,N],[11,"new",E,E,5,[[["u16"],[R[120]]],[R[122]]]],[11,"table_offset",E,E,5,[[["self"]],["u16"]]],[11,"new",E,E,7,[[[R[120]]],["codesegment"]]],[11,"new",E,E,8,[[[R[120]]],["datasegment"]]],[11,"empty",E,E,9,[[],[R[121]]]],[11,"new",E,E,9,[[["pin"]],[R[121]]]],[11,"new",E,"Create a `Gdt` with pre-populated code and data segments,…",10,[[],["gdt"]]],[11,"add_tss",E,"Add a new TSS, if there's space for it. The first TSS…",10,[[["self"],[R[121]]],[R[122]]]],[11,"load",E,"Load the new GDT, switch to the new `kernel_code` code…",10,[[["self"]]]],[0,"tss",R[123],E,N,N],[3,"Tss",R[143],"Hardware task switching isn't supported on x86_64, so the…",N,N],[12,"privilege_stack_table",E,E,11,N],[12,"interrupt_stack_table",E,E,11,N],[12,"iomap_base",E,E,11,N],[11,"new",E,E,11,[[],[["pin",["box"]],["box",["tss"]]]]],[11,"set_kernel_stack",E,E,11,[[[R[126]],["self"]]]],[0,"idt",R[123],E,N,N],[3,"IdtEntry",R[144],E,N,N],[3,"Idt",E,E,N,N],[3,R[176],E,E,N,N],[12,R[594],E,E,12,N],[12,"code_segment",E,E,12,N],[12,"cpu_flags",E,E,12,N],[12,R[595],E,E,12,N],[12,"stack_segment",E,E,12,N],[6,"HandlerFunc",E,"The type of a function that can be used as an interrupt…",N,N],[11,"missing",E,E,13,[[],[R[124]]]],[11,R[596],E,E,13,[[["self"],["handlerfunc"],[R[122]]],["self"]]],[11,"set_ist_handler",E,E,13,[[["self"],["u8"]],["self"]]],[11,"set_privilege_level",E,E,13,[[["self"],[R[120]]],["self"]]],[11,"empty",E,E,14,[[],["idt"]]],[11,"divide_error",E,E,14,[[["self"]],[R[124]]]],[11,"debug_exception",E,E,14,[[["self"]],[R[124]]]],[11,"nmi",E,E,14,[[["self"]],[R[124]]]],[11,"breakpoint",E,E,14,[[["self"]],[R[124]]]],[11,"overflow",E,E,14,[[["self"]],[R[124]]]],[11,"bound_range_exceeded",E,E,14,[[["self"]],[R[124]]]],[11,"invalid_opcode",E,E,14,[[["self"]],[R[124]]]],[11,"device_not_available",E,E,14,[[["self"]],[R[124]]]],[11,"double_fault",E,E,14,[[["self"]],[R[124]]]],[11,"invalid_tss",E,E,14,[[["self"]],[R[124]]]],[11,"segment_not_present",E,E,14,[[["self"]],[R[124]]]],[11,"stack_segment_fault",E,E,14,[[["self"]],[R[124]]]],[11,"general_protection_fault",E,E,14,[[["self"]],[R[124]]]],[11,"page_fault",E,E,14,[[["self"]],[R[124]]]],[11,"x87_fault",E,E,14,[[["self"]],[R[124]]]],[11,"alignment_check",E,E,14,[[["self"]],[R[124]]]],[11,"machine_check",E,E,14,[[["self"]],[R[124]]]],[11,"simd_exception",E,E,14,[[["self"]],[R[124]]]],[11,"virtualization_exception",E,E,14,[[["self"]],[R[124]]]],[11,"load",E,E,14,[[["self"]]]],[0,"i8259_pic",R[123],E,N,N],[3,"Pic",R[145],E,N,N],[11,"new",E,E,15,[[],["pic"]]],[11,"remap_and_disable",E,"Remap and disable the PIC. It is necessary to remap the…",15,[[["self"],["u8"]]]],[0,"local_apic",R[123],E,N,N],[3,R[177],R[146],"Represents a register in the local APIC's configuration…",N,N],[3,R[178],E,"Methods on this type operate on the local APIC of the…",N,N],[11,"read",E,"Read from this register. Unsafe because not all registers…",16,[[["self"]],["u32"]]],[11,"write",E,"Write to this register. Unsafe because not all registers…",16,[[["u32"],["self"]]]],[11,"enable",E,E,17,[[["u8"]]]],[11,"register",E,E,17,[[[R[2]]],["localapicregister"]]],[11,"send_eoi",E,"Send an End Of Interrupt to the local APIC. This should be…",17,[[]]],[0,"cpu",R[123],E,N,N],[3,"CpuInfo",R[147],"Describes information we know about the system we're…",N,N],[12,"max_supported_standard_level",E,E,18,N],[12,"vendor",E,E,18,N],[12,"model_info",E,E,18,N],[12,"hypervisor_info",E,"Information about the hypervisor we're running under, if…",18,N],[3,R[179],E,E,N,N],[12,"family",E,E,19,N],[12,"model",E,E,19,N],[12,"stepping",E,E,19,N],[12,"extended_family",E,E,19,N],[12,"extended_model",E,E,19,N],[3,R[190],E,E,N,N],[4,"Vendor",E,E,N,N],[13,"Unknown",E,E,20,N],[13,"Intel",E,E,20,N],[13,"Amd",E,E,20,N],[4,R[180],E,"Intel and AMD microarchitectures we can expect processors…",N,N],[13,"Nehalem",E,E,21,N],[13,"Westmere",E,E,21,N],[13,"SandyBridge",E,E,21,N],[13,"IvyBridge",E,E,21,N],[13,"Haswell",E,E,21,N],[13,"Broadwell",E,E,21,N],[13,"Skylake",E,E,21,N],[13,"KabyLake",E,E,21,N],[13,"CoffeeLake",E,E,21,N],[13,"CannonLake",E,E,21,N],[13,"WhiskeyLake",E,E,21,N],[13,"AmberLake",E,E,21,N],[13,"Bulldozer",E,E,21,N],[13,"Jaguar",E,E,21,N],[13,"Zen",E,E,21,N],[4,R[181],E,E,N,N],[13,"Unknown",E,E,22,N],[13,"Kvm",E,E,22,N],[11,"new",E,E,18,[[],["cpuinfo"]]],[11,R[125],E,E,18,[[["self"]],[[R[20],[R[125]]],[R[125]]]]],[11,"apic_frequency",E,"Get the frequency the APIC runs at (in Hz), if we can…",18,[[["self"]],[["u32"],[R[20],["u32"]]]]],[0,"port",R[123],E,N,N],[3,"Port",R[148],"Represents an IO port that can be read and written to…",N,N],[8,"PortSize",E,"Implemented by the types used to represent 8-bit, 16-bit,…",N,N],[10,"port_read",E,E,23,[[["u16"]],["self"]]],[10,"port_write",E,E,23,[[["u16"]]]],[11,"new",E,"Create a new `Port` at the specified I/O address. Unsafe…",24,[[["u16"]],["port"]]],[11,"read",E,E,24,[[["self"]],[T]]],[11,"write",E,E,24,[[["self"],[T]]]],[0,"registers",R[123],E,N,N],[3,"CpuFlags",R[149],"A wrapper for the `RFLAGS` register, providing a nice…",N,N],[12,"0",E,E,25,N],[5,"read_msr",E,"Read from a model-specific register.",N,[[["u32"]],["u64"]]],[5,"write_msr",E,"Write to a model-specific register. This is unsafe,…",N,[[["u32"],["u64"]]]],[17,"EFER",E,E,N,N],[17,"IA32_STAR",E,"Contains the Ring 0 and Ring 3 code-segment selectors…",N,N],[17,"IA32_LSTAR",E,"Contains the virtual address of the handler to call upon…",N,N],[17,"IA32_FMASK",E,"Upon `syscall`, the value of this MSR is used to mask…",N,N],[11,"read",E,"Read the contents of `RFLAGS`, creating a `CpuFlags`.",25,[[],["cpuflags"]]],[11,"interrupts_enabled",E,E,25,[[["self"]],["bool"]]],[0,"serial",R[123],E,N,N],[3,R[182],R[150],E,N,N],[17,"COM1",E,E,N,N],[11,"new",E,E,26,[[["u16"]],["serialport"]]],[11,"initialise",E,E,26,[[["self"]]]],[11,"read",E,E,26,[[["self"]],["u8"]]],[11,"write",E,E,26,[[["self"],["u8"]]]],[0,"tlb",R[123],E,N,N],[5,"invalidate_page","x86_64::hw::tlb",E,N,[[[R[126]]]]],[5,"flush",E,E,N,[[]]],[0,"memory","x86_64",E,N,N],[3,R[189],R[127],"Represents an address in the physical memory space. A…",N,N],[0,"kernel_map",E,"These constants define the layout of the memory map when…",N,N],[17,"RECURSIVE_ENTRY","x86_64::memory::kernel_map","We use the 510th entry of the PML4 (P4) to access the page…",N,N],[17,"KERNEL_P4_ENTRY",E,"The kernel is mapped into the 511th entry of the P4.",N,N],[17,"P4_TABLE_RECURSIVE_ADDRESS",E,"This address can be used to access the currently mapped P4…",N,N],[17,"KERNEL_BASE",E,"This is the base of the kernel address space. It starts at…",N,N],[17,R[597],E,"This is the address of the start of the kernel heap. The…",N,N],[17,"HEAP_END",E,E,N,N],[17,"PHYSICAL_MAPPING_START",E,"This is the address of the start of the area in the kernel…",N,N],[17,"PHYSICAL_MAPPING_END",E,E,N,N],[17,"BOOT_INFO",E,E,N,N],[17,"KERNEL_P4_START",E,"This address can be used to access the kernel page table's…",N,N],[17,"LOCAL_APIC_CONFIG",E,"The virtual address that the configuration page of the…",N,N],[0,"paging",R[127],E,N,N],[8,"Deref",R[129],"Used for immutable dereferencing operations, like `*v`.",N,N],[16,"Target",E,"The resulting type after dereferencing.",27,N],[10,"deref",E,"Dereferences the value.",27,[[["self"]]]],[8,"DerefMut",E,"Used for mutable dereferencing operations, like in `*v =…",N,N],[10,R[28],E,"Mutably dereferences the value.",28,[[["self"]]]],[3,R[183],E,"Represents a set of page tables that are not currently…",N,N],[12,"p4_frame",E,E,29,N],[3,R[188],E,"Represents the set of page tables that are currently being…",N,N],[0,"entry",E,E,N,N],[3,"Entry",R[151],E,N,N],[3,R[184],E,E,N,N],[18,"PRESENT",E,E,30,N],[18,"WRITABLE",E,E,30,N],[18,"USER_ACCESSIBLE",E,E,30,N],[18,"WRITE_THROUGH",E,E,30,N],[18,"NO_CACHE",E,E,30,N],[18,"ACCESSED",E,E,30,N],[18,"DIRTY",E,E,30,N],[18,"HUGE_PAGE",E,E,30,N],[18,"GLOBAL",E,E,30,N],[18,"NO_EXECUTE",E,E,30,N],[11,"empty",E,"Returns an empty set of flags.",30,[[],[R[128]]]],[11,"all",E,"Returns the set containing all flags.",30,[[],[R[128]]]],[11,"bits",E,"Returns the raw value of the flags currently stored.",30,[[["self"]],["u64"]]],[11,"from_bits",E,"Convert from underlying bit representation, unless that…",30,[[["u64"]],[[R[128]],[R[20],[R[128]]]]]],[11,"from_bits_truncate",E,"Convert from underlying bit representation, dropping any…",30,[[["u64"]],[R[128]]]],[11,"is_empty",E,"Returns `true` if no flags are currently stored.",30,[[["self"]],["bool"]]],[11,"is_all",E,"Returns `true` if all flags are currently set.",30,[[["self"]],["bool"]]],[11,"intersects",E,"Returns `true` if there are flags common to both `self`…",30,[[["self"],[R[128]]],["bool"]]],[11,R[131],E,"Returns `true` all of the flags in `other` are contained…",30,[[["self"],[R[128]]],["bool"]]],[11,"insert",E,"Inserts the specified flags in-place.",30,[[["self"],[R[128]]]]],[11,"remove",E,"Removes the specified flags in-place.",30,[[["self"],[R[128]]]]],[11,"toggle",E,"Toggles the specified flags in-place.",30,[[["self"],[R[128]]]]],[11,"set",E,"Inserts or removes the specified flags depending on the…",30,[[["self"],[R[128]],["bool"]]]],[11,"is_compatible",E,E,30,[[["self"],[R[128]]],["bool"]]],[11,"is_unused",E,E,31,[[["self"]],["bool"]]],[11,"set_unused",E,E,31,[[["self"]]]],[11,"flags",E,E,31,[[["self"]],[R[128]]]],[11,"pointed_frame",E,E,31,[[["self"]],[[R[20],["frame"]],["frame"]]]],[11,"set",E,E,31,[[["self"],["frame"],[R[128]]]]],[0,"frame",R[129],E,N,N],[3,"Frame",R[152],E,N,N],[11,R[131],E,E,32,[[[R[130]]],["frame"]]],[11,R[132],E,E,32,[[["self"]],[R[130]]]],[0,R[598],R[129],E,N,N],[8,R[185],"x86_64::memory::paging::frame_allocator","`FrameAllocator` represents the `x86_64` crate's interface…",N,N],[11,"allocate",E,"Allocate a `Frame`.",33,[[["self"]],["frame"]]],[10,R[576],E,"Allocate `n` contiguous `Frame`s.",33,[[["self"],[R[2]]],[["range",["frame"]],["frame"]]]],[10,"free_n",E,"Free `n` frames that were previously allocated by this…",33,[[["self"],["frame"],[R[2]]]]],[0,"mapper",R[129],E,N,N],[3,"Mapper",R[153],"A `Mapper` allows you to change the virtual to physical…",N,N],[12,"p4",E,E,34,N],[11,"translate",E,"Get the `PhysicalAddress` a given `VirtualAddress` is…",34,[[[R[126]],["self"]],[[R[20],[R[130]]],[R[130]]]]],[11,"translate_page",E,"Get the physical `Frame` that a given virtual `Page` is…",34,[[["page"],["self"]],[[R[20],["frame"]],["frame"]]]],[11,"map",E,"Map the given `Page` somewhere in physical memory.…",34,[[["a"],["self"],["page"],[R[128]]]]],[11,"map_range",E,"Given a range of `n` pages to map, allocates `n` frames…",34,[[["a"],["self"],["page"],["range",["page"]],[R[128]]]]],[11,"map_to",E,E,34,[[["a"],["self"],["page"],["frame"],[R[128]]]]],[11,"unmap",E,E,34,[[["a"],["self"],["page"]]]],[0,"page",R[129],E,N,N],[3,"Page",R[154],E,N,N],[11,R[131],E,"Get the page that contains the given virtual address.",35,[[[R[126]]],["page"]]],[11,R[132],E,E,35,[[["self"]],[R[126]]]],[11,"p4_index",E,E,35,[[["self"]],["u16"]]],[11,"p3_index",E,E,35,[[["self"]],["u16"]]],[11,"p2_index",E,E,35,[[["self"]],["u16"]]],[11,"p1_index",E,E,35,[[["self"]],["u16"]]],[0,"table",R[129],"This module contains types for representing raw page…",N,N],[3,"Table",R[155],"Represents a page table, with 512 entries which are either…",N,N],[4,"Level4",E,E,N,N],[4,"Level3",E,E,N,N],[4,"Level2",E,E,N,N],[4,"Level1",E,E,N,N],[4,R[191],E,R[133],N,N],[4,R[192],E,R[133],N,N],[8,"TableLevel",E,E,N,N],[8,R[186],E,"Tables of levels that implement `HierarchicalLevel` are…",N,N],[16,"NextLevel",E,E,36,N],[8,R[187],E,"This trait specifies how we should access and modify a set…",N,N],[10,R[156],E,E,37,[[["u16"],["table"]],[[R[20],[R[126]]],[R[126]]]]],[11,"zero",E,E,38,[[["self"]]]],[11,"next_table",E,E,38,[[["u16"],["self"]],[[R[20],["table"]],["table"]]]],[11,"next_table_mut",E,E,38,[[["self"],["u16"]],[["table"],[R[20],["table"]]]]],[11,"next_table_create",E,E,38,[[["a"],["self"],["u16"],["bool"]],["table"]]],[17,"FRAME_SIZE",R[129],E,N,N],[17,"PAGE_SIZE",E,E,N,N],[11,"new",E,"Create a new set of page-tables. `frame` must be an…",29,[[["frame"]],[R[134]]]],[11,"new_with_recursive_mapping",E,"Create a new set of page-tables that should be accessed…",29,[[["u16"],["frame"]],[[R[134],[R[135]]],[R[135]]]]],[11,"mapper",E,E,29,[[["self"]],[[R[135]],["mapper",[R[135]]]]]],[11,R[136],E,R[137],29,[[]]],[11,R[136],E,R[137],29,[[]]],[11,"new",E,"Create an `ActivePageTable` to represent an active set of…",39,[[[R[130]]],[[R[138],[R[135]]],[R[135]]]]],[11,"new",E,"Create an `ActivePageTable` to represent the…",39,[[],[[R[138],[R[139]]],[R[139]]]]],[11,"with",E,"Alter the mappings of a `InactivePageTable` by temporarily…",39,[[["a"],["self"],["f"],[R[134]]],["r"]]],[11,"new",R[127],E,40,[[[R[2]]],[[R[20],[R[130]]],[R[130]]]]],[11,"new_unchecked",E,E,40,[[[R[2]]],[R[130]]]],[11,"offset_into_frame",E,E,40,[[["self"]],[R[2]]]],[11,"is_frame_aligned",E,E,40,[[["self"]],["bool"]]],[14,"getter","x86_64",E,N,N],[14,"read_control_reg",E,"Read a control register. The name of the control register…",N,N],[14,"write_control_reg",E,"Write to a control register. Calls to this macro will need…",N,N],[11,"from",R[140],E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[21],E,E,2,[[[U]],[R[24]]]],[11,R[22],E,E,2,[[],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"]],[R[27]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[21],E,E,3,[[[U]],[R[24]]]],[11,R[22],E,E,3,[[],[R[24]]]],[11,"into",E,E,3,[[],[U]]],[11,R[26],E,E,3,[[["self"]],[T]]],[11,R[23],E,E,3,[[["self"]],[T]]],[11,R[25],E,E,3,[[["self"]],[R[27]]]],[11,R[141],E,E,3,[[["self"]],[T]]],[11,R[103],E,E,3,[[[T],["self"]]]],[11,"from",R[123],E,4,[[[T]],[T]]],[11,R[21],E,E,4,[[[U]],[R[24]]]],[11,R[22],E,E,4,[[],[R[24]]]],[11,"into",E,E,4,[[],[U]]],[11,R[26],E,E,4,[[["self"]],[T]]],[11,R[23],E,E,4,[[["self"]],[T]]],[11,R[25],E,E,4,[[["self"]],[R[27]]]],[11,"from",R[142],E,5,[[[T]],[T]]],[11,R[21],E,E,5,[[[U]],[R[24]]]],[11,R[22],E,E,5,[[],[R[24]]]],[11,"into",E,E,5,[[],[U]]],[11,R[26],E,E,5,[[["self"]],[T]]],[11,R[23],E,E,5,[[["self"]],[T]]],[11,R[25],E,E,5,[[["self"]],[R[27]]]],[11,R[141],E,E,5,[[["self"]],[T]]],[11,R[103],E,E,5,[[[T],["self"]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[21],E,E,7,[[[U]],[R[24]]]],[11,R[22],E,E,7,[[],[R[24]]]],[11,"into",E,E,7,[[],[U]]],[11,R[26],E,E,7,[[["self"]],[T]]],[11,R[23],E,E,7,[[["self"]],[T]]],[11,R[25],E,E,7,[[["self"]],[R[27]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[21],E,E,8,[[[U]],[R[24]]]],[11,R[22],E,E,8,[[],[R[24]]]],[11,"into",E,E,8,[[],[U]]],[11,R[26],E,E,8,[[["self"]],[T]]],[11,R[23],E,E,8,[[["self"]],[T]]],[11,R[25],E,E,8,[[["self"]],[R[27]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[21],E,E,9,[[[U]],[R[24]]]],[11,R[22],E,E,9,[[],[R[24]]]],[11,"into",E,E,9,[[],[U]]],[11,R[26],E,E,9,[[["self"]],[T]]],[11,R[23],E,E,9,[[["self"]],[T]]],[11,R[25],E,E,9,[[["self"]],[R[27]]]],[11,R[141],E,E,9,[[["self"]],[T]]],[11,R[103],E,E,9,[[[T],["self"]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[21],E,E,10,[[[U]],[R[24]]]],[11,R[22],E,E,10,[[],[R[24]]]],[11,"into",E,E,10,[[],[U]]],[11,R[26],E,E,10,[[["self"]],[T]]],[11,R[23],E,E,10,[[["self"]],[T]]],[11,R[25],E,E,10,[[["self"]],[R[27]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[21],E,E,6,[[[U]],[R[24]]]],[11,R[22],E,E,6,[[],[R[24]]]],[11,"into",E,E,6,[[],[U]]],[11,R[26],E,E,6,[[["self"]],[T]]],[11,R[23],E,E,6,[[["self"]],[T]]],[11,R[25],E,E,6,[[["self"]],[R[27]]]],[11,R[141],E,E,6,[[["self"]],[T]]],[11,R[103],E,E,6,[[[T],["self"]]]],[11,"from",R[143],E,11,[[[T]],[T]]],[11,R[21],E,E,11,[[[U]],[R[24]]]],[11,R[22],E,E,11,[[],[R[24]]]],[11,"into",E,E,11,[[],[U]]],[11,R[26],E,E,11,[[["self"]],[T]]],[11,R[23],E,E,11,[[["self"]],[T]]],[11,R[25],E,E,11,[[["self"]],[R[27]]]],[11,R[141],E,E,11,[[["self"]],[T]]],[11,R[103],E,E,11,[[[T],["self"]]]],[11,"from",R[144],E,13,[[[T]],[T]]],[11,R[21],E,E,13,[[[U]],[R[24]]]],[11,R[22],E,E,13,[[],[R[24]]]],[11,"into",E,E,13,[[],[U]]],[11,R[26],E,E,13,[[["self"]],[T]]],[11,R[23],E,E,13,[[["self"]],[T]]],[11,R[25],E,E,13,[[["self"]],[R[27]]]],[11,R[141],E,E,13,[[["self"]],[T]]],[11,R[103],E,E,13,[[[T],["self"]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[21],E,E,14,[[[U]],[R[24]]]],[11,R[22],E,E,14,[[],[R[24]]]],[11,"into",E,E,14,[[],[U]]],[11,R[26],E,E,14,[[["self"]],[T]]],[11,R[23],E,E,14,[[["self"]],[T]]],[11,R[25],E,E,14,[[["self"]],[R[27]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[21],E,E,12,[[[U]],[R[24]]]],[11,R[22],E,E,12,[[],[R[24]]]],[11,"into",E,E,12,[[],[U]]],[11,R[26],E,E,12,[[["self"]],[T]]],[11,R[23],E,E,12,[[["self"]],[T]]],[11,R[25],E,E,12,[[["self"]],[R[27]]]],[11,R[141],E,E,12,[[["self"]],[T]]],[11,R[103],E,E,12,[[[T],["self"]]]],[11,"from",R[145],E,15,[[[T]],[T]]],[11,R[21],E,E,15,[[[U]],[R[24]]]],[11,R[22],E,E,15,[[],[R[24]]]],[11,"into",E,E,15,[[],[U]]],[11,R[26],E,E,15,[[["self"]],[T]]],[11,R[23],E,E,15,[[["self"]],[T]]],[11,R[25],E,E,15,[[["self"]],[R[27]]]],[11,"from",R[146],E,16,[[[T]],[T]]],[11,R[21],E,E,16,[[[U]],[R[24]]]],[11,R[22],E,E,16,[[],[R[24]]]],[11,"into",E,E,16,[[],[U]]],[11,R[26],E,E,16,[[["self"]],[T]]],[11,R[23],E,E,16,[[["self"]],[T]]],[11,R[25],E,E,16,[[["self"]],[R[27]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[21],E,E,17,[[[U]],[R[24]]]],[11,R[22],E,E,17,[[],[R[24]]]],[11,"into",E,E,17,[[],[U]]],[11,R[26],E,E,17,[[["self"]],[T]]],[11,R[23],E,E,17,[[["self"]],[T]]],[11,R[25],E,E,17,[[["self"]],[R[27]]]],[11,"from",R[147],E,18,[[[T]],[T]]],[11,R[21],E,E,18,[[[U]],[R[24]]]],[11,R[22],E,E,18,[[],[R[24]]]],[11,"into",E,E,18,[[],[U]]],[11,R[26],E,E,18,[[["self"]],[T]]],[11,R[23],E,E,18,[[["self"]],[T]]],[11,R[25],E,E,18,[[["self"]],[R[27]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[21],E,E,19,[[[U]],[R[24]]]],[11,R[22],E,E,19,[[],[R[24]]]],[11,"into",E,E,19,[[],[U]]],[11,R[26],E,E,19,[[["self"]],[T]]],[11,R[23],E,E,19,[[["self"]],[T]]],[11,R[25],E,E,19,[[["self"]],[R[27]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[21],E,E,41,[[[U]],[R[24]]]],[11,R[22],E,E,41,[[],[R[24]]]],[11,"into",E,E,41,[[],[U]]],[11,R[26],E,E,41,[[["self"]],[T]]],[11,R[23],E,E,41,[[["self"]],[T]]],[11,R[25],E,E,41,[[["self"]],[R[27]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[21],E,E,20,[[[U]],[R[24]]]],[11,R[22],E,E,20,[[],[R[24]]]],[11,"into",E,E,20,[[],[U]]],[11,R[26],E,E,20,[[["self"]],[T]]],[11,R[23],E,E,20,[[["self"]],[T]]],[11,R[25],E,E,20,[[["self"]],[R[27]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[21],E,E,21,[[[U]],[R[24]]]],[11,R[22],E,E,21,[[],[R[24]]]],[11,"into",E,E,21,[[],[U]]],[11,R[26],E,E,21,[[["self"]],[T]]],[11,R[23],E,E,21,[[["self"]],[T]]],[11,R[25],E,E,21,[[["self"]],[R[27]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[21],E,E,22,[[[U]],[R[24]]]],[11,R[22],E,E,22,[[],[R[24]]]],[11,"into",E,E,22,[[],[U]]],[11,R[26],E,E,22,[[["self"]],[T]]],[11,R[23],E,E,22,[[["self"]],[T]]],[11,R[25],E,E,22,[[["self"]],[R[27]]]],[11,"from",R[148],E,24,[[[T]],[T]]],[11,R[21],E,E,24,[[[U]],[R[24]]]],[11,R[22],E,E,24,[[],[R[24]]]],[11,"into",E,E,24,[[],[U]]],[11,R[26],E,E,24,[[["self"]],[T]]],[11,R[23],E,E,24,[[["self"]],[T]]],[11,R[25],E,E,24,[[["self"]],[R[27]]]],[11,"from",R[149],E,25,[[[T]],[T]]],[11,R[21],E,E,25,[[[U]],[R[24]]]],[11,R[22],E,E,25,[[],[R[24]]]],[11,"into",E,E,25,[[],[U]]],[11,R[26],E,E,25,[[["self"]],[T]]],[11,R[23],E,E,25,[[["self"]],[T]]],[11,R[25],E,E,25,[[["self"]],[R[27]]]],[11,R[141],E,E,25,[[["self"]],[T]]],[11,R[103],E,E,25,[[[T],["self"]]]],[11,"from",R[150],E,26,[[[T]],[T]]],[11,R[21],E,E,26,[[[U]],[R[24]]]],[11,R[22],E,E,26,[[],[R[24]]]],[11,"into",E,E,26,[[],[U]]],[11,R[26],E,E,26,[[["self"]],[T]]],[11,R[23],E,E,26,[[["self"]],[T]]],[11,R[25],E,E,26,[[["self"]],[R[27]]]],[11,"from",R[127],E,40,[[[T]],[T]]],[11,R[21],E,E,40,[[[U]],[R[24]]]],[11,R[22],E,E,40,[[],[R[24]]]],[11,"into",E,E,40,[[],[U]]],[11,R[26],E,E,40,[[["self"]],[T]]],[11,R[23],E,E,40,[[["self"]],[T]]],[11,R[25],E,E,40,[[["self"]],[R[27]]]],[11,R[141],E,E,40,[[["self"]],[T]]],[11,R[103],E,E,40,[[[T],["self"]]]],[11,"from",R[129],E,29,[[[T]],[T]]],[11,R[21],E,E,29,[[[U]],[R[24]]]],[11,R[22],E,E,29,[[],[R[24]]]],[11,"into",E,E,29,[[],[U]]],[11,R[26],E,E,29,[[["self"]],[T]]],[11,R[23],E,E,29,[[["self"]],[T]]],[11,R[25],E,E,29,[[["self"]],[R[27]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[21],E,E,39,[[[U]],[R[24]]]],[11,R[22],E,E,39,[[],[R[24]]]],[11,"into",E,E,39,[[],[U]]],[11,R[26],E,E,39,[[["self"]],[T]]],[11,R[23],E,E,39,[[["self"]],[T]]],[11,R[25],E,E,39,[[["self"]],[R[27]]]],[11,"from",R[151],E,31,[[[T]],[T]]],[11,R[21],E,E,31,[[[U]],[R[24]]]],[11,R[22],E,E,31,[[],[R[24]]]],[11,"into",E,E,31,[[],[U]]],[11,R[26],E,E,31,[[["self"]],[T]]],[11,R[23],E,E,31,[[["self"]],[T]]],[11,R[25],E,E,31,[[["self"]],[R[27]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[21],E,E,30,[[[U]],[R[24]]]],[11,R[22],E,E,30,[[],[R[24]]]],[11,"into",E,E,30,[[],[U]]],[11,R[26],E,E,30,[[["self"]],[T]]],[11,R[23],E,E,30,[[["self"]],[T]]],[11,R[25],E,E,30,[[["self"]],[R[27]]]],[11,R[141],E,E,30,[[["self"]],[T]]],[11,R[103],E,E,30,[[[T],["self"]]]],[11,"from",R[152],E,32,[[[T]],[T]]],[11,R[21],E,E,32,[[[U]],[R[24]]]],[11,R[22],E,E,32,[[],[R[24]]]],[11,"into",E,E,32,[[],[U]]],[11,R[26],E,E,32,[[["self"]],[T]]],[11,R[23],E,E,32,[[["self"]],[T]]],[11,R[25],E,E,32,[[["self"]],[R[27]]]],[11,R[141],E,E,32,[[["self"]],[T]]],[11,R[103],E,E,32,[[[T],["self"]]]],[11,"from",R[153],E,34,[[[T]],[T]]],[11,R[21],E,E,34,[[[U]],[R[24]]]],[11,R[22],E,E,34,[[],[R[24]]]],[11,"into",E,E,34,[[],[U]]],[11,R[26],E,E,34,[[["self"]],[T]]],[11,R[23],E,E,34,[[["self"]],[T]]],[11,R[25],E,E,34,[[["self"]],[R[27]]]],[11,"from",R[154],E,35,[[[T]],[T]]],[11,R[21],E,E,35,[[[U]],[R[24]]]],[11,R[22],E,E,35,[[],[R[24]]]],[11,"into",E,E,35,[[],[U]]],[11,R[26],E,E,35,[[["self"]],[T]]],[11,R[23],E,E,35,[[["self"]],[T]]],[11,R[25],E,E,35,[[["self"]],[R[27]]]],[11,R[141],E,E,35,[[["self"]],[T]]],[11,R[103],E,E,35,[[[T],["self"]]]],[11,"from",R[155],E,38,[[[T]],[T]]],[11,R[21],E,E,38,[[[U]],[R[24]]]],[11,R[22],E,E,38,[[],[R[24]]]],[11,"into",E,E,38,[[],[U]]],[11,R[26],E,E,38,[[["self"]],[T]]],[11,R[23],E,E,38,[[["self"]],[T]]],[11,R[25],E,E,38,[[["self"]],[R[27]]]],[11,"from",E,E,42,[[[T]],[T]]],[11,R[21],E,E,42,[[[U]],[R[24]]]],[11,R[22],E,E,42,[[],[R[24]]]],[11,"into",E,E,42,[[],[U]]],[11,R[26],E,E,42,[[["self"]],[T]]],[11,R[23],E,E,42,[[["self"]],[T]]],[11,R[25],E,E,42,[[["self"]],[R[27]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[21],E,E,43,[[[U]],[R[24]]]],[11,R[22],E,E,43,[[],[R[24]]]],[11,"into",E,E,43,[[],[U]]],[11,R[26],E,E,43,[[["self"]],[T]]],[11,R[23],E,E,43,[[["self"]],[T]]],[11,R[25],E,E,43,[[["self"]],[R[27]]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[21],E,E,44,[[[U]],[R[24]]]],[11,R[22],E,E,44,[[],[R[24]]]],[11,"into",E,E,44,[[],[U]]],[11,R[26],E,E,44,[[["self"]],[T]]],[11,R[23],E,E,44,[[["self"]],[T]]],[11,R[25],E,E,44,[[["self"]],[R[27]]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[21],E,E,45,[[[U]],[R[24]]]],[11,R[22],E,E,45,[[],[R[24]]]],[11,"into",E,E,45,[[],[U]]],[11,R[26],E,E,45,[[["self"]],[T]]],[11,R[23],E,E,45,[[["self"]],[T]]],[11,R[25],E,E,45,[[["self"]],[R[27]]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[21],E,E,46,[[[U]],[R[24]]]],[11,R[22],E,E,46,[[],[R[24]]]],[11,"into",E,E,46,[[],[U]]],[11,R[26],E,E,46,[[["self"]],[T]]],[11,R[23],E,E,46,[[["self"]],[T]]],[11,R[25],E,E,46,[[["self"]],[R[27]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[21],E,E,47,[[[U]],[R[24]]]],[11,R[22],E,E,47,[[],[R[24]]]],[11,"into",E,E,47,[[],[U]]],[11,R[26],E,E,47,[[["self"]],[T]]],[11,R[23],E,E,47,[[["self"]],[T]]],[11,R[25],E,E,47,[[["self"]],[R[27]]]],[11,R[156],E,E,46,[[["u16"],["table"]],[[R[20],[R[126]]],[R[126]]]]],[11,R[156],E,E,47,[[["u16"],["table"]],[[R[20],[R[126]]],[R[126]]]]],[11,R[28],R[129],E,39,[[["self"]]]],[11,"fmt",R[140],E,3,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[142],E,5,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,7,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,8,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[143],E,11,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[144],E,12,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[147],E,20,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,21,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,19,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,22,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,41,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[149],E,25,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[151],E,30,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[152],E,32,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[154],E,35,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[127],E,40,[[["self"],[R[29]]],[R[24]]]],[11,"eq",R[140],E,3,[[["self"],[R[165]]],["bool"]]],[11,"eq",R[142],E,6,[[[R[120]],["self"]],["bool"]]],[11,"eq",R[147],E,20,[[["self"],["vendor"]],["bool"]]],[11,"eq",E,E,22,[[["self"],["hypervisorvendor"]],["bool"]]],[11,"eq",R[151],E,30,[[[R[128]],["self"]],["bool"]]],[11,"ne",E,E,30,[[[R[128]],["self"]],["bool"]]],[11,"eq",R[152],E,32,[[["frame"],["self"]],["bool"]]],[11,"ne",E,E,32,[[["frame"],["self"]],["bool"]]],[11,"eq",R[154],E,35,[[["page"],["self"]],["bool"]]],[11,"ne",E,E,35,[[["page"],["self"]],["bool"]]],[11,"eq",R[127],E,40,[[["self"],[R[130]]],["bool"]]],[11,"cmp",R[151],E,30,[[[R[128]],["self"]],[R[49]]]],[11,"cmp",R[152],E,32,[[["frame"],["self"]],[R[49]]]],[11,"cmp",R[154],E,35,[[["page"],["self"]],[R[49]]]],[11,"cmp",R[127],E,40,[[["self"],[R[130]]],[R[49]]]],[11,R[50],R[151],E,30,[[[R[128]],["self"]],[[R[20],[R[49]]],[R[49]]]]],[11,"lt",E,E,30,[[[R[128]],["self"]],["bool"]]],[11,"le",E,E,30,[[[R[128]],["self"]],["bool"]]],[11,"gt",E,E,30,[[[R[128]],["self"]],["bool"]]],[11,"ge",E,E,30,[[[R[128]],["self"]],["bool"]]],[11,R[50],R[152],E,32,[[["frame"],["self"]],[[R[20],[R[49]]],[R[49]]]]],[11,"lt",E,E,32,[[["frame"],["self"]],["bool"]]],[11,"le",E,E,32,[[["frame"],["self"]],["bool"]]],[11,"gt",E,E,32,[[["frame"],["self"]],["bool"]]],[11,"ge",E,E,32,[[["frame"],["self"]],["bool"]]],[11,R[50],R[154],E,35,[[["page"],["self"]],[[R[20],[R[49]]],[R[49]]]]],[11,"lt",E,E,35,[[["page"],["self"]],["bool"]]],[11,"le",E,E,35,[[["page"],["self"]],["bool"]]],[11,"gt",E,E,35,[[["page"],["self"]],["bool"]]],[11,"ge",E,E,35,[[["page"],["self"]],["bool"]]],[11,R[50],R[127],E,40,[[["self"],[R[130]]],[[R[20],[R[49]]],[R[49]]]]],[11,"hash",R[151],E,30,[[["self"],["__h"]]]],[11,"add",R[152],E,32,[[[R[2]]]]],[11,"add",R[154],E,35,[[[R[2]]]]],[11,"add",R[127],E,40,[[[R[2]]]]],[11,"sub",R[151],"Returns the set difference of the two sets of flags.",30,[[[R[128]]],[R[128]]]],[11,"sub",R[127],E,40,[[[R[2]]]]],[11,R[157],R[152],E,32,[[["self"],[R[2]]]]],[11,R[157],R[154],E,35,[[["self"],[R[2]]]]],[11,R[157],R[127],E,40,[[["self"],[R[2]]]]],[11,R[158],R[151],"Disables all flags enabled in the set.",30,[[["self"],[R[128]]]]],[11,R[158],R[127],E,40,[[["self"],[R[2]]]]],[11,"not",R[151],"Returns the complement of this set of flags.",30,[[],[R[128]]]],[11,"bitand",E,"Returns the intersection between the two sets of flags.",30,[[[R[128]]],[R[128]]]],[11,"bitor",E,"Returns the union of the two sets of flags.",30,[[[R[128]]],[R[128]]]],[11,"bitxor",E,"Returns the left flags, but with all the right flags…",30,[[[R[128]]],[R[128]]]],[11,"bitand_assign",E,"Disables all flags disabled in the set.",30,[[["self"],[R[128]]]]],[11,"bitor_assign",E,"Adds the set of flags.",30,[[["self"],[R[128]]]]],[11,"bitxor_assign",E,"Toggles the set of flags.",30,[[["self"],[R[128]]]]],[11,"deref",R[129],E,39,[[["self"]]]],[11,"index",R[144],E,14,[[["u8"],["self"]]]],[11,"index",R[155],E,38,[[["u16"],["self"]],["entry"]]],[11,R[159],R[144],E,14,[[["self"],["u8"]]]],[11,R[159],R[155],E,38,[[["self"],["u16"]],["entry"]]],[11,"extend",R[151],E,30,[[["self"],[R[164]]]]],[11,R[160],R[152],E,32,[[["self"]],[[R[2]],[R[20],[R[2]]]]]],[11,R[161],E,E,32,[[["self"]],["self"]]],[11,R[162],E,E,32,[[["self"]],["self"]]],[11,"add_one",E,E,32,[[["self"]],["self"]]],[11,"sub_one",E,E,32,[[["self"]],["self"]]],[11,R[163],E,E,32,[[["self"],[R[2]]],[R[20]]]],[11,R[160],R[154],E,35,[[["self"]],[[R[2]],[R[20],[R[2]]]]]],[11,R[161],E,E,35,[[["self"]],["self"]]],[11,R[162],E,E,35,[[["self"]],["self"]]],[11,"add_one",E,E,35,[[["self"]],["self"]]],[11,"sub_one",E,E,35,[[["self"]],["self"]]],[11,R[163],E,E,35,[[["self"],[R[2]]],[R[20]]]],[11,"from_iter",R[151],E,30,[[[R[164]]],[R[128]]]],[11,"write_str",R[150],E,26,[[["str"],["self"]],[R[24]]]],[11,"fmt",R[151],E,30,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,30,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,30,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[127],E,40,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[151],E,30,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",R[127],E,40,[[["self"],[R[29]]],[R[24]]]],[11,"clone",R[140],E,3,[[["self"]],[R[165]]]],[11,"clone",R[142],E,6,[[["self"]],[R[120]]]],[11,"clone",E,E,5,[[["self"]],[R[122]]]],[11,"clone",E,E,9,[[["self"]],[R[121]]]],[11,"clone",R[143],E,11,[[["self"]],["tss"]]],[11,"clone",R[144],E,13,[[["self"]],[R[124]]]],[11,"clone",E,E,12,[[["self"]],[R[548]]]],[11,"clone",R[149],E,25,[[["self"]],["cpuflags"]]],[11,"clone",R[151],E,30,[[["self"]],[R[128]]]],[11,"clone",R[152],E,32,[[["self"]],["frame"]]],[11,"clone",R[154],E,35,[[["self"]],["page"]]],[11,"clone",R[127],E,40,[[["self"]],[R[130]]]],[11,R[210],R[140],E,0,[[],["self"]]],[11,R[210],R[151],E,30,[[],[R[128]]]],[11,R[210],R[127],E,40,[[],[R[130]]]]],"p":[[3,R[166]],[3,R[167]],[3,R[168]],[4,R[169]],[3,R[170]],[3,R[171]],[4,R[172]],[3,R[173]],[3,R[174]],[3,R[175]],[3,"Gdt"],[3,"Tss"],[3,R[176]],[3,"IdtEntry"],[3,"Idt"],[3,"Pic"],[3,R[177]],[3,R[178]],[3,"CpuInfo"],[3,R[179]],[4,"Vendor"],[4,R[180]],[4,R[181]],[8,"PortSize"],[3,"Port"],[3,"CpuFlags"],[3,R[182]],[8,"Deref"],[8,"DerefMut"],[3,R[183]],[3,R[184]],[3,"Entry"],[3,"Frame"],[8,R[185]],[3,"Mapper"],[3,"Page"],[8,R[186]],[8,R[187]],[3,"Table"],[3,R[188]],[3,R[189]],[3,R[190]],[4,"Level4"],[4,"Level3"],[4,"Level2"],[4,"Level1"],[4,R[191]],[4,R[192]]]};
searchIndex[R[0]]={"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,R[0],R[0],E,N,N]],"p":[]};
searchIndex[R[14]]={"doc":"A typesafe bitmask flag generator useful for sets of…","i":[[14,R[14],R[14],"The macro used to generate the flag structure.",N,N]],"p":[]};
searchIndex[R[193]]={"doc":"Integer trait and functions.","i":[[3,R[201],R[193],R[373],N,N],[5,"sqrt",E,R[196],N,[[["roots"]],["roots"]]],[5,"cbrt",E,R[197],N,[[["roots"]],["roots"]]],[5,R[374],E,R[195],N,[[["u32"],["roots"]],["roots"]]],[5,"div_rem",E,R[375],N,[[[R[194]]]]],[5,R[198],E,R[376],N,[[[R[194]]],[R[194]]]],[5,R[199],E,R[377],N,[[[R[194]]],[R[194]]]],[5,R[200],E,R[378],N,[[[R[194]]]]],[5,"gcd",E,R[379],N,[[[R[194]]],[R[194]]]],[5,"lcm",E,R[380],N,[[[R[194]]],[R[194]]]],[5,"binomial",E,R[381],N,[[[R[194]],["clone"]],[[R[194]],["clone"]]]],[5,R[382],E,R[383],N,[[],[[R[194]],["clone"]]]],[8,"Roots",E,R[384],N,N],[10,R[374],E,R[195],0,[[["u32"],["self"]],["self"]]],[11,"sqrt",E,R[196],0,[[["self"]],["self"]]],[11,"cbrt",E,R[197],0,[[["self"]],["self"]]],[8,"Integer",E,E,N,N],[10,R[198],E,R[281],1,[[["self"]],["self"]]],[10,R[199],E,R[282],1,[[["self"]],["self"]]],[10,"gcd",E,R[283],1,[[["self"]],["self"]]],[10,"lcm",E,R[284],1,[[["self"]],["self"]]],[10,"divides",E,R[285],1,[[["self"]],["bool"]]],[10,R[286],E,R[287],1,[[["self"]],["bool"]]],[10,"is_even",E,R[288],1,[[["self"]],["bool"]]],[10,"is_odd",E,R[289],1,[[["self"]],["bool"]]],[10,"div_rem",E,R[290],1,[[["self"]]]],[11,R[200],E,R[291],1,[[["self"]]]],[11,"new",E,R[385],2,[[[T]],[R[386]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[220],E,E,2,[[],["i"]]],[11,R[21],E,E,2,[[[U]],[R[24]]]],[11,R[22],E,E,2,[[],[R[24]]]],[11,"into",E,E,2,[[],[U]]],[11,R[26],E,E,2,[[["self"]],[T]]],[11,R[23],E,E,2,[[["self"]],[T]]],[11,R[25],E,E,2,[[["self"]],[R[27]]]],[11,"next",E,E,2,[[["self"]],[R[20]]]],[11,"sqrt",E,R[196],0,[[["self"]],["self"]]],[11,"cbrt",E,R[197],0,[[["self"]],["self"]]]],"p":[[8,"Roots"],[8,"Integer"],[3,R[201]]]};
searchIndex[R[1]]={"doc":"Provides the abstraction of a bit field, which allows for…","i":[[8,R[12],R[1],"A generic trait which provides methods for extracting and…",N,N],[10,R[3],E,"Returns the length, eg number of bits, in this bit field.",0,[[],[R[2]]]],[10,R[4],E,R[5],0,[[["self"],[R[2]]],["bool"]]],[10,R[6],E,R[7],0,[[["range",[R[2]]],["self"],[R[2]]],["self"]]],[10,R[8],E,R[9],0,[[["self"],["bool"],[R[2]]],["self"]]],[10,R[10],E,R[11],0,[[["self"],["range",[R[2]]],[R[2]]],["self"]]],[8,R[13],E,E,N,N],[10,R[3],E,"Returns the length, eg number of bits, in this bit array.",1,[[["self"]],[R[2]]]],[10,R[4],E,R[5],1,[[["self"],[R[2]]],["bool"]]],[10,R[6],E,R[7],1,[[["range",[R[2]]],["self"],[R[2]]],[T]]],[10,R[8],E,R[9],1,[[["self"],["bool"],[R[2]]]]],[10,R[10],E,R[11],1,[[["self"],["range",[R[2]]],[R[2]],[T]]]]],"p":[[8,R[12]],[8,R[13]]]};
searchIndex[R[202]]={"doc":"Complex numbers.","i":[[3,"Complex",R[202],R[278],N,N],[12,"re",E,R[279],0,N],[12,"im",E,R[280],0,N],[3,R[209],E,E,N,N],[6,R[387],E,E,N,N],[6,R[388],E,E,N,N],[11,"new",E,R[389],0,[[[T]],[R[203]]]],[11,"i",E,R[390],0,[[],[R[203]]]],[11,"norm_sqr",E,R[391],0,[[["self"]],[T]]],[11,"scale",E,R[392],0,[[["self"],[T]],[R[203]]]],[11,"unscale",E,R[393],0,[[["self"],[T]],[R[203]]]],[11,"conj",E,R[394],0,[[["self"]],[R[203]]]],[11,"inv",E,R[395],0,[[["self"]],[R[203]]]],[11,"is_nan",E,R[396],0,[[],["bool"]]],[11,R[216],E,R[397],0,[[],["bool"]]],[11,R[217],E,R[398],0,[[],["bool"]]],[11,R[218],E,R[399],0,[[],["bool"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"div",E,E,0,[[[R[203]]],[R[203]]]],[11,"div",E,E,0,[[[R[203]]],[R[203]]]],[11,"div",E,E,0,[[[T]],[R[203]]]],[11,"div",E,E,0,[[[T]],[R[203]]]],[11,"eq",E,E,0,[[["self"],[R[203]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[203]]],["bool"]]],[11,"eq",E,E,1,[[[R[204]],["self"]],["bool"]]],[11,"ne",E,E,1,[[[R[204]],["self"]],["bool"]]],[11,"from",E,E,0,[[[T]],[R[203]]]],[11,"from",E,E,0,[[[T]],[R[203]]]],[11,"hash",E,E,0,[[["self"],["__ht"]]]],[11,"add",E,E,0,[[[R[203]]],[R[203]]]],[11,"add",E,E,0,[[[R[203]]],[R[203]]]],[11,"add",E,E,0,[[[T]],[R[203]]]],[11,"add",E,E,0,[[[T]],[R[203]]]],[11,"sub",E,E,0,[[[R[203]]],[R[203]]]],[11,"sub",E,E,0,[[[R[203]]],[R[203]]]],[11,"sub",E,E,0,[[[T]],[R[203]]]],[11,"sub",E,E,0,[[[T]],[R[203]]]],[11,"mul",E,E,0,[[[R[203]]],[R[203]]]],[11,"mul",E,E,0,[[[R[203]]],[R[203]]]],[11,"mul",E,E,0,[[[T]],[R[203]]]],[11,"mul",E,E,0,[[[T]],[R[203]]]],[11,"rem",E,E,0,[[[R[203]]],[R[203]]]],[11,"rem",E,E,0,[[[R[203]]],["self"]]],[11,"rem",E,E,0,[[[T]],[R[203]]]],[11,"rem",E,E,0,[[[T]],[R[203]]]],[11,"neg",E,E,0,[[],[R[203]]]],[11,R[157],E,E,0,[[[R[203]],["self"]]]],[11,R[157],E,E,0,[[["self"],[T]]]],[11,R[157],E,E,0,[[["self"],[R[203]]]]],[11,R[157],E,E,0,[[["self"],[T]]]],[11,R[158],E,E,0,[[[R[203]],["self"]]]],[11,R[158],E,E,0,[[["self"],[T]]]],[11,R[158],E,E,0,[[["self"],[R[203]]]]],[11,R[158],E,E,0,[[["self"],[T]]]],[11,R[205],E,E,0,[[[R[203]],["self"]]]],[11,R[205],E,E,0,[[["self"],[T]]]],[11,R[205],E,E,0,[[["self"],[R[203]]]]],[11,R[205],E,E,0,[[["self"],[T]]]],[11,R[206],E,E,0,[[[R[203]],["self"]]]],[11,R[206],E,E,0,[[["self"],[T]]]],[11,R[206],E,E,0,[[["self"],[R[203]]]]],[11,R[206],E,E,0,[[["self"],[T]]]],[11,R[207],E,E,0,[[[R[203]],["self"]]]],[11,R[207],E,E,0,[[["self"],[T]]]],[11,R[207],E,E,0,[[["self"],[R[203]]]]],[11,R[207],E,E,0,[[["self"],[T]]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,R[400],E,E,0,[[["i"]],["self"]]],[11,R[400],E,E,0,[[["i"]],["self"]]],[11,R[51],E,R[208],0,[[["str"]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"clone",E,E,0,[[["self"]],[R[203]]]],[11,R[210],E,E,0,[[],[R[203]]]],[11,R[304],E,E,0,[[["self"]],[[R[2]],[R[20],[R[2]]]]]],[11,R[303],E,E,0,[[["self"]],[[R[20],["isize"]],["isize"]]]],[11,"to_u8",E,E,0,[[["self"]],[[R[20],["u8"]],["u8"]]]],[11,"to_u16",E,E,0,[[["self"]],[[R[20],["u16"]],["u16"]]]],[11,"to_u32",E,E,0,[[["self"]],[["u32"],[R[20],["u32"]]]]],[11,"to_u64",E,E,0,[[["self"]],[[R[20],["u64"]],["u64"]]]],[11,"to_i8",E,E,0,[[["self"]],[[R[20],["i8"]],["i8"]]]],[11,"to_i16",E,E,0,[[["self"]],[["i16"],[R[20],["i16"]]]]],[11,"to_i32",E,E,0,[[["self"]],[["i32"],[R[20],["i32"]]]]],[11,"to_i64",E,E,0,[[["self"]],[["i64"],[R[20],["i64"]]]]],[11,R[432],E,E,0,[[["self"]],[["u128"],[R[20],["u128"]]]]],[11,R[431],E,E,0,[[["self"]],[["i128"],[R[20],["i128"]]]]],[11,"to_f32",E,E,0,[[["self"]],[[R[20],["f32"]],["f32"]]]],[11,"to_f64",E,E,0,[[["self"]],[["f64"],[R[20],["f64"]]]]],[11,R[213],E,E,0,[[[R[2]]],[R[20]]]],[11,R[211],E,E,0,[[["isize"]],[R[20]]]],[11,R[434],E,E,0,[[["u8"]],[R[20]]]],[11,R[307],E,E,0,[[["u16"]],[R[20]]]],[11,R[308],E,E,0,[[["u32"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[433],E,E,0,[[["i8"]],[R[20]]]],[11,R[305],E,E,0,[[["i16"]],[R[20]]]],[11,R[306],E,E,0,[[["i32"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,"from",E,E,0,[[[R[215]]],[R[20]]]],[11,"as_",E,E,0,[[],[U]]],[11,R[219],E,R[208],0,[[["u32"],["str"]],[R[24]]]],[11,"zero",E,E,0,[[],[R[203]]]],[11,R[429],E,E,0,[[["self"]],["bool"]]],[11,"one",E,E,0,[[],[R[203]]]],[11,"is_one",E,E,0,[[["self"]],["bool"]]],[11,"inv",E,E,0,[[],[R[203]]]]],"p":[[3,"Complex"],[3,R[209]]]};
searchIndex[R[229]]={"doc":"Rational numbers","i":[[3,"Ratio",R[229],R[401],N,N],[3,R[235],E,E,N,N],[6,R[402],E,R[364],N,N],[6,R[403],E,R[404],N,N],[6,R[405],E,R[406],N,N],[11,"new",E,R[407],0,[[[T]],["ratio"]]],[11,R[408],E,R[409],0,[[[T]],["ratio"]]],[11,"new_raw",E,R[410],0,[[[T]],["ratio"]]],[11,R[411],E,R[412],0,[[["self"]],[T]]],[11,"numer",E,R[413],0,[[["self"]],[T]]],[11,"denom",E,R[414],0,[[["self"]],[T]]],[11,R[415],E,R[416],0,[[["self"]],["bool"]]],[11,"reduced",E,R[417],0,[[["self"]],["ratio"]]],[11,"recip",E,R[418],0,[[["self"]],["ratio"]]],[11,"floor",E,R[419],0,[[["self"]],["ratio"]]],[11,"ceil",E,R[420],0,[[["self"]],["ratio"]]],[11,"round",E,R[421],0,[[["self"]],["ratio"]]],[11,"trunc",E,R[422],0,[[["self"]],["ratio"]]],[11,"fract",E,R[423],0,[[["self"]],["ratio"]]],[11,"pow",E,R[424],0,[[["i32"],["self"]],["ratio"]]],[11,R[425],E,E,0,[[["numcast"],["floatcore"]],[[R[20],["ratio"]],["ratio"]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,R[426],0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"div",E,E,0,[[["ratio"]],["ratio"]]],[11,"div",E,E,0,[[[T]],["ratio"]]],[11,"div",E,E,0,[[["ratio"]],["ratio"]]],[11,"div",E,E,0,[[[T]],["ratio"]]],[11,"eq",E,E,0,[[["self"]],["bool"]]],[11,"eq",E,E,1,[[[R[230]],["self"]],["bool"]]],[11,"ne",E,E,1,[[[R[230]],["self"]],["bool"]]],[11,"cmp",E,E,0,[[["self"]],[R[49]]]],[11,R[50],E,E,0,[[["self"]],[[R[49]],[R[20],[R[49]]]]]],[11,"from",E,E,0,[[[T]],["ratio"]]],[11,"from",E,E,0,[[],["ratio"]]],[11,"hash",E,E,0,[[["h"],["self"]]]],[11,"add",E,E,0,[[["ratio"]],["ratio"]]],[11,"add",E,E,0,[[[T]],["ratio"]]],[11,"add",E,E,0,[[["ratio"]],["ratio"]]],[11,"add",E,E,0,[[[T]],["ratio"]]],[11,"sub",E,E,0,[[["ratio"]],["ratio"]]],[11,"sub",E,E,0,[[[T]],["ratio"]]],[11,"sub",E,E,0,[[["ratio"]],["ratio"]]],[11,"sub",E,E,0,[[[T]],["ratio"]]],[11,"mul",E,E,0,[[["ratio"]],["ratio"]]],[11,"mul",E,E,0,[[[T]],["ratio"]]],[11,"mul",E,E,0,[[["ratio"]],["ratio"]]],[11,"mul",E,E,0,[[[T]],["ratio"]]],[11,"rem",E,E,0,[[["ratio"]],["ratio"]]],[11,"rem",E,E,0,[[[T]],["ratio"]]],[11,"rem",E,E,0,[[["ratio"]],["ratio"]]],[11,"rem",E,E,0,[[[T]],["ratio"]]],[11,"neg",E,E,0,[[],["ratio"]]],[11,R[157],E,E,0,[[["self"],["ratio"]]]],[11,R[157],E,E,0,[[["self"],[T]]]],[11,R[157],E,E,0,[[["self"],["ratio"]]]],[11,R[157],E,E,0,[[["self"],[T]]]],[11,R[158],E,E,0,[[["self"],["ratio"]]]],[11,R[158],E,E,0,[[["self"],[T]]]],[11,R[158],E,E,0,[[["self"],["ratio"]]]],[11,R[158],E,E,0,[[["self"],[T]]]],[11,R[205],E,E,0,[[["self"],["ratio"]]]],[11,R[205],E,E,0,[[["self"],[T]]]],[11,R[205],E,E,0,[[["self"],["ratio"]]]],[11,R[205],E,E,0,[[["self"],[T]]]],[11,R[206],E,E,0,[[["self"],["ratio"]]]],[11,R[206],E,E,0,[[["self"],[T]]]],[11,R[206],E,E,0,[[["self"],["ratio"]]]],[11,R[206],E,E,0,[[["self"],[T]]]],[11,R[207],E,E,0,[[["self"],["ratio"]]]],[11,R[207],E,E,0,[[["self"],[T]]]],[11,R[207],E,E,0,[[["self"],["ratio"]]]],[11,R[207],E,E,0,[[["self"],[T]]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,"sum",E,E,0,[[["i"]],["self"]]],[11,R[400],E,E,0,[[["i"]],["self"]]],[11,R[400],E,E,0,[[["i"]],["self"]]],[11,R[51],E,R[427],0,[[["str"]],[[R[24],["ratio",R[230]]],[R[230]],["ratio"]]]],[11,"clone",E,E,0,[[["self"]],["ratio"]]],[11,"clone",E,E,1,[[["self"]],[R[230]]]],[11,"into",E,E,0,[[]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[231],E,E,0,[[["i64"]],[R[20]]]],[11,R[212],E,E,0,[[["i128"]],[R[20]]]],[11,R[232],E,E,0,[[["u64"]],[R[20]]]],[11,R[214],E,E,0,[[["u128"]],[R[20]]]],[11,R[233],E,E,0,[[["f32"]],[R[20]]]],[11,R[234],E,E,0,[[["f64"]],[R[20]]]],[11,R[219],E,R[428],0,[[["u32"],["str"]],[[R[24],["ratio",R[230]]],[R[230]],["ratio"]]]],[11,"zero",E,E,0,[[],["ratio"]]],[11,R[429],E,E,0,[[["self"]],["bool"]]],[11,"one",E,E,0,[[],["ratio"]]],[11,"is_one",E,E,0,[[["self"]],["bool"]]],[11,R[238],E,E,0,[[["self"],["ratio"]],[[R[20],["ratio"]],["ratio"]]]],[11,R[239],E,E,0,[[["self"],["ratio"]],[[R[20],["ratio"]],["ratio"]]]],[11,R[237],E,E,0,[[["self"],["ratio"]],[[R[20],["ratio"]],["ratio"]]]],[11,R[236],E,E,0,[[["self"],["ratio"]],[[R[20],["ratio"]],["ratio"]]]],[11,"inv",E,E,0,[[],["ratio"]]],[11,"pow",E,E,0,[[["i8"]],["ratio"]]],[11,"pow",E,E,0,[[["i8"]],["ratio"]]],[11,"pow",E,E,0,[[["i16"]],["ratio"]]],[11,"pow",E,E,0,[[["i16"]],["ratio"]]],[11,"pow",E,E,0,[[["i32"]],["ratio"]]],[11,"pow",E,E,0,[[["i32"]],["ratio"]]],[11,"pow",E,E,0,[[["i64"]],["ratio"]]],[11,"pow",E,E,0,[[["i64"]],["ratio"]]],[11,"pow",E,E,0,[[["isize"]],["ratio"]]],[11,"pow",E,E,0,[[["isize"]],["ratio"]]],[11,"pow",E,E,0,[[["u8"]],["ratio"]]],[11,"pow",E,E,0,[[["u8"]],["ratio"]]],[11,"pow",E,E,0,[[["u16"]],["ratio"]]],[11,"pow",E,E,0,[[["u16"]],["ratio"]]],[11,"pow",E,E,0,[[["u32"]],["ratio"]]],[11,"pow",E,E,0,[[["u32"]],["ratio"]]],[11,"pow",E,E,0,[[["u64"]],["ratio"]]],[11,"pow",E,E,0,[[["u64"]],["ratio"]]],[11,"pow",E,E,0,[[[R[2]]],["ratio"]]],[11,"pow",E,E,0,[[[R[2]]],["ratio"]]],[11,"abs",E,E,0,[[["self"]],["ratio"]]],[11,R[430],E,E,0,[[["self"],["ratio"]],["ratio"]]],[11,"signum",E,E,0,[[["self"]],["ratio"]]],[11,R[240],E,E,0,[[["self"]],["bool"]]],[11,R[241],E,E,0,[[["self"]],["bool"]]]],"p":[[3,"Ratio"],[3,R[235]]]};
searchIndex[R[33]]={"doc":E,"i":[[0,"object",R[33],E,N,N],[3,R[37],R[35],E,N,N],[12,"index",E,E,0,N],[12,R[599],E,E,0,N],[6,"Index",E,E,N,N],[6,"Generation",E,E,N,N],[0,"syscall",R[33],E,N,N],[5,"yield_to_kernel",R[34],E,N,[[]]],[0,"raw_x86_64",E,E,N,N],[5,"syscall0","libpebble::syscall::raw_x86_64",E,N,[[[R[2]]],[R[2]]]],[5,"syscall1",E,E,N,[[[R[2]]],[R[2]]]],[5,"syscall2",E,E,N,[[[R[2]]],[R[2]]]],[5,"syscall3",E,E,N,[[[R[2]]],[R[2]]]],[5,"syscall4",E,E,N,[[[R[2]]],[R[2]]]],[5,"syscall5",E,E,N,[[[R[2]]],[R[2]]]],[17,"SYSCALL_YIELD",R[34],E,N,N],[11,"from",R[35],E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"eq",E,E,0,[[["self"],[R[36]]],["bool"]]],[11,"ne",E,E,0,[[["self"],[R[36]]],["bool"]]],[11,"clone",E,E,0,[[["self"]],[R[36]]]]],"p":[[3,R[37]]]};
searchIndex[R[58]]={"doc":"Numeric traits for generic mathematics","i":[[3,R[73],R[58],E,N,N],[12,"kind",E,E,0,N],[4,R[74],E,E,N,N],[13,"Empty",E,E,1,N],[13,"Invalid",E,E,1,N],[5,"clamp",E,R[363],N,[[[R[59]]],[R[59]]]],[0,"bounds",E,E,N,N],[8,"Bounded","num_traits::bounds",R[299],N,N],[10,R[60],E,R[300],2,[[],["self"]]],[10,R[61],E,R[301],2,[[],["self"]]],[0,"cast",R[58],E,N,N],[5,"cast","num_traits::cast",R[274],N,[[["numcast"]],[[R[20]],["numcast"]]]],[8,R[75],E,R[242],N,N],[11,R[303],E,R[243],3,[[["self"]],[[R[20],["isize"]],["isize"]]]],[11,"to_i8",E,R[244],3,[[["self"]],[[R[20],["i8"]],["i8"]]]],[11,"to_i16",E,R[245],3,[[["self"]],[["i16"],[R[20],["i16"]]]]],[11,"to_i32",E,R[246],3,[[["self"]],[["i32"],[R[20],["i32"]]]]],[10,"to_i64",E,R[247],3,[[["self"]],[["i64"],[R[20],["i64"]]]]],[11,R[431],E,R[248],3,[[["self"]],[["i128"],[R[20],["i128"]]]]],[11,R[304],E,R[249],3,[[["self"]],[[R[2]],[R[20],[R[2]]]]]],[11,"to_u8",E,R[250],3,[[["self"]],[[R[20],["u8"]],["u8"]]]],[11,"to_u16",E,R[251],3,[[["self"]],[[R[20],["u16"]],["u16"]]]],[11,"to_u32",E,R[252],3,[[["self"]],[["u32"],[R[20],["u32"]]]]],[10,"to_u64",E,R[253],3,[[["self"]],[[R[20],["u64"]],["u64"]]]],[11,R[432],E,R[254],3,[[["self"]],[["u128"],[R[20],["u128"]]]]],[11,"to_f32",E,R[255],3,[[["self"]],[[R[20],["f32"]],["f32"]]]],[11,"to_f64",E,R[256],3,[[["self"]],[["f64"],[R[20],["f64"]]]]],[8,R[76],E,R[257],N,N],[11,R[211],E,R[258],4,[[["isize"]],[R[20]]]],[11,R[433],E,R[259],4,[[["i8"]],[R[20]]]],[11,R[305],E,R[260],4,[[["i16"]],[R[20]]]],[11,R[306],E,R[261],4,[[["i32"]],[R[20]]]],[10,R[231],E,R[262],4,[[["i64"]],[R[20]]]],[11,R[212],E,R[263],4,[[["i128"]],[R[20]]]],[11,R[213],E,R[264],4,[[[R[2]]],[R[20]]]],[11,R[434],E,R[265],4,[[["u8"]],[R[20]]]],[11,R[307],E,R[266],4,[[["u16"]],[R[20]]]],[11,R[308],E,R[267],4,[[["u32"]],[R[20]]]],[10,R[232],E,R[268],4,[[["u64"]],[R[20]]]],[11,R[214],E,R[269],4,[[["u128"]],[R[20]]]],[11,R[233],E,R[270],4,[[["f32"]],[R[20]]]],[11,R[234],E,R[271],4,[[["f64"]],[R[20]]]],[8,R[541],E,R[272],N,N],[10,"from",E,R[273],5,[[[R[215]]],[R[20]]]],[8,R[77],E,R[309],N,N],[10,"as_",E,R[310],6,[[],[T]]],[0,"float",R[58],E,N,N],[8,R[78],"num_traits::float",R[435],N,N],[10,"infinity",E,R[436],7,[[],["self"]]],[10,R[437],E,R[438],7,[[],["self"]]],[10,"nan",E,R[439],7,[[],["self"]]],[10,"neg_zero",E,R[440],7,[[],["self"]]],[10,R[60],E,R[441],7,[[],["self"]]],[10,R[442],E,R[443],7,[[],["self"]]],[10,"epsilon",E,R[444],7,[[],["self"]]],[10,R[61],E,R[445],7,[[],["self"]]],[11,"is_nan",E,R[446],7,[[],["bool"]]],[11,R[216],E,R[447],7,[[],["bool"]]],[11,R[217],E,R[448],7,[[],["bool"]]],[11,R[218],E,R[449],7,[[],["bool"]]],[10,"classify",E,R[450],7,[[],[R[451]]]],[11,"floor",E,R[452],7,[[],["self"]]],[11,"ceil",E,R[453],7,[[],["self"]]],[11,"round",E,R[454],7,[[],["self"]]],[11,"trunc",E,R[455],7,[[],["self"]]],[11,"fract",E,R[456],7,[[],["self"]]],[11,"abs",E,R[457],7,[[],["self"]]],[11,"signum",E,R[458],7,[[],["self"]]],[11,R[459],E,R[460],7,[[],["bool"]]],[11,R[461],E,R[462],7,[[],["bool"]]],[11,"min",E,R[463],7,[[],["self"]]],[11,"max",E,R[464],7,[[],["self"]]],[11,"recip",E,R[465],7,[[],["self"]]],[11,"powi",E,R[466],7,[[["i32"]],["self"]]],[10,R[467],E,R[468],7,[[],["self"]]],[10,R[469],E,R[470],7,[[],["self"]]],[10,R[471],E,R[472],7,[[]]],[8,R[79],E,E,N,N],[10,"E",E,R[473],8,[[],["self"]]],[10,R[474],E,R[475],8,[[],["self"]]],[10,R[476],E,R[477],8,[[],["self"]]],[10,R[478],E,R[479],8,[[],["self"]]],[10,R[480],E,R[481],8,[[],["self"]]],[10,R[482],E,R[483],8,[[],["self"]]],[10,R[484],E,R[485],8,[[],["self"]]],[10,R[486],E,R[487],8,[[],["self"]]],[10,R[488],E,R[489],8,[[],["self"]]],[10,R[490],E,R[491],8,[[],["self"]]],[10,"LN_10",E,R[492],8,[[],["self"]]],[10,"LN_2",E,R[493],8,[[],["self"]]],[10,"LOG10_E",E,R[494],8,[[],["self"]]],[10,"LOG2_E",E,R[495],8,[[],["self"]]],[10,"PI",E,R[496],8,[[],["self"]]],[10,"SQRT_2",E,R[497],8,[[],["self"]]],[0,R[498],R[58],E,N,N],[5,"zero","num_traits::identities",R[317],N,[[],["zero"]]],[5,"one",E,R[318],N,[[],["one"]]],[8,"Zero",E,R[311],N,N],[10,"zero",E,R[312],9,[[],["self"]]],[10,R[429],E,R[313],9,[[["self"]],["bool"]]],[8,"One",E,R[314],N,N],[10,"one",E,R[315],10,[[],["self"]]],[11,"is_one",E,R[316],10,[[["self"]],["bool"]]],[0,"int",R[58],E,N,N],[8,"PrimInt","num_traits::int",E,N,N],[10,R[319],E,R[320],11,[[],["u32"]]],[10,R[321],E,R[322],11,[[],["u32"]]],[10,R[323],E,R[324],11,[[],["u32"]]],[10,R[325],E,R[326],11,[[],["u32"]]],[10,R[327],E,R[62],11,[[["u32"]],["self"]]],[10,R[328],E,R[63],11,[[["u32"]],["self"]]],[10,R[329],E,R[62],11,[[["u32"]],["self"]]],[10,R[330],E,R[63],11,[[["u32"]],["self"]]],[10,R[331],E,R[62],11,[[["u32"]],["self"]]],[10,R[332],E,R[63],11,[[["u32"]],["self"]]],[10,R[333],E,R[334],11,[[],["self"]]],[10,"from_be",E,R[335],11,[[],["self"]]],[10,"from_le",E,R[336],11,[[],["self"]]],[10,"to_be",E,R[337],11,[[],["self"]]],[10,"to_le",E,R[338],11,[[],["self"]]],[10,"pow",E,R[339],11,[[["u32"]],["self"]]],[0,"ops",R[58],E,N,N],[0,"checked",R[65],E,N,N],[8,R[80],"num_traits::ops::checked",R[340],N,N],[10,R[236],E,R[341],12,[[["self"]],[R[20]]]],[8,R[81],E,R[342],N,N],[10,R[237],E,R[343],13,[[["self"]],[R[20]]]],[8,R[82],E,R[344],N,N],[10,R[238],E,R[345],14,[[["self"]],[R[20]]]],[8,R[83],E,R[346],N,N],[10,R[239],E,R[347],15,[[["self"]],[R[20]]]],[8,R[84],E,R[499],N,N],[10,R[500],E,R[501],16,[[["self"]],[R[20]]]],[8,R[85],E,R[502],N,N],[10,R[503],E,R[504],17,[[["self"]],[R[20]]]],[8,R[86],E,R[505],N,N],[10,R[506],E,R[64],18,[[["u32"],["self"]],[R[20]]]],[8,R[87],E,R[507],N,N],[10,R[508],E,R[64],19,[[["u32"],["self"]],[R[20]]]],[0,"inv",R[65],E,N,N],[8,"Inv","num_traits::ops::inv",R[509],N,N],[16,"Output",E,R[68],20,N],[10,"inv",E,R[510],20,[[]]],[0,"mul_add",R[65],E,N,N],[8,"MulAdd","num_traits::ops::mul_add",R[511],N,N],[16,"Output",E,R[512],21,N],[10,"mul_add",E,R[66],21,[[["a"],["b"]]]],[8,R[88],E,R[513],N,N],[10,R[514],E,R[66],22,[[["self"],["a"],["b"]]]],[0,R[515],R[65],E,N,N],[8,R[89],"num_traits::ops::saturating",R[349],N,N],[10,R[350],E,R[351],23,[[],["self"]]],[10,R[352],E,R[353],23,[[],["self"]]],[0,"wrapping",R[65],E,N,N],[8,R[90],"num_traits::ops::wrapping",R[516],N,N],[10,R[517],E,R[518],24,[[["self"]],["self"]]],[8,R[91],E,R[519],N,N],[10,R[520],E,R[521],25,[[["self"]],["self"]]],[8,R[92],E,R[522],N,N],[10,R[523],E,R[524],26,[[["self"]],["self"]]],[8,R[93],E,R[525],N,N],[10,R[526],E,R[527],27,[[["u32"],["self"]],["self"]]],[8,R[94],E,R[528],N,N],[10,R[529],E,R[530],28,[[["u32"],["self"]],["self"]]],[0,"pow",R[58],E,N,N],[5,"pow","num_traits::pow",R[275],N,[[["mul"],["one"],[R[2]],["clone"]],[["mul"],["one"],["clone"]]]],[5,R[276],E,R[277],N,[[[R[67]],["one"],[R[2]],["clone"]],[[R[20]],[R[67]],["one"],["clone"]]]],[8,"Pow",E,R[354],N,N],[16,"Output",E,R[68],29,N],[10,"pow",E,R[355],29,[[["rhs"]]]],[0,"sign",R[58],E,N,N],[5,"abs","num_traits::sign",R[70],N,[[[R[69]]],[R[69]]]],[5,R[430],E,R[71],N,[[[R[69]]],[R[69]]]],[5,"signum",E,R[72],N,[[[R[69]]],[R[69]]]],[8,"Signed",E,R[356],N,N],[10,"abs",E,R[70],30,[[["self"]],["self"]]],[10,R[430],E,R[71],30,[[["self"]],["self"]]],[10,"signum",E,R[72],30,[[["self"]],["self"]]],[10,R[240],E,R[357],30,[[["self"]],["bool"]]],[10,R[241],E,R[358],30,[[["self"]],["bool"]]],[8,R[531],E,R[359],N,N],[8,"Num",R[58],R[360],N,N],[16,R[361],E,E,31,N],[10,R[219],E,R[362],31,[[["u32"],["str"]],[R[24]]]],[8,"NumOps",E,R[532],N,N],[8,"NumRef",E,R[533],N,N],[8,"RefNum",E,R[534],N,N],[8,R[535],E,R[536],N,N],[8,R[537],E,R[538],N,N],[8,R[539],E,R[540],N,N],[11,"from",E,E,0,[[[T]],[T]]],[11,R[21],E,E,0,[[[U]],[R[24]]]],[11,R[22],E,E,0,[[],[R[24]]]],[11,"into",E,E,0,[[],[U]]],[11,R[26],E,E,0,[[["self"]],[T]]],[11,R[23],E,E,0,[[["self"]],[T]]],[11,R[25],E,E,0,[[["self"]],[R[27]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[21],E,E,1,[[[U]],[R[24]]]],[11,R[22],E,E,1,[[],[R[24]]]],[11,"into",E,E,1,[[],[U]]],[11,R[26],E,E,1,[[["self"]],[T]]],[11,R[23],E,E,1,[[["self"]],[T]]],[11,R[25],E,E,1,[[["self"]],[R[27]]]],[11,"fmt",E,E,1,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]],[11,"fmt",E,E,0,[[["self"],[R[29]]],[R[24]]]]],"p":[[3,R[73]],[4,R[74]],[8,"Bounded"],[8,R[75]],[8,R[76]],[8,R[541]],[8,R[77]],[8,R[78]],[8,R[79]],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,R[80]],[8,R[81]],[8,R[82]],[8,R[83]],[8,R[84]],[8,R[85]],[8,R[86]],[8,R[87]],[8,"Inv"],[8,"MulAdd"],[8,R[88]],[8,R[89]],[8,R[90]],[8,R[91]],[8,R[92]],[8,R[93]],[8,R[94]],[8,"Pow"],[8,"Signed"],[8,"Num"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);