initSidebarItems({"constant":[["ADDRESS_SPACE_STACK_SLOT_SIZE","The size of a slot of stacks that is allocated for a single address space to use."],["BOOT_INFO",""],["HEAP_END",""],["HEAP_START","The start of the heap. The heap is 200 KiB."],["KERNEL_ADDRESS_SPACE_START",""],["KERNEL_BASE","This is the base of the kernel address space. It starts at -2GB. We don't know how much memory the kernel image will take up when loaded into memory, so we leave quite a lot of space until the next statically mapped thing."],["KERNEL_P4_ENTRY","The kernel is mapped into the 511th entry of the P4."],["KERNEL_STACKS_BASE",""],["LOCAL_APIC_CONFIG","While we could access the local APIC from the physical mapping, it's easier to just map it to a fixed virtual address, so we can always access its config space. This allows us to use `LocalApic` as a singleton, so we can easily access it from interrupt handlers."],["MAX_ADDRESS_SPACES",""],["MAX_TASKS_PER_ADDRESS_SPACE",""],["PHYSICAL_MAPPING_BASE","The base virtual address of the physical memory mapping. This is equal to `KERNEL_ADDRESS_SPACE_START` because we map the physical memory at the start of the kernel's P4 entry."],["STACK_SLOT_SIZE","The size of a single kernel stack."]],"fn":[["kernel_stack_area_base",""],["physical_to_virtual","Access a given `PhysicalAddress` using the physical memory mapping in the kernel address space. Only works within the kernel - cannot be used by the bootloader, and the addresses can't be given to userspace."]]});