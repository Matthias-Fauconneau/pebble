var searchIndex={};
searchIndex["acpi"] = {"doc":"A library for parsing ACPI tables. This crate can be used…","i":[[3,"HpetInfo","acpi","Information about the High Precision Event Timer",null,null],[3,"PciConfigRegions","","Describes a set of regions of physical memory used to…",null,null],[3,"Processor","","",null,null],[12,"processor_uid","","",0,null],[12,"local_apic_id","","",0,null],[12,"state","","The state of this processor. Always check that the…",0,null],[12,"is_ap","","Whether this processor is the Bootstrap Processor (BSP),…",0,null],[3,"AmlTable","","",null,null],[12,"address","","Physical address of the start of the AML stream (excluding…",1,null],[12,"length","","Length (in bytes) of the AML stream.",1,null],[3,"Acpi","","",null,null],[12,"acpi_revision","","",2,null],[12,"boot_processor","","The boot processor. Until you bring up any APs, this is…",2,null],[12,"application_processors","","Application processes. These are not brought up until you…",2,null],[12,"interrupt_model","","ACPI theoretically allows for more than one interrupt…",2,null],[12,"hpet","","",2,null],[12,"dsdt","","Info about the DSDT, if we find it.",2,null],[12,"ssdts","","Info about any SSDTs, if there are any.",2,null],[12,"pci_config_regions","","Info about the PCI-E configuration memory regions,…",2,null],[4,"MadtError","","",null,null],[13,"UnexpectedEntry","","",3,null],[13,"InterruptOverrideEntryHasInvalidBus","","",3,null],[13,"InvalidLocalNmiLine","","",3,null],[13,"NoLocalNmiLineSpecified","","",3,null],[13,"MpsIntiInvalidPolarity","","",3,null],[13,"MpsIntiInvalidTriggerMode","","",3,null],[4,"AcpiError","","",null,null],[13,"RsdpIncorrectSignature","","",4,null],[13,"RsdpInvalidOemId","","",4,null],[13,"RsdpInvalidChecksum","","",4,null],[13,"NoValidRsdp","","",4,null],[13,"SdtInvalidSignature","","",4,null],[13,"SdtInvalidOemId","","",4,null],[13,"SdtInvalidTableId","","",4,null],[13,"SdtInvalidChecksum","","",4,null],[13,"InvalidMadt","","",4,null],[4,"ProcessorState","","",null,null],[13,"Disabled","","A processor in this state is unusable, and you must not…",5,null],[13,"WaitingForSipi","","A processor waiting for a SIPI (Startup Inter-processor…",5,null],[13,"Running","","A Running processor is currently brought up and running…",5,null],[5,"search_for_rsdp_bios","","This is the entry point of `acpi` if you have no…",null,[[["h"]],[["result",["acpi","acpierror"]],["acpi"],["acpierror"]]]],[5,"parse_rsdp","","This is the entry point of `acpi` if you have the physical…",null,[[["usize"],["h"]],[["result",["acpi","acpierror"]],["acpi"],["acpierror"]]]],[5,"parse_rsdt","","This is the entry point of `acpi` if you already have the…",null,[[["u8"],["usize"],["h"]],[["result",["acpi","acpierror"]],["acpi"],["acpierror"]]]],[0,"handler","","",null,null],[3,"PhysicalMapping","acpi::handler","Describes a physical mapping created by…",null,null],[12,"physical_start","","",6,null],[12,"virtual_start","","",6,null],[12,"region_length","","",6,null],[12,"mapped_length","","",6,null],[8,"AcpiHandler","","An implementation of this trait must be provided to allow…",null,null],[10,"map_physical_region","","Given a starting physical address and a size, map a region…",7,[[["self"],["usize"]],["physicalmapping"]]],[10,"unmap_physical_region","","Unmap the given physical mapping. Safe because we consume…",7,[[["self"],["physicalmapping"]]]],[0,"interrupt","acpi","",null,null],[3,"IoApic","acpi::interrupt","",null,null],[12,"id","","",8,null],[12,"address","","",8,null],[12,"global_system_interrupt_base","","",8,null],[3,"InterruptSourceOverride","","Describes a difference in the mapping of an ISA interrupt…",null,null],[12,"isa_source","","",9,null],[12,"global_system_interrupt","","",9,null],[12,"polarity","","",9,null],[12,"trigger_mode","","",9,null],[3,"NmiSource","","Describes a Global System Interrupt that should be enabled…",null,null],[12,"global_system_interrupt","","",10,null],[12,"polarity","","",10,null],[12,"trigger_mode","","",10,null],[3,"Apic","","",null,null],[12,"local_apic_address","","",11,null],[12,"io_apics","","",11,null],[12,"local_apic_nmi_line","","",11,null],[12,"interrupt_source_overrides","","",11,null],[12,"nmi_sources","","",11,null],[12,"also_has_legacy_pics","","If this field is set, you must remap and mask all the…",11,null],[4,"LocalInterruptLine","","",null,null],[13,"Lint0","","",12,null],[13,"Lint1","","",12,null],[4,"Polarity","","",null,null],[13,"SameAsBus","","",13,null],[13,"ActiveHigh","","",13,null],[13,"ActiveLow","","",13,null],[4,"TriggerMode","","",null,null],[13,"SameAsBus","","",14,null],[13,"Edge","","",14,null],[13,"Level","","",14,null],[4,"InterruptModel","","",null,null],[13,"Pic","","This model is only chosen when a newer one can not be…",15,null],[13,"Apic","","Describes an interrupt controller based around the…",15,null],[11,"physical_address","acpi","Get the physical address of the start of the configuration…",16,[[["u16"],["self"],["u8"]],[["option",["u64"]],["u64"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"from","acpi::handler","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","acpi::interrupt","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"deref","acpi::handler","",6,[[["self"]],["t"]]],[11,"fmt","acpi","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","acpi::interrupt","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","acpi","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"eq","","",5,[[["self"],["processorstate"]],["bool"]]],[11,"eq","","",0,[[["processor"],["self"]],["bool"]]],[11,"ne","","",0,[[["processor"],["self"]],["bool"]]],[11,"clone","","",5,[[["self"]],["processorstate"]]],[11,"clone","","",0,[[["self"]],["processor"]]]],"p":[[3,"Processor"],[3,"AmlTable"],[3,"Acpi"],[4,"MadtError"],[4,"AcpiError"],[4,"ProcessorState"],[3,"PhysicalMapping"],[8,"AcpiHandler"],[3,"IoApic"],[3,"InterruptSourceOverride"],[3,"NmiSource"],[3,"Apic"],[4,"LocalInterruptLine"],[4,"Polarity"],[4,"TriggerMode"],[4,"InterruptModel"],[3,"PciConfigRegions"],[3,"HpetInfo"]]};
searchIndex["aml"] = {"doc":"`aml` is a pure-Rust AML (ACPI Machine Language) parser,…","i":[[3,"AmlHandle","aml","A handle is used to refer to an AML value without actually…",null,null],[3,"AmlName","","",null,null],[3,"Namespace","","",null,null],[3,"AmlContext","","",null,null],[12,"namespace","","",0,null],[4,"AmlError","","",null,null],[13,"UnexpectedEndOfStream","","",1,null],[13,"UnexpectedByte","","",1,null],[13,"InvalidNameSeg","","",1,null],[13,"InvalidFieldFlags","","",1,null],[13,"IncompatibleValueConversion","","",1,null],[13,"UnterminatedStringConstant","","",1,null],[13,"InvalidStringConstant","","",1,null],[13,"InvalidRegionSpace","","",1,null],[13,"WrongParser","","Emitted by a parser when it's clear that the stream…",1,null],[13,"EmptyNamesAreInvalid","","",1,null],[13,"InvalidNormalizedName","","Produced when trying to normalize a path that does not…",1,null],[13,"RootHasNoParent","","",1,null],[13,"ObjectDoesNotExist","","Produced when a path is given that does not point to an…",1,null],[13,"HandleDoesNotExist","","",1,null],[13,"NameCollision","","Produced when two values with the same name are added to…",1,null],[13,"InvalidArgumentAccess","","Produced when a method accesses an argument it does not…",1,null],[13,"InvalidLocalAccess","","",1,null],[13,"Return","","This is not a real error, but is used to propagate return…",1,null],[13,"PrtInvalidAddress","","",1,null],[13,"PrtInvalidPin","","",1,null],[13,"PrtInvalidSource","","",1,null],[13,"PrtInvalidGsi","","",1,null],[13,"PrtNoEntry","","Produced when the PRT doesn't contain an entry for the…",1,null],[13,"ReservedResourceType","","",1,null],[13,"ResourceDescriptorTooShort","","",1,null],[11,"new","","",2,[[],["namespace"]]],[11,"add","","Add a value to the namespace at the given path, which must…",2,[[["self"],["amlvalue"],["amlname"]],[["result",["amlhandle","amlerror"]],["amlerror"],["amlhandle"]]]],[11,"add_at_resolved_path","","Helper method for adding a value to the namespace at a…",2,[[["amlvalue"],["amlname"],["self"],["amlname"]],[["result",["amlhandle","amlerror"]],["amlerror"],["amlhandle"]]]],[11,"get","","",2,[[["self"],["amlhandle"]],[["amlvalue"],["amlerror"],["result",["amlvalue","amlerror"]]]]],[11,"get_by_path","","",2,[[["amlname"],["self"]],[["amlvalue"],["amlerror"],["result",["amlvalue","amlerror"]]]]],[11,"get_mut","","",2,[[["self"],["amlhandle"]],[["result",["amlvalue","amlerror"]],["amlvalue"],["amlerror"]]]],[11,"get_by_path_mut","","",2,[[["amlname"],["self"]],[["result",["amlvalue","amlerror"]],["amlvalue"],["amlerror"]]]],[11,"search","","Search for an object at the given path of the namespace,…",2,[[["amlname"],["self"]],[["result",["amlerror"]],["amlerror"]]]],[11,"root","","",3,[[],["amlname"]]],[11,"from_name_seg","","",3,[[["nameseg"]],["amlname"]]],[11,"from_str","","Convert a string representation of an AML name into an…",3,[[["str"]],[["amlname"],["amlerror"],["result",["amlname","amlerror"]]]]],[11,"as_string","","",3,[[["self"]],["string"]]],[11,"is_normal","","An AML path is normal if it does not contain any prefix…",3,[[["self"]],["bool"]]],[11,"is_absolute","","",3,[[["self"]],["bool"]]],[11,"search_rules_apply","","Special rules apply when searching for certain paths…",3,[[["self"]],["bool"]]],[11,"normalize","","Normalize an AML path, resolving prefix chars. Returns…",3,[[],[["amlname"],["amlerror"],["result",["amlname","amlerror"]]]]],[11,"parent","","Get the parent of this `AmlName`. For example, the parent…",3,[[["self"]],[["amlname"],["amlerror"],["result",["amlname","amlerror"]]]]],[11,"resolve","","Resolve this path against a given scope, making it…",3,[[["amlname"],["self"]],[["amlname"],["amlerror"],["result",["amlname","amlerror"]]]]],[0,"pci_routing","","",null,null],[3,"PciRoute","aml::pci_routing","",null,null],[3,"PciRoutingTable","","A `PciRoutingTable` is used to interpret the data in a…",null,null],[4,"Pin","","",null,null],[13,"IntA","","",4,null],[13,"IntB","","",4,null],[13,"IntC","","",4,null],[13,"IntD","","",4,null],[4,"PciRouteType","","",null,null],[13,"Gsi","","The interrupt is hard-coded to a specific GSI",5,null],[13,"LinkObject","","The interrupt is linked to a link object. This object will…",5,null],[11,"from_prt_path","","Construct a `PciRoutingTable` from a path to a `_PRT`…",6,[[["amlname"],["amlcontext"]],[["pciroutingtable"],["amlerror"],["result",["pciroutingtable","amlerror"]]]]],[11,"route","","Get the interrupt input that a given PCI interrupt pin is…",6,[[["amlcontext"],["u16"],["self"],["pin"]],[["amlerror"],["irqdescriptor"],["result",["irqdescriptor","amlerror"]]]]],[0,"resource","aml","",null,null],[3,"IrqDescriptor","aml::resource","",null,null],[12,"is_consumer","","",7,null],[12,"trigger","","",7,null],[12,"polarity","","",7,null],[12,"is_shared","","",7,null],[12,"is_wake_capable","","",7,null],[12,"irq","","",7,null],[4,"Resource","","",null,null],[13,"Irq","","",8,null],[4,"InterruptTrigger","","",null,null],[13,"Edge","","",9,null],[13,"Level","","",9,null],[4,"InterruptPolarity","","",null,null],[13,"ActiveHigh","","",10,null],[13,"ActiveLow","","",10,null],[0,"value","aml","",null,null],[3,"FieldFlags","aml::value","",null,null],[3,"MethodFlags","","",null,null],[3,"Args","","A control method can take up to 7 arguments, each of which…",null,null],[12,"arg_0","","",11,null],[12,"arg_1","","",11,null],[12,"arg_2","","",11,null],[12,"arg_3","","",11,null],[12,"arg_4","","",11,null],[12,"arg_5","","",11,null],[12,"arg_6","","",11,null],[4,"RegionSpace","","",null,null],[13,"SystemMemory","","",12,null],[13,"SystemIo","","",12,null],[13,"PciConfig","","",12,null],[13,"EmbeddedControl","","",12,null],[13,"SMBus","","",12,null],[13,"SystemCmos","","",12,null],[13,"PciBarTarget","","",12,null],[13,"IPMI","","",12,null],[13,"GeneralPurposeIo","","",12,null],[13,"GenericSerialBus","","",12,null],[13,"OemDefined","","",12,null],[4,"FieldAccessType","","",null,null],[13,"Any","","",13,null],[13,"Byte","","",13,null],[13,"Word","","",13,null],[13,"DWord","","",13,null],[13,"QWord","","",13,null],[13,"Buffer","","",13,null],[13,"Reserved","","",13,null],[4,"FieldUpdateRule","","",null,null],[13,"Preserve","","",14,null],[13,"WriteAsOnes","","",14,null],[13,"WriteAsZeros","","",14,null],[4,"AmlType","","",null,null],[13,"Uninitialized","","",15,null],[13,"Buffer","","",15,null],[13,"BufferField","","",15,null],[13,"DdbHandle","","Handle to a definition block handle. Returned by the…",15,null],[13,"DebugObject","","",15,null],[13,"Device","","",15,null],[13,"Event","","",15,null],[13,"FieldUnit","","",15,null],[13,"Integer","","",15,null],[13,"Method","","",15,null],[13,"Mutex","","",15,null],[13,"ObjReference","","",15,null],[13,"OpRegion","","",15,null],[13,"Package","","",15,null],[13,"PowerResource","","",15,null],[13,"Processor","","",15,null],[13,"RawDataBuffer","","",15,null],[13,"String","","",15,null],[13,"ThermalZone","","",15,null],[4,"AmlValue","","",null,null],[13,"Boolean","","",16,null],[13,"Integer","","",16,null],[13,"String","","",16,null],[13,"Name","","",16,null],[13,"OpRegion","","",16,null],[12,"region","aml::value::AmlValue","",16,null],[12,"offset","","",16,null],[12,"length","","",16,null],[13,"Field","aml::value","",16,null],[12,"region","aml::value::AmlValue","",16,null],[12,"flags","","",16,null],[12,"offset","","",16,null],[12,"length","","",16,null],[13,"Device","aml::value","",16,null],[13,"Method","","",16,null],[12,"flags","aml::value::AmlValue","",16,null],[12,"code","","",16,null],[13,"Buffer","aml::value","",16,null],[12,"bytes","aml::value::AmlValue","",16,null],[12,"size","","",16,null],[13,"Processor","aml::value","",16,null],[12,"id","aml::value::AmlValue","",16,null],[12,"pblk_address","","",16,null],[12,"pblk_len","","",16,null],[13,"Mutex","aml::value","",16,null],[12,"sync_level","aml::value::AmlValue","",16,null],[13,"Package","aml::value","",16,null],[11,"new","","",17,[[["u8"]],["fieldflags"]]],[11,"access_type","","",17,[[["self"]],[["fieldaccesstype"],["result",["fieldaccesstype","amlerror"]],["amlerror"]]]],[11,"lock_rule","","",17,[[["self"]],["bool"]]],[11,"field_update_rule","","",17,[[["self"]],[["fieldupdaterule"],["amlerror"],["result",["fieldupdaterule","amlerror"]]]]],[11,"new","","",18,[[["u8"]],["methodflags"]]],[11,"arg_count","","",18,[[["self"]],["u8"]]],[11,"serialize","","",18,[[["self"]],["bool"]]],[11,"sync_level","","",18,[[["self"]],["u8"]]],[11,"type_of","","Returns the AML type of this value. For `Name`, this…",16,[[["self"]],["amltype"]]],[11,"as_bool","","",16,[[["self"]],[["amlerror"],["result",["bool","amlerror"]],["bool"]]]],[11,"as_integer","","",16,[[["self"]],[["amlerror"],["u64"],["result",["u64","amlerror"]]]]],[11,"as_type","","Convert this value to a value of the same data, but with…",16,[[["amltype"],["self"]],[["amlerror"],["amlvalue"],["result",["amlvalue","amlerror"]]]]],[11,"arg","","Get an argument by its `ArgNum`.",11,[[["self"],["u8"]],[["amlvalue"],["amlerror"],["result",["amlvalue","amlerror"]]]]],[17,"AML_INTERPRETER_REVISION","aml","AML has a `RevisionOp` operator that returns the \"AML…",null,null],[11,"new","","",0,[[],["amlcontext"]]],[11,"parse_table","","",0,[[["self"]],[["result",["amlerror"]],["amlerror"]]]],[11,"invoke_method","","Invoke a method referred to by its path in the namespace,…",0,[[["amlname"],["self"],["args"]],[["amlerror"],["amlvalue"],["result",["amlvalue","amlerror"]]]]],[14,"choice","","Takes a number of parsers, and tries to apply each one to…",null,null],[14,"make_parser_concrete","","This encapsulates an unfortunate hack we sometimes need to…",null,null],[14,"try_with_context","","Helper macro for use within `map_with_context` as an…",null,null],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"to_owned","","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","aml::pci_routing","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","aml::resource","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","aml::value","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"fmt","aml","",19,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","aml::pci_routing","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",20,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","aml::resource","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","aml::value","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","aml","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"eq","","",19,[[["self"],["amlhandle"]],["bool"]]],[11,"ne","","",19,[[["self"],["amlhandle"]],["bool"]]],[11,"eq","","",3,[[["amlname"],["self"]],["bool"]]],[11,"ne","","",3,[[["amlname"],["self"]],["bool"]]],[11,"eq","aml::pci_routing","",4,[[["pin"],["self"]],["bool"]]],[11,"eq","aml::value","",12,[[["regionspace"],["self"]],["bool"]]],[11,"ne","","",12,[[["regionspace"],["self"]],["bool"]]],[11,"eq","","",13,[[["fieldaccesstype"],["self"]],["bool"]]],[11,"eq","","",14,[[["fieldupdaterule"],["self"]],["bool"]]],[11,"eq","","",17,[[["self"],["fieldflags"]],["bool"]]],[11,"ne","","",17,[[["self"],["fieldflags"]],["bool"]]],[11,"eq","","",18,[[["methodflags"],["self"]],["bool"]]],[11,"ne","","",18,[[["methodflags"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["amltype"]],["bool"]]],[11,"eq","","",16,[[["amlvalue"],["self"]],["bool"]]],[11,"ne","","",16,[[["amlvalue"],["self"]],["bool"]]],[11,"eq","aml","",1,[[["amlerror"],["self"]],["bool"]]],[11,"ne","","",1,[[["amlerror"],["self"]],["bool"]]],[11,"cmp","","",19,[[["self"],["amlhandle"]],["ordering"]]],[11,"cmp","","",3,[[["amlname"],["self"]],["ordering"]]],[11,"partial_cmp","","",19,[[["self"],["amlhandle"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",19,[[["self"],["amlhandle"]],["bool"]]],[11,"le","","",19,[[["self"],["amlhandle"]],["bool"]]],[11,"gt","","",19,[[["self"],["amlhandle"]],["bool"]]],[11,"ge","","",19,[[["self"],["amlhandle"]],["bool"]]],[11,"partial_cmp","","",3,[[["amlname"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",3,[[["amlname"],["self"]],["bool"]]],[11,"le","","",3,[[["amlname"],["self"]],["bool"]]],[11,"gt","","",3,[[["amlname"],["self"]],["bool"]]],[11,"ge","","",3,[[["amlname"],["self"]],["bool"]]],[11,"clone","","",19,[[["self"]],["amlhandle"]]],[11,"clone","","",3,[[["self"]],["amlname"]]],[11,"clone","aml::pci_routing","",4,[[["self"]],["pin"]]],[11,"clone","aml::value","",12,[[["self"]],["regionspace"]]],[11,"clone","","",13,[[["self"]],["fieldaccesstype"]]],[11,"clone","","",14,[[["self"]],["fieldupdaterule"]]],[11,"clone","","",17,[[["self"]],["fieldflags"]]],[11,"clone","","",18,[[["self"]],["methodflags"]]],[11,"clone","","",15,[[["self"]],["amltype"]]],[11,"clone","","",16,[[["self"]],["amlvalue"]]],[11,"clone","","",11,[[["self"]],["args"]]],[11,"clone","aml","",1,[[["self"]],["amlerror"]]],[11,"default","aml::value","",11,[[],["args"]]]],"p":[[3,"AmlContext"],[4,"AmlError"],[3,"Namespace"],[3,"AmlName"],[4,"Pin"],[4,"PciRouteType"],[3,"PciRoutingTable"],[3,"IrqDescriptor"],[4,"Resource"],[4,"InterruptTrigger"],[4,"InterruptPolarity"],[3,"Args"],[4,"RegionSpace"],[4,"FieldAccessType"],[4,"FieldUpdateRule"],[4,"AmlType"],[4,"AmlValue"],[3,"FieldFlags"],[3,"MethodFlags"],[3,"AmlHandle"],[3,"PciRoute"]]};
searchIndex["bit_field"] = {"doc":"Provides the abstraction of a bit field, which allows for…","i":[[8,"BitField","bit_field","A generic trait which provides methods for extracting and…",null,null],[10,"bit_length","","Returns the length, eg number of bits, in this bit field.",0,[[],["usize"]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",0,[[["self"],["usize"]],["bool"]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",0,[[["range",["usize"]],["self"],["usize"]],["self"]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",0,[[["self"],["usize"],["bool"]],["self"]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",0,[[["range",["usize"]],["self"],["usize"]],["self"]]],[8,"BitArray","","",null,null],[10,"bit_length","","Returns the length, eg number of bits, in this bit array.",1,[[["self"]],["usize"]]],[10,"get_bit","","Obtains the bit at the index `bit`; note that index 0 is…",1,[[["self"],["usize"]],["bool"]]],[10,"get_bits","","Obtains the range of bits specified by `range`; note that…",1,[[["range",["usize"]],["self"],["usize"]],["t"]]],[10,"set_bit","","Sets the bit at the index `bit` to the value `value`…",1,[[["self"],["usize"],["bool"]]]],[10,"set_bits","","Sets the range of bits defined by the range `range` to the…",1,[[["usize"],["range",["usize"]],["self"],["t"]]]]],"p":[[8,"BitField"],[8,"BitArray"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of…","i":[[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"p":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and…","i":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"BE","","A type alias for [`BigEndian`].",null,null],[6,"LE","","A type alias for [`LittleEndian`].",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ByteOrder","","`ByteOrder` describes types that can serialize integers as…",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",0,[[],["u16"]]],[11,"read_u24","","Reads an unsigned 24 bit integer from `buf`, stored in u32.",0,[[],["u32"]]],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",0,[[],["u32"]]],[11,"read_u48","","Reads an unsigned 48 bit integer from `buf`, stored in u64.",0,[[],["u64"]]],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",0,[[],["u64"]]],[10,"read_u128","","Reads an unsigned 128 bit integer from `buf`.",0,[[],["u128"]]],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",0,[[["usize"]],["u64"]]],[10,"read_uint128","","Reads an unsigned n-bytes integer from `buf`.",0,[[["usize"]],["u128"]]],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",0,[[["u16"]]]],[11,"write_u24","","Writes an unsigned 24 bit integer `n` to `buf`, stored in…",0,[[["u32"]]]],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",0,[[["u32"]]]],[11,"write_u48","","Writes an unsigned 48 bit integer `n` to `buf`, stored in…",0,[[["u64"]]]],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",0,[[["u64"]]]],[10,"write_u128","","Writes an unsigned 128 bit integer `n` to `buf`.",0,[[["u128"]]]],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,[[["usize"],["u64"]]]],[10,"write_uint128","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",0,[[["usize"],["u128"]]]],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",0,[[],["i16"]]],[11,"read_i24","","Reads a signed 24 bit integer from `buf`, stored in i32.",0,[[],["i32"]]],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",0,[[],["i32"]]],[11,"read_i48","","Reads a signed 48 bit integer from `buf`, stored in i64.",0,[[],["i64"]]],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",0,[[],["i64"]]],[11,"read_i128","","Reads a signed 128 bit integer from `buf`.",0,[[],["i128"]]],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",0,[[["usize"]],["i64"]]],[11,"read_int128","","Reads a signed n-bytes integer from `buf`.",0,[[["usize"]],["i128"]]],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point…",0,[[],["f32"]]],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point…",0,[[],["f64"]]],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",0,[[["i16"]]]],[11,"write_i24","","Writes a signed 24 bit integer `n` to `buf`, stored in i32.",0,[[["i32"]]]],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",0,[[["i32"]]]],[11,"write_i48","","Writes a signed 48 bit integer `n` to `buf`, stored in i64.",0,[[["i64"]]]],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",0,[[["i64"]]]],[11,"write_i128","","Writes a signed 128 bit integer `n` to `buf`.",0,[[["i128"]]]],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,[[["i64"],["usize"]]]],[11,"write_int128","","Writes a signed integer `n` to `buf` using only `nbytes`.",0,[[["i128"],["usize"]]]],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point…",0,[[["f32"]]]],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point…",0,[[["f64"]]]],[10,"read_u16_into","","Reads unsigned 16 bit integers from `src` into `dst`.",0,[[]]],[10,"read_u32_into","","Reads unsigned 32 bit integers from `src` into `dst`.",0,[[]]],[10,"read_u64_into","","Reads unsigned 64 bit integers from `src` into `dst`.",0,[[]]],[10,"read_u128_into","","Reads unsigned 128 bit integers from `src` into `dst`.",0,[[]]],[11,"read_i16_into","","Reads signed 16 bit integers from `src` to `dst`.",0,[[]]],[11,"read_i32_into","","Reads signed 32 bit integers from `src` into `dst`.",0,[[]]],[11,"read_i64_into","","Reads signed 64 bit integers from `src` into `dst`.",0,[[]]],[11,"read_i128_into","","Reads signed 128 bit integers from `src` into `dst`.",0,[[]]],[11,"read_f32_into","","Reads IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"read_f32_into_unchecked","","DEPRECATED.",0,[[]]],[11,"read_f64_into","","Reads IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"read_f64_into_unchecked","","DEPRECATED.",0,[[]]],[10,"write_u16_into","","Writes unsigned 16 bit integers from `src` into `dst`.",0,[[]]],[10,"write_u32_into","","Writes unsigned 32 bit integers from `src` into `dst`.",0,[[]]],[10,"write_u64_into","","Writes unsigned 64 bit integers from `src` into `dst`.",0,[[]]],[10,"write_u128_into","","Writes unsigned 128 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i16_into","","Writes signed 16 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i32_into","","Writes signed 32 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i64_into","","Writes signed 64 bit integers from `src` into `dst`.",0,[[]]],[11,"write_i128_into","","Writes signed 128 bit integers from `src` into `dst`.",0,[[]]],[11,"write_f32_into","","Writes IEEE754 single-precision (4 bytes) floating point…",0,[[]]],[11,"write_f64_into","","Writes IEEE754 double-precision (8 bytes) floating point…",0,[[]]],[10,"from_slice_u16","","Converts the given slice of unsigned 16 bit integers to a…",0,[[]]],[10,"from_slice_u32","","Converts the given slice of unsigned 32 bit integers to a…",0,[[]]],[10,"from_slice_u64","","Converts the given slice of unsigned 64 bit integers to a…",0,[[]]],[10,"from_slice_u128","","Converts the given slice of unsigned 128 bit integers to a…",0,[[]]],[11,"from_slice_i16","","Converts the given slice of signed 16 bit integers to a…",0,[[]]],[11,"from_slice_i32","","Converts the given slice of signed 32 bit integers to a…",0,[[]]],[11,"from_slice_i64","","Converts the given slice of signed 64 bit integers to a…",0,[[]]],[11,"from_slice_i128","","Converts the given slice of signed 128 bit integers to a…",0,[[]]],[10,"from_slice_f32","","Converts the given slice of IEEE754 single-precision (4…",0,[[]]],[10,"from_slice_f64","","Converts the given slice of IEEE754 double-precision (8…",0,[[]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"read_u16","","",1,[[],["u16"]]],[11,"read_u32","","",1,[[],["u32"]]],[11,"read_u64","","",1,[[],["u64"]]],[11,"read_u128","","",1,[[],["u128"]]],[11,"read_uint","","",1,[[["usize"]],["u64"]]],[11,"read_uint128","","",1,[[["usize"]],["u128"]]],[11,"write_u16","","",1,[[["u16"]]]],[11,"write_u32","","",1,[[["u32"]]]],[11,"write_u64","","",1,[[["u64"]]]],[11,"write_u128","","",1,[[["u128"]]]],[11,"write_uint","","",1,[[["usize"],["u64"]]]],[11,"write_uint128","","",1,[[["usize"],["u128"]]]],[11,"read_u16_into","","",1,[[]]],[11,"read_u32_into","","",1,[[]]],[11,"read_u64_into","","",1,[[]]],[11,"read_u128_into","","",1,[[]]],[11,"write_u16_into","","",1,[[]]],[11,"write_u32_into","","",1,[[]]],[11,"write_u64_into","","",1,[[]]],[11,"write_u128_into","","",1,[[]]],[11,"from_slice_u16","","",1,[[]]],[11,"from_slice_u32","","",1,[[]]],[11,"from_slice_u64","","",1,[[]]],[11,"from_slice_u128","","",1,[[]]],[11,"from_slice_f32","","",1,[[]]],[11,"from_slice_f64","","",1,[[]]],[11,"read_u16","","",2,[[],["u16"]]],[11,"read_u32","","",2,[[],["u32"]]],[11,"read_u64","","",2,[[],["u64"]]],[11,"read_u128","","",2,[[],["u128"]]],[11,"read_uint","","",2,[[["usize"]],["u64"]]],[11,"read_uint128","","",2,[[["usize"]],["u128"]]],[11,"write_u16","","",2,[[["u16"]]]],[11,"write_u32","","",2,[[["u32"]]]],[11,"write_u64","","",2,[[["u64"]]]],[11,"write_u128","","",2,[[["u128"]]]],[11,"write_uint","","",2,[[["usize"],["u64"]]]],[11,"write_uint128","","",2,[[["usize"],["u128"]]]],[11,"read_u16_into","","",2,[[]]],[11,"read_u32_into","","",2,[[]]],[11,"read_u64_into","","",2,[[]]],[11,"read_u128_into","","",2,[[]]],[11,"write_u16_into","","",2,[[]]],[11,"write_u32_into","","",2,[[]]],[11,"write_u64_into","","",2,[[]]],[11,"write_u128_into","","",2,[[]]],[11,"from_slice_u16","","",2,[[]]],[11,"from_slice_u32","","",2,[[]]],[11,"from_slice_u64","","",2,[[]]],[11,"from_slice_u128","","",2,[[]]],[11,"from_slice_f32","","",2,[[]]],[11,"from_slice_f64","","",2,[[]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"eq","","",1,[[["self"],["bigendian"]],["bool"]]],[11,"eq","","",2,[[["littleendian"],["self"]],["bool"]]],[11,"cmp","","",1,[[["self"],["bigendian"]],["ordering"]]],[11,"cmp","","",2,[[["littleendian"],["self"]],["ordering"]]],[11,"partial_cmp","","",1,[[["self"],["bigendian"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["littleendian"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"clone","","",1,[[["self"]],["bigendian"]]],[11,"clone","","",2,[[["self"]],["littleendian"]]],[11,"default","","",1,[[],["bigendian"]]],[11,"default","","",2,[[],["littleendian"]]]],"p":[[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,"cfg_if","cfg_if","",null,null]],"p":[]};
searchIndex["kernel"] = {"doc":"This module probably looks rather sparse! Check the root…","i":[[3,"Common","kernel","This is a collection of stuff we need to access from…",null,null],[12,"object_map","","",0,null],[12,"backup_framebuffer","","If the bootloader switched to a graphics mode that enables…",0,null],[5,"kmain","","This is the entry point for the kernel on x86_64. It is…",null,[[]]],[5,"panic","","",null,[[["panicinfo"]]]],[0,"x86_64","","This module defines the kernel entry-point on x86_64.",null,null],[3,"Arch","kernel::x86_64","",null,null],[12,"cpu_info","","",1,null],[12,"acpi_info","","",1,null],[12,"aml_context","","",1,null],[12,"physical_memory_manager","","",1,null],[12,"kernel_stack_bitmap","","Each bit in this bitmap corresponds to a slot for an…",1,null],[12,"kernel_page_table","","",1,null],[5,"kmain","","This is the entry point for the kernel on x86_64. It is…",null,[[]]],[5,"create_framebuffer","","",null,[[["videoinfo"]]]],[5,"load_task","","",null,[[["arch"],["scheduler"],["imageinfo"]]]],[5,"check_support","","We rely on certain processor features to be present for…",null,[[["cpuinfo"]]]],[0,"acpi_handler","","",null,null],[3,"PebbleAcpiHandler","kernel::x86_64::acpi_handler","",null,null],[0,"address_space","kernel::x86_64","",null,null],[3,"AddressSpace","kernel::x86_64::address_space","",null,null],[12,"table","","",2,null],[12,"state","","",2,null],[12,"memory_objects","","",2,null],[12,"stack_bitmap","","Bitmap of allocated stacks in this address space. Each bit…",2,null],[12,"kernel_stack_area_base","","This is the area of the kernel address space that this…",2,null],[3,"StackSet","","A pair of stacks - one for the kernel and one for…",null,null],[12,"kernel_slot_top","","",3,null],[12,"kernel_slot_bottom","","",3,null],[12,"kernel_stack_bottom","","",3,null],[12,"user_slot_top","","",3,null],[12,"user_slot_bottom","","",3,null],[12,"user_stack_bottom","","",3,null],[4,"State","","",null,null],[13,"NotActive","","",4,null],[13,"Active","","",4,null],[11,"new","","",2,[[["arch"]],["addressspace"]]],[11,"map_memory_object","","",2,[[["self"],["arch"],["wrappedkernelobject",["arch"]]],[["result",["memoryobjectmappingerror"]],["memoryobjectmappingerror"]]]],[11,"switch_to","","",2,[[["self"]]]],[11,"switch_away_from","","Tell the address space that we are switching to another…",2,[[["self"]]]],[11,"add_stack_set","","",2,[[["self"],["usize"],["a"]],[["stackset"],["option",["stackset"]]]]],[0,"cpu","kernel::x86_64","",null,null],[3,"Cpu","kernel::x86_64::cpu","",null,null],[12,"processor_uid","","",5,null],[12,"local_apic_id","","",5,null],[12,"is_ap","","",5,null],[11,"from_acpi","","",5,[[["processor"]],["cpu"]]],[0,"interrupts","kernel::x86_64","",null,null],[3,"InterruptController","kernel::x86_64::interrupts","",null,null],[5,"local_apic_timer_handler","","",null,[[["interruptstackframe"]]]],[5,"spurious_handler","","",null,[[["interruptstackframe"]]]],[5,"syscall_handler","","",null,null],[0,"exception","","This module contains all the interrupt handlers used to…",null,null],[5,"nmi_handler","kernel::x86_64::interrupts::exception","",null,[[["interruptstackframe"]]]],[5,"breakpoint_handler","","",null,[[["interruptstackframe"]]]],[5,"invalid_opcode_handler","","",null,[[["interruptstackframe"]]]],[5,"general_protection_fault_handler","","",null,[[["interruptstackframe"],["u64"]]]],[5,"page_fault_handler","","",null,[[["interruptstackframe"],["u64"]]]],[5,"double_fault_handler","","",null,[[["interruptstackframe"],["u64"]]]],[0,"pci","kernel::x86_64::interrupts","",null,null],[3,"PciConfigHeader","kernel::x86_64::interrupts::pci","",null,null],[12,"vendor_id","","",6,null],[12,"device_id","","",6,null],[12,"command","","",6,null],[12,"status","","",6,null],[12,"revision_id","","",6,null],[12,"prog_if","","",6,null],[12,"subclass","","",6,null],[12,"class","","",6,null],[12,"cache_line_size","","",6,null],[12,"latency_timer","","",6,null],[12,"header_type","","",6,null],[12,"bist","","",6,null],[3,"PciInfo","","",null,null],[3,"PciResolver","","",null,null],[12,"pci_info","","",7,null],[12,"config_regions","","",7,null],[12,"routing_table","","",7,null],[11,"has_multiple_functions","","",6,[[["self"]],["bool"]]],[11,"resolve","","",7,[[["pciconfigregions"],["amlcontext"]],["pciinfo"]]],[11,"check_bus","","",7,[[["self"],["u8"]]]],[11,"check_device","","",7,[[["self"],["u8"]]]],[11,"check_function","","",7,[[["self"],["u8"]]]],[7,"IDT","kernel::x86_64::interrupts","This should only be accessed directly by the bootstrap…",null,null],[17,"LEGACY_PIC_VECTOR","","",null,null],[17,"FREE_VECTORS_START","","",null,null],[17,"APIC_TIMER_VECTOR","","",null,null],[17,"APIC_SPURIOUS_VECTOR","","",null,null],[11,"init","","",8,[[["arch"]],["interruptcontroller"]]],[11,"enable_local_timer","","Enable the per-CPU timer on the local APIC, so that it…",8,[[["self"],["arch"],["duration"]]]],[11,"install_exception_handlers","","",8,[[]]],[11,"install_syscall_handler","","",8,[[]]],[0,"logger","kernel::x86_64","",null,null],[3,"KernelLogger","kernel::x86_64::logger","This handles calls to the log macros throughout the…",null,null],[7,"COM1","","The COM1 serial port, accessed through the UART 16550…",null,null],[0,"memory","kernel::x86_64","This module contains the physical memory manager Pebble…",null,null],[3,"PhysicalMemoryManager","kernel::x86_64::memory","The main physical memory manager. It tracks all…",null,null],[12,"buddy_allocator","","A buddy allocator used to track all conventional memory.…",9,null],[3,"LockedPhysicalMemoryManager","","",null,null],[12,"0","","",10,null],[0,"buddy_allocator","","This module implements a buddy allocator, an efficient…",null,null],[3,"BuddyAllocator","kernel::x86_64::memory::buddy_allocator","",null,null],[12,"bins","","The bins of free blocks, where bin `i` contains blocks of…",11,null],[11,"new","","Create a new `BuddyAllocator`, with a maximum block size…",11,[[["usize"]],["buddyallocator"]]],[11,"add_range","","Add a range of `Frame`s to this allocator, marking them…",11,[[["self"],["range",["frame"]],["frame"]]]],[11,"allocate_n","","Allocate (at least) `n` contiguous frames from this…",11,[[["self"],["usize"]],[["option",["frame"]],["frame"]]]],[11,"free_n","","Free the given block (starting at `start` and of size `n`…",11,[[["self"],["usize"],["frame"]]]],[11,"allocate_block","","Tries to allocate a block of the given order. If no blocks…",11,[[["self"],["usize"]],[["option",["frame"]],["frame"]]]],[11,"buddy_of","","Finds the starting frame of the block that is the buddy of…",11,[[["usize"],["frame"]],["frame"]]],[11,"max_order","","Get the order of the largest block this allocator can track.",11,[[["self"]],["usize"]]],[0,"userspace_map","kernel::x86_64::memory","",null,null],[17,"KERNEL_SPACE_START","kernel::x86_64::memory::userspace_map","",null,null],[17,"KERNEL_SPACE_END","","",null,null],[17,"INITIAL_STACK_SIZE","","The initial size of a task's user and kernel stacks. Must…",null,null],[17,"MAX_STACK_SIZE","","The maximum size of each task's usermode stack. This is…",null,null],[17,"MEMORY_OBJECTS_START","","",null,null],[17,"RECEIVE_BUFFERS_START","","",null,null],[17,"SEND_BUFFERS_START","","",null,null],[17,"USER_STACKS_START","","",null,null],[17,"HEAP_START","","",null,null],[17,"IMAGE_START","","",null,null],[17,"BUDDY_ALLOCATOR_MAX_ORDER","kernel::x86_64::memory","",null,null],[11,"new","","",10,[[["bootinfo"]],["lockedphysicalmemorymanager"]]],[0,"memory_object","kernel::x86_64","",null,null],[3,"MemoryObject","kernel::x86_64::memory_object","",null,null],[12,"virtual_address","","",12,null],[12,"physical_address","","",12,null],[12,"num_pages","","Number of 4KiB pages this memory object covers.",12,null],[12,"flags","","",12,null],[11,"new","","",12,[[["entryflags"],["usize"],["virtualaddress"],["physicaladdress"]],["memoryobject"]]],[11,"from_boot_info","","",12,[[["memoryobjectinfo"]],["memoryobject"]]],[0,"per_cpu","kernel::x86_64","",null,null],[3,"PerCpu","kernel::x86_64::per_cpu","",null,null],[12,"_self_pointer","","The first field of this structure must be a pointer to…",13,null],[12,"_pin","","This structure must be pinned in memory for two reasons: -…",13,null],[12,"current_task_kernel_rsp","","This holds the kernel `rsp` of the current task, and makes…",13,null],[12,"common","","",13,null],[12,"tss","","",13,null],[12,"tss_selector","","",13,null],[3,"GuardedPerCpu","","This guards a `PerCpu` instance, preventing it from being…",null,null],[12,"0","","",14,null],[5,"common_per_cpu_data","","Access the common per-CPU data. This is exported from the…",null,[[],["commonpercpu"]]],[5,"common_per_cpu_data_mut","","Get a mutable reference to the common per-CPU data.…",null,[[],["commonpercpu"]]],[5,"per_cpu_data","","Access the per-CPU data. Unsafe because this must not be…",null,[[],[["pin",["percpu"]],["percpu"]]]],[5,"per_cpu_data_mut","","Get a mutable reference to the per-cpu data. This is…",null,[[],[["percpu"],["pin",["percpu"]]]]],[11,"tss","","",13,[[["pin"],["self"]],[["tss"],["pin",["tss"]]]]],[11,"tss_mut","","",13,[[["pin"],["self"]],[["pin",["tss"]],["tss"]]]],[11,"current_task_kernel_rsp","","",13,[[["pin"],["self"]],["virtualaddress"]]],[11,"current_task_kernel_rsp_mut","","",13,[[["pin"],["self"]],[["pin",["virtualaddress"]],["virtualaddress"]]]],[11,"common","","",13,[[["pin"],["self"]],["commonpercpu"]]],[11,"common_mut","","",13,[[["pin"],["self"]],["commonpercpu"]]],[11,"new","","Create a new `GuardedPerCpu`, but does not install the…",14,[[]]],[11,"install","","",14,[[["self"]]]],[0,"task","kernel::x86_64","",null,null],[3,"ContextSwitchFrame","kernel::x86_64::task","This is the layout of the stack that we expect to be…",null,null],[12,"r15","","",15,null],[12,"r14","","",15,null],[12,"r13","","",15,null],[12,"r12","","",15,null],[12,"rbp","","",15,null],[12,"rbx","","",15,null],[12,"return_address","","When we construct an initial stack frame, we set this to…",15,null],[3,"Task","","This is the representation of a task on x86_64. It's…",null,null],[12,"name","","",16,null],[12,"address_space","","",16,null],[12,"state","","",16,null],[12,"capabilities","","",16,null],[12,"user_stack_top","","",16,null],[12,"kernel_stack_top","","",16,null],[12,"stack_size","","",16,null],[12,"kernel_stack_pointer","","",16,null],[4,"TaskCreationError","","",null,null],[13,"NotAnAddressSpace","","The kernel object that should be the AddressSpace that…",17,null],[13,"NotEnoughStackSlots","","The AddressSpace has run out of stack slots",17,null],[13,"InvalidCapabilityEncoding","","The task image has an invalid capability encoding",17,null],[13,"InitialNameTooLong","","Initial tasks (from images loaded by the bootloader) can…",17,null],[13,"InvalidName","","The task's name is not valid UTF-8.",17,null],[5,"context_switch","","Perform a context-switch between the currently running…",null,[[["arch"],["wrappedkernelobject",["arch"]],["taskstate"]]]],[5,"drop_to_usermode","","Drop into usermode into the given task. This permanently…",null,[[["arch"],["wrappedkernelobject",["arch"]]]]],[5,"decode_capabilities","","Decode a capability stream (as found in a task's image)…",null,[[],[["result",["vec","taskcreationerror"]],["vec",["capability"]],["taskcreationerror"]]]],[5,"task_entry_trampoline","","",null,null],[5,"do_context_switch","","Do the actual context switch: save the context of the old…",null,null],[11,"from_image_info","","Create a new task in a given address space, which will…",16,[[["imageinfo"],["arch"],["arch"],["wrappedkernelobject",["arch"]]],[["task"],["result",["task","taskcreationerror"]],["taskcreationerror"]]]],[11,"initialize_kernel_stack","","Before a task can be started, either by it being scheduled…",16,[[["virtualaddress"],["self"]]]],[7,"GDT","kernel::x86_64","",null,null],[7,"ARCH","","",null,null],[0,"arch","kernel","",null,null],[8,"Architecture","kernel::arch","Trait that is implemented by a type in each architecture…",null,null],[16,"AddressSpace","","",18,null],[16,"Task","","",18,null],[16,"MemoryObject","","",18,null],[16,"Mailbox","","",18,null],[10,"drop_to_userspace","","Performs the initial kernel -> userspace transistion.…",18,[[["wrappedkernelobject"],["self"]]]],[0,"heap_allocator","kernel","",null,null],[3,"HoleAllocator","kernel::heap_allocator","",null,null],[12,"heap_bottom","","",19,null],[12,"heap_size","","",19,null],[12,"holes","","",19,null],[3,"LockedHoleAllocator","","",null,null],[12,"0","","",20,null],[3,"HoleInfo","","",null,null],[12,"addr","","",21,null],[12,"size","","",21,null],[3,"Hole","","",null,null],[12,"size","","",22,null],[12,"next","","",22,null],[3,"HoleList","","",null,null],[12,"first","","",23,null],[3,"Allocation","","",null,null],[12,"info","","",24,null],[12,"front_padding","","",24,null],[12,"back_padding","","",24,null],[5,"split_hole","","Split the given hole into…",null,[[["holeinfo"],["layout"]],[["allocation"],["option",["allocation"]]]]],[5,"allocate_first_fit","","",null,[[["layout"],["hole"]],[["allocation"],["allocerr"],["result",["allocation","allocerr"]]]]],[5,"free","","Walk the list, starting at `hole` and free the allocation…",null,[[["virtualaddress"],["hole"],["usize"]]]],[5,"handle_alloc_error","","",null,[[["layout"]]]],[11,"new_uninitialized","","Create a new, uninitialized `HoleAllocator`. Before heap…",19,[[],["holeallocator"]]],[11,"init","","Initialise the `HoleAllocator`. This should only be called…",19,[[["virtualaddress"],["self"]]]],[11,"new_uninitialized","","",20,[[],["lockedholeallocator"]]],[11,"info","","",22,[[["self"]],["holeinfo"]]],[11,"new","","Create a new `HoleList` that contains the given hole.…",23,[[["virtualaddress"],["usize"]],["holelist"]]],[11,"allocate_first_fit","","Search for a big enough hole for the given `Layout` with…",23,[[["self"],["layout"]],[["result",["allocerr"]],["allocerr"]]]],[11,"free","","Free an allocation defined by `ptr` and `layout`. Unsafe…",23,[[["self"],["layout"]]]],[11,"get_min_size","","",23,[[],["usize"]]],[0,"mailbox","kernel","",null,null],[3,"Mailbox","kernel::mailbox","A `Mailbox` is a kernel object that allows the kernel to…",null,null],[12,"queue","","",25,null],[11,"new","","",25,[[],["mailbox"]]],[11,"add","","",25,[[["self"],["mail"]]]],[11,"get_next","","",25,[[["self"]],[["option",["mail"]],["mail"]]]],[0,"object","kernel","",null,null],[3,"WrappedKernelObject","kernel::object","",null,null],[12,"id","","",26,null],[12,"object","","",26,null],[4,"KernelObject","","",null,null],[13,"AddressSpace","","",27,null],[13,"MemoryObject","","",27,null],[13,"Task","","",27,null],[13,"Mailbox","","",27,null],[0,"common","","This module contains types that can be re-used between…",null,null],[4,"TaskBlock","kernel::object::common","",null,null],[13,"WaitForMail","","Block the task until the mailbox with the given ID…",28,null],[4,"TaskState","","",null,null],[13,"Ready","","",29,null],[13,"Running","","",29,null],[13,"Blocked","","",29,null],[8,"CommonTask","","Implemented by each of the structures that provide the…",null,null],[10,"state","","",30,[[["self"]],["taskstate"]]],[10,"name","","",30,[[["self"]],["str"]]],[0,"map","kernel::object","",null,null],[3,"ObjectMap","kernel::object::map","Stores all the `KernelObject`s against their generational…",null,null],[12,"entries","","",31,null],[12,"free_list_head","","",31,null],[4,"Entry","","",null,null],[13,"Free","","",32,null],[12,"next_generation","kernel::object::map::Entry","",32,null],[12,"next_free","","",32,null],[13,"Occupied","kernel::object::map","",32,null],[12,"generation","kernel::object::map::Entry","",32,null],[12,"object","","",32,null],[17,"INITIAL_OBJECT_CAPACITY","kernel::object::map","",null,null],[11,"new","","",31,[[["usize"]],["objectmap"]]],[11,"insert","","Insert a new object into the map, assigning it a…",31,[[["self"],["kernelobject"],["arc",["kernelobject"]]],["kernelobjectid"]]],[11,"insert_into","","",31,[[["usize"],["arc",["kernelobject"]],["self"],["kernelobject"]],["kernelobjectid"]]],[11,"reserve","","",31,[[["self"],["usize"]]]],[11,"get","","",31,[[["self"],["kernelobjectid"]],[["option",["wrappedkernelobject"]],["wrappedkernelobject"]]]],[11,"remove","","",31,[[["self"],["kernelobjectid"]],[["arc",["kernelobject"]],["option",["arc"]]]]],[11,"contains","","",31,[[["self"],["kernelobjectid"]],["bool"]]],[11,"len","","",31,[[["self"]],["usize"]]],[11,"add_to_map","kernel::object","",27,[[["objectmap"]],["wrappedkernelobject"]]],[11,"address_space","","",27,[[["self"]],[["option",["rwlock"]],["rwlock"]]]],[11,"memory_object","","",27,[[["self"]],[["rwlock"],["option",["rwlock"]]]]],[11,"task","","",27,[[["self"]],[["option",["rwlock"]],["rwlock"]]]],[11,"mailbox","","",27,[[["self"]],[["option",["rwlock"]],["rwlock"]]]],[0,"per_cpu","kernel","",null,null],[3,"CommonPerCpu","kernel::per_cpu","Per-cpu data that needs to be accessed from the…",null,null],[12,"scheduler","","",33,null],[11,"new","","",33,[[],["commonpercpu"]]],[11,"running_task","","Helper method to get the currently running task. Panics if…",33,[[["self"]],["wrappedkernelobject"]]],[0,"scheduler","kernel","",null,null],[3,"Scheduler","kernel::scheduler","",null,null],[12,"running_task","","",34,null],[12,"ready_queue","","List of Tasks ready to be scheduled. Every kernel object…",34,null],[12,"blocked","","",34,null],[4,"ScheduleError","","",null,null],[13,"KernelObjectNotATask","","Returned by `add_task` if you try to schedule a kernel…",35,null],[11,"new","","",34,[[],["scheduler"]]],[11,"add_task","","",34,[[["self"],["wrappedkernelobject",["arch"]],["arch"]],[["result",["scheduleerror"]],["scheduleerror"]]]],[11,"drop_to_userspace","","Performs the first transistion from the kernel into…",34,[[["self"],["arch"]]]],[11,"switch_to_next","","Switch to the next scheduled task. This is called when a…",34,[[["self"],["taskstate"]]]],[0,"syscall","kernel","",null,null],[5,"rust_syscall_handler","kernel::syscall","This is the architecture-independent syscall handler. It…",null,[[["usize"]],["usize"]]],[5,"yield_syscall","","",null,[[],["usize"]]],[5,"early_log","","",null,[[["usize"]],["usize"]]],[5,"request_system_object","","",null,[[["usize"]],["usize"]]],[5,"my_address_space","","",null,[[],["usize"]]],[5,"map_memory_object","","",null,[[["usize"]],[["result",["memoryobjectmappingerror"]],["memoryobjectmappingerror"]]]],[5,"create_mailbox","","",null,[[],[["mailboxerror"],["kernelobjectid"],["result",["kernelobjectid","mailboxerror"]]]]],[5,"wait_for_mail","","",null,[[["usize"]],[["mailboxerror"],["result",["mailboxerror"]]]]],[7,"ALLOCATOR","kernel","",null,null],[7,"COMMON","","We need to make various bits of data accessible on a…",null,null],[11,"new","","",0,[[],["common"]]],[14,"set_handler","","",null,null],[14,"set_handler_with_error_code","","",null,null],[14,"save_regs","","Macro to save the scratch registers. In System-V, `rbx`,…",null,null],[14,"restore_regs","","Restore the saved scratch registers.",null,null],[14,"wrap_handler","","",null,null],[14,"wrap_handler_with_error_code","","",null,null],[14,"kernel_object_table","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::acpi_handler","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::address_space","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::cpu","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::interrupts","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::interrupts::pci","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"into","","",37,[[],["u"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::logger","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::memory","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::memory::buddy_allocator","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::memory_object","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::per_cpu","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","kernel::x86_64::task","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","kernel::heap_allocator","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"from","kernel::mailbox","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","kernel::object","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","kernel::object::common","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"from","kernel::object::map","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"into","","",32,[[],["u"]]],[11,"try_into","","",32,[[],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"type_id","","",32,[[["self"]],["typeid"]]],[11,"from","kernel::per_cpu","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","kernel::scheduler","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"drop_to_userspace","kernel::x86_64","",1,[[["arch"],["self"],["wrappedkernelobject",["arch"]]]]],[11,"state","kernel::x86_64::task","",16,[[["self"]],["taskstate"]]],[11,"name","","",16,[[["self"]],["str"]]],[11,"deref","kernel::heap_allocator","",20,[[["self"]],["mutex"]]],[11,"fmt","kernel::x86_64::address_space","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::x86_64::interrupts::pci","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::x86_64::per_cpu","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::x86_64::task","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::heap_allocator","",21,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::object::common","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::object","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::per_cpu","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","kernel::scheduler","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",34,[[["formatter"],["self"]],["result"]]],[11,"eq","kernel::x86_64::address_space","",4,[[["self"],["state"]],["bool"]]],[11,"eq","kernel::object::common","",28,[[["self"],["taskblock"]],["bool"]]],[11,"ne","","",28,[[["self"],["taskblock"]],["bool"]]],[11,"eq","","",29,[[["self"],["taskstate"]],["bool"]]],[11,"ne","","",29,[[["self"],["taskstate"]],["bool"]]],[11,"assert_receiver_is_total_eq","kernel::x86_64::address_space","",4,[[["self"]]]],[11,"assert_receiver_is_total_eq","kernel::object::common","",28,[[["self"]]]],[11,"assert_receiver_is_total_eq","","",29,[[["self"]]]],[11,"drop","kernel::x86_64::per_cpu","",14,[[["self"]]]],[11,"drop","kernel::x86_64","",1,[[["self"]]]],[11,"clone","kernel::x86_64::interrupts::pci","",6,[[["self"]],["pciconfigheader"]]],[11,"clone","kernel::heap_allocator","",21,[[["self"]],["holeinfo"]]],[11,"clone","","",24,[[["self"]],["allocation"]]],[11,"clone","kernel::object::common","",28,[[["self"]],["taskblock"]]],[11,"clone","","",29,[[["self"]],["taskstate"]]],[11,"clone","kernel::object","",26,[[["self"]],["self"]]],[11,"default","kernel::x86_64::task","",15,[[],["contextswitchframe"]]],[11,"alloc","kernel::heap_allocator","",20,[[["layout"],["self"]]]],[11,"dealloc","","",20,[[["self"],["layout"]]]],[11,"allocate_n","kernel::x86_64::memory","",10,[[["self"],["usize"]],[["range",["frame"]],["frame"]]]],[11,"free_n","","",10,[[["usize"],["self"],["frame"]]]],[11,"enabled","kernel::x86_64::logger","",38,[[["self"],["metadata"]],["bool"]]],[11,"log","","",38,[[["record"],["self"]]]],[11,"flush","","",38,[[["self"]]]],[11,"map_physical_region","kernel::x86_64::acpi_handler","",36,[[["self"],["usize"]],["acpiphysicalmapping"]]],[11,"unmap_physical_region","","",36,[[["self"],["acpiphysicalmapping"]]]]],"p":[[3,"Common"],[3,"Arch"],[3,"AddressSpace"],[3,"StackSet"],[4,"State"],[3,"Cpu"],[3,"PciConfigHeader"],[3,"PciResolver"],[3,"InterruptController"],[3,"PhysicalMemoryManager"],[3,"LockedPhysicalMemoryManager"],[3,"BuddyAllocator"],[3,"MemoryObject"],[3,"PerCpu"],[3,"GuardedPerCpu"],[3,"ContextSwitchFrame"],[3,"Task"],[4,"TaskCreationError"],[8,"Architecture"],[3,"HoleAllocator"],[3,"LockedHoleAllocator"],[3,"HoleInfo"],[3,"Hole"],[3,"HoleList"],[3,"Allocation"],[3,"Mailbox"],[3,"WrappedKernelObject"],[4,"KernelObject"],[4,"TaskBlock"],[4,"TaskState"],[8,"CommonTask"],[3,"ObjectMap"],[4,"Entry"],[3,"CommonPerCpu"],[3,"Scheduler"],[4,"ScheduleError"],[3,"PebbleAcpiHandler"],[3,"PciInfo"],[3,"KernelLogger"]]};
searchIndex["libpebble"] = {"doc":"","i":[[0,"caps","libpebble","",null,null],[4,"Capability","libpebble::caps","",null,null],[13,"CreateAddressSpace","","",0,null],[13,"CreateMemoryObject","","",0,null],[13,"CreateTask","","",0,null],[13,"X86_64AccessIoPort","","",0,null],[13,"AccessBackupFramebuffer","","",0,null],[13,"EarlyLogging","","",0,null],[0,"object","libpebble","",null,null],[3,"KernelObjectId","libpebble::object","",null,null],[12,"index","","",1,null],[12,"generation","","",1,null],[6,"Index","","",null,null],[6,"Generation","","",null,null],[11,"from_syscall_repr","","Used to convert between the form the kernel represents…",1,[[["usize"]],["kernelobjectid"]]],[11,"to_syscall_repr","","Convert this `KernelObjectId` to the form used in the…",1,[[],["usize"]]],[0,"syscall","libpebble","",null,null],[4,"MemoryObjectMappingError","libpebble::syscall","",null,null],[13,"AddressRangeNotFree","","",2,null],[13,"AccessDeniedToMemoryObject","","",2,null],[13,"AccessDeniedToAddressSpace","","",2,null],[13,"NotAMemoryObject","","",2,null],[13,"NotAnAddressSpace","","",2,null],[5,"yield_to_kernel","","",null,[[]]],[5,"early_log","","",null,[[["str"]],["result"]]],[5,"my_address_space","","",null,[[],["kernelobjectid"]]],[5,"map_memory_object","","",null,[[["kernelobjectid"]],[["memoryobjectmappingerror"],["result",["memoryobjectmappingerror"]]]]],[0,"mailbox","","",null,null],[3,"InterruptMailRepr","libpebble::syscall::mailbox","",null,null],[3,"MailRepr","","",null,null],[12,"mail_type","","",3,null],[12,"payload","","",3,null],[19,"MailPayload","","",null,null],[4,"Mail","","",null,null],[13,"Interrupt","","",4,null],[4,"MailboxError","","",null,null],[13,"NotAMailbox","","",5,null],[13,"InvalidMailType","","",5,null],[5,"create_mailbox","","",null,[[],[["kernelobjectid"],["mailboxerror"],["result",["kernelobjectid","mailboxerror"]]]]],[5,"wait_for_mail","","",null,[[["kernelobjectid"]],[["mail"],["result",["mail","mailboxerror"]],["mailboxerror"]]]],[6,"MailType","","",null,null],[17,"MAIL_TYPE_INTERRUPT","","",null,null],[11,"to_syscall_repr","","",4,[[["self"]],["mailrepr"]]],[0,"result","libpebble::syscall","",null,null],[5,"status_from_syscall_repr","libpebble::syscall::result","",null,[[["usize"]],["result"]]],[5,"status_to_syscall_repr","","",null,[[["result"]],["usize"]]],[5,"result_from_syscall_repr","","",null,[[["usize"]],[["result",["kernelobjectid"]],["kernelobjectid"]]]],[5,"result_to_syscall_repr","","",null,[[["result",["kernelobjectid"]],["kernelobjectid"]],["usize"]]],[0,"system_object","libpebble::syscall","",null,null],[3,"FramebufferSystemObjectInfo","libpebble::syscall::system_object","This is a type representing the information that the…",null,null],[12,"address","","",6,null],[12,"width","","",6,null],[12,"height","","",6,null],[12,"stride","","",6,null],[12,"pixel_format","","The representation of pixels in the supplied framebuffer.…",6,null],[4,"SystemObjectId","","",null,null],[13,"BackupFramebuffer","","",7,null],[12,"info_address","libpebble::syscall::system_object::SystemObjectId","",7,null],[4,"RequestSystemObjectError","libpebble::syscall::system_object","",null,null],[13,"ObjectDoesNotExist","","The requested object ID does point to a valid system…",8,null],[13,"NotAValidId","","The requested object ID does not correspond to a valid…",8,null],[13,"AccessDenied","","The requested object ID is valid, but the requesting task…",8,null],[5,"request_system_object","","",null,[[["systemobjectid"]],[["kernelobjectid"],["result",["kernelobjectid","requestsystemobjecterror"]],["requestsystemobjecterror"]]]],[17,"SYSTEM_OBJECT_BACKUP_FRAMEBUFFER_ID","","",null,null],[0,"raw_x86_64","libpebble::syscall","",null,null],[5,"syscall0","libpebble::syscall::raw_x86_64","",null,[[["usize"]],["usize"]]],[5,"syscall1","","",null,[[["usize"]],["usize"]]],[5,"syscall2","","",null,[[["usize"]],["usize"]]],[5,"syscall3","","",null,[[["usize"]],["usize"]]],[5,"syscall4","","",null,[[["usize"]],["usize"]]],[5,"syscall5","","",null,[[["usize"]],["usize"]]],[17,"SYSCALL_YIELD","libpebble::syscall","",null,null],[17,"SYSCALL_EARLY_LOG","","",null,null],[17,"SYSCALL_REQUEST_SYSTEM_OBJECT","","",null,null],[17,"SYSCALL_MY_ADDRESS_SPACE","","",null,null],[17,"SYSCALL_MAP_MEMORY_OBJECT","","",null,null],[17,"SYSCALL_CREATE_MAILBOX","","",null,null],[17,"SYSCALL_WAIT_FOR_MAIL","","",null,null],[14,"define_error_type","libpebble","",null,null],[11,"from","libpebble::caps","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","libpebble::object","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","libpebble::syscall","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","libpebble::syscall::mailbox","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","libpebble::syscall::system_object","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"fmt","libpebble::caps","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","libpebble::object","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","libpebble::syscall::mailbox","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","libpebble::syscall::system_object","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","libpebble::syscall","",2,[[["formatter"],["self"]],["result"]]],[11,"eq","libpebble::caps","",0,[[["self"],["capability"]],["bool"]]],[11,"ne","","",0,[[["self"],["capability"]],["bool"]]],[11,"eq","libpebble::object","",1,[[["kernelobjectid"],["self"]],["bool"]]],[11,"ne","","",1,[[["kernelobjectid"],["self"]],["bool"]]],[11,"try_from","libpebble::syscall::mailbox","",5,[[["usize"]],["result"]]],[11,"try_from","libpebble::syscall::system_object","",8,[[["usize"]],["result"]]],[11,"try_from","libpebble::syscall","",2,[[["usize"]],["result"]]],[11,"into","libpebble::syscall::mailbox","",5,[[],["usize"]]],[11,"into","libpebble::syscall::system_object","",8,[[],["usize"]]],[11,"into","libpebble::syscall","",2,[[],["usize"]]],[11,"clone","libpebble::caps","",0,[[["self"]],["capability"]]],[11,"clone","libpebble::object","",1,[[["self"]],["kernelobjectid"]]],[11,"clone","libpebble::syscall::mailbox","",9,[[["self"]],["interruptmailrepr"]]],[11,"clone","","",4,[[["self"]],["mail"]]],[11,"clone","","",5,[[["self"]],["mailboxerror"]]],[11,"clone","libpebble::syscall::system_object","",7,[[["self"]],["systemobjectid"]]],[11,"clone","","",8,[[["self"]],["requestsystemobjecterror"]]],[11,"clone","","",6,[[["self"]],["framebuffersystemobjectinfo"]]],[11,"clone","libpebble::syscall","",2,[[["self"]],["memoryobjectmappingerror"]]]],"p":[[4,"Capability"],[3,"KernelObjectId"],[4,"MemoryObjectMappingError"],[3,"MailRepr"],[4,"Mail"],[4,"MailboxError"],[3,"FramebufferSystemObjectInfo"],[4,"SystemObjectId"],[4,"RequestSystemObjectError"],[3,"InterruptMailRepr"],[19,"MailPayload"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","i":[[3,"Record","log","The \"payload\" of a log message.",null,null],[3,"RecordBuilder","","Builder for `Record`.",null,null],[3,"Metadata","","Metadata about a log message.",null,null],[3,"MetadataBuilder","","Builder for `Metadata`.",null,null],[3,"SetLoggerError","","The type returned by [`set_logger`] if [`set_logger`] has…",null,null],[3,"ParseLevelError","","The type returned by [`from_str`] when the string doesn't…",null,null],[4,"Level","","An enum representing the available verbosity levels of the…",null,null],[13,"Error","","The \"error\" level.",0,null],[13,"Warn","","The \"warn\" level.",0,null],[13,"Info","","The \"info\" level.",0,null],[13,"Debug","","The \"debug\" level.",0,null],[13,"Trace","","The \"trace\" level.",0,null],[4,"LevelFilter","","An enum representing the available verbosity level filters…",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"set_max_level","","Sets the global maximum log level.",null,[[["levelfilter"]]]],[5,"max_level","","Returns the current maximum log level.",null,[[],["levelfilter"]]],[5,"set_logger","","Sets the global logger to a `&'static Log`.",null,[[["log"]],[["setloggererror"],["result",["setloggererror"]]]]],[5,"logger","","Returns a reference to the logger.",null,[[],["log"]]],[17,"STATIC_MAX_LEVEL","","The statically resolved maximum log level.",null,null],[8,"Log","","A trait encapsulating the operations required of a logger.",null,null],[10,"enabled","","Determines if a log message with the specified metadata…",2,[[["self"],["metadata"]],["bool"]]],[10,"log","","Logs the `Record`.",2,[[["self"],["record"]]]],[10,"flush","","Flushes any buffered records.",2,[[["self"]]]],[11,"max","","Returns the most verbose logging level.",0,[[],["level"]]],[11,"to_level_filter","","Converts the `Level` to the equivalent `LevelFilter`.",0,[[["self"]],["levelfilter"]]],[11,"max","","Returns the most verbose logging level filter.",1,[[],["levelfilter"]]],[11,"to_level","","Converts `self` to the equivalent `Level`.",1,[[["self"]],[["option",["level"]],["level"]]]],[11,"builder","","Returns a new builder.",3,[[],["recordbuilder"]]],[11,"args","","The message body.",3,[[["self"]],["arguments"]]],[11,"metadata","","Metadata about the log directive.",3,[[["self"]],["metadata"]]],[11,"level","","The verbosity level of the message.",3,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",3,[[["self"]],["str"]]],[11,"module_path","","The module path of the message.",3,[[["self"]],[["str"],["option",["str"]]]]],[11,"file","","The source file containing the message.",3,[[["self"]],[["str"],["option",["str"]]]]],[11,"line","","The line containing the message.",3,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"new","","Construct new `RecordBuilder`.",4,[[],["recordbuilder"]]],[11,"args","","Set `args`.",4,[[["self"],["arguments"]],["recordbuilder"]]],[11,"metadata","","Set `metadata`. Construct a `Metadata` object with…",4,[[["self"],["metadata"]],["recordbuilder"]]],[11,"level","","Set `Metadata::level`.",4,[[["self"],["level"]],["recordbuilder"]]],[11,"target","","Set `Metadata::target`",4,[[["self"],["str"]],["recordbuilder"]]],[11,"module_path","","Set `module_path`",4,[[["self"],["str"],["option",["str"]]],["recordbuilder"]]],[11,"file","","Set `file`",4,[[["self"],["str"],["option",["str"]]],["recordbuilder"]]],[11,"line","","Set `line`",4,[[["self"],["u32"],["option",["u32"]]],["recordbuilder"]]],[11,"build","","Invoke the builder and return a `Record`",4,[[["self"]],["record"]]],[11,"builder","","Returns a new builder.",5,[[],["metadatabuilder"]]],[11,"level","","The verbosity level of the message.",5,[[["self"]],["level"]]],[11,"target","","The name of the target of the directive.",5,[[["self"]],["str"]]],[11,"new","","Construct a new `MetadataBuilder`.",6,[[],["metadatabuilder"]]],[11,"level","","Setter for `level`.",6,[[["self"],["level"]],["metadatabuilder"]]],[11,"target","","Setter for `target`.",6,[[["self"],["str"]],["metadatabuilder"]]],[11,"build","","Returns a `Metadata` object.",6,[[["self"]],["metadata"]]],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in…",null,null],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"eq","","",0,[[["self"],["level"]],["bool"]]],[11,"eq","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"eq","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["level"]],["bool"]]],[11,"eq","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ne","","",5,[[["self"],["metadata"]],["bool"]]],[11,"eq","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ne","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"eq","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"ne","","",8,[[["self"],["parselevelerror"]],["bool"]]],[11,"cmp","","",0,[[["self"],["level"]],["ordering"]]],[11,"cmp","","",1,[[["levelfilter"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["self"],["metadata"]],["ordering"]]],[11,"cmp","","",6,[[["self"],["metadatabuilder"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"],["level"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["self"],["level"]],["bool"]]],[11,"le","","",0,[[["self"],["level"]],["bool"]]],[11,"gt","","",0,[[["self"],["level"]],["bool"]]],[11,"ge","","",0,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",0,[[["levelfilter"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"le","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"gt","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"ge","","",0,[[["levelfilter"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["levelfilter"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"le","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"gt","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"ge","","",1,[[["levelfilter"],["self"]],["bool"]]],[11,"partial_cmp","","",1,[[["self"],["level"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",1,[[["self"],["level"]],["bool"]]],[11,"le","","",1,[[["self"],["level"]],["bool"]]],[11,"gt","","",1,[[["self"],["level"]],["bool"]]],[11,"ge","","",1,[[["self"],["level"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"],["metadata"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"le","","",5,[[["self"],["metadata"]],["bool"]]],[11,"gt","","",5,[[["self"],["metadata"]],["bool"]]],[11,"ge","","",5,[[["self"],["metadata"]],["bool"]]],[11,"partial_cmp","","",6,[[["self"],["metadatabuilder"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"le","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"gt","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"ge","","",6,[[["self"],["metadatabuilder"]],["bool"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","","",6,[[["self"],["__h"]]]],[11,"from_str","","",0,[[["str"]],[["level"],["result",["level"]]]]],[11,"from_str","","",1,[[["str"]],[["result",["levelfilter"]],["levelfilter"]]]],[11,"clone","","",0,[[["self"]],["level"]]],[11,"clone","","",1,[[["self"]],["levelfilter"]]],[11,"clone","","",3,[[["self"]],["record"]]],[11,"clone","","",5,[[["self"]],["metadata"]]]],"p":[[4,"Level"],[4,"LevelFilter"],[8,"Log"],[3,"Record"],[3,"RecordBuilder"],[3,"Metadata"],[3,"MetadataBuilder"],[3,"SetLoggerError"],[3,"ParseLevelError"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","i":[[3,"Complex","num","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[["self"]]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[["self"]]]],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[["a"]],["rangestepinclusive"]]],[8,"Num","","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",4,[[["self"]],["bool"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",5,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["t"]]],[5,"zero","","Returns the additive identity, `0`.",null,[[],["t"]]],[5,"abs","","Computes the absolute value.",null,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",null,[[["t"]],["t"]]],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",7,[[],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",7,[[],["self"]]],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",9,[[["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",11,[[["self"]],["option"]]],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[["u32"]],["self"]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],[["option",["i32"]],["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],[["option",["i128"]],["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],[["f64"],["option",["f64"]]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",15,[[["t"]],["option"]]],[0,"cast","","",null,null],[8,"ToPrimitive","num::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],[["option",["i32"]],["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],[["option",["i128"]],["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],[["f64"],["option",["f64"]]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",null,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[],["t"]]],[5,"cast","num","Cast from one machine scalar to another.",null,[[["t"]],["option"]]],[0,"pow","","",null,null],[8,"Pow","num::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"pow","","Returns `self` to the power `rhs`.",17,[[["rhs"]]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["t"],["usize"]],["option"]]],[5,"pow","num","Raises a value to the power of exp, using exponentiation…",null,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["t"],["usize"]],["option"]]],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["t"]],["t"]]],[0,"complex","","",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[3,"ParseComplexError","","",null,null],[0,"integer","num","",null,null],[8,"Integer","num::integer","",null,null],[10,"div_floor","","Floored integer division.",1,[[["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[["self"]]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[["self"]]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["t"]]]],[5,"div_floor","","Floored integer division",null,[[["t"]],["t"]]],[5,"mod_floor","","Floored integer modulus",null,[[["t"]],["t"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["t"]]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["t"]],["t"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["t"]],["t"]]],[3,"IterBinomial","","An iterator over binomial coefficients.",null,null],[5,"binomial","","Calculate the binomial coefficient.",null,[[["t"]],["t"]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],["t"]]],[8,"Roots","","Provides methods to compute an integer's square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",18,[[["u32"],["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",18,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",18,[[["self"]],["self"]]],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["t"]],["t"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["t"]],["t"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["u32"],["t"]],["t"]]],[0,"iter","num","",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[["a"]],["range"]]],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[["a"]],["rangeinclusive"]]],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[["a"]],["rangestep"]]],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[["a"]],["rangestepinclusive"]]],[0,"traits","num","",null,null],[0,"bounds","num::traits","",null,null],[8,"Bounded","num::traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",6,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",6,[[],["self"]]],[0,"cast","num::traits","",null,null],[8,"ToPrimitive","num::traits::cast","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,[[["self"]],[["option",["i32"]],["i32"]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",13,[[["self"]],[["option",["i128"]],["i128"]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",13,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,[[["self"]],[["f64"],["option",["f64"]]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",14,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",14,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",14,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",14,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",14,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",14,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",14,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",14,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",14,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",14,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",14,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",14,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",14,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",14,[[["f64"]],["option"]]],[5,"cast","","Cast from one machine scalar to another.",null,[[["t"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",15,[[["t"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",16,[[],["t"]]],[0,"float","num::traits","",null,null],[8,"FloatCore","num::traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",19,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",19,[[],["self"]]],[10,"nan","","Returns NaN.",19,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",19,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",19,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",19,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",19,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",19,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",19,[[],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",19,[[],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",19,[[],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",19,[[],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",19,[[],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",19,[[],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",19,[[],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",19,[[],["self"]]],[11,"trunc","","Return the integer part of a number.",19,[[],["self"]]],[11,"fract","","Returns the fractional part of a number.",19,[[],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",19,[[],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",19,[[],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",19,[[],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",19,[[],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",19,[[],["self"]]],[11,"max","","Returns the maximum of the two numbers.",19,[[],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",19,[[],["self"]]],[11,"powi","","Raise a number to an integer power.",19,[[["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",19,[[],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",19,[[],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",19,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",20,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",20,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",20,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",20,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",20,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",20,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",20,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",20,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",20,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",20,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",20,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",20,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",20,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",20,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",20,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",20,[[],["self"]]],[0,"identities","num::traits","",null,null],[8,"Zero","num::traits::identities","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",3,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",3,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",4,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",4,[[["self"]],["bool"]]],[5,"zero","","Returns the additive identity, `0`.",null,[[],["t"]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["t"]]],[0,"int","num::traits","",null,null],[8,"PrimInt","num::traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",12,[[],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",12,[[],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",12,[[],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",12,[[],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",12,[[["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",12,[[],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",12,[[],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",12,[[],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",12,[[],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",12,[[],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",12,[[["u32"]],["self"]]],[0,"ops","num::traits","",null,null],[0,"checked","num::traits::ops","",null,null],[8,"CheckedAdd","num::traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",8,[[["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",9,[[["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",10,[[["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",11,[[["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",21,[[["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",22,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",23,[[["u32"],["self"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",24,[[["u32"],["self"]],["option"]]],[0,"inv","num::traits::ops","",null,null],[8,"Inv","num::traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",25,null],[10,"inv","","Returns the multiplicative inverse of `self`.",25,[[]]],[0,"mul_add","num::traits::ops","",null,null],[8,"MulAdd","num::traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",26,null],[10,"mul_add","","Performs the fused multiply-add operation.",26,[[["a"],["b"]]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",27,[[["a"],["self"],["b"]]]],[0,"saturating","num::traits::ops","",null,null],[8,"Saturating","num::traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",7,[[],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",7,[[],["self"]]],[0,"wrapping","num::traits::ops","",null,null],[8,"WrappingAdd","num::traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",28,[[["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",29,[[["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",30,[[["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",31,[[["u32"],["self"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",32,[[["u32"],["self"]],["self"]]],[0,"pow","num::traits","",null,null],[8,"Pow","num::traits::pow","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",17,null],[10,"pow","","Returns `self` to the power `rhs`.",17,[[["rhs"]]]],[5,"pow","","Raises a value to the power of exp, using exponentiation…",null,[[["t"],["usize"]],["t"]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["t"],["usize"]],["option"]]],[0,"sign","num::traits","",null,null],[8,"Signed","num::traits::sign","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",5,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",5,[[["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",5,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",5,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",5,[[["self"]],["bool"]]],[5,"abs","","Computes the absolute value.",null,[[["t"]],["t"]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["t"]],["t"]]],[5,"signum","","Returns the sign of the number.",null,[[["t"]],["t"]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num::traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",2,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",2,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",33,null],[13,"Invalid","","",33,null],[3,"ParseFloatError","","",null,null],[12,"kind","","",34,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["t"]],["t"]]],[0,"rational","num","",null,null],[3,"Ratio","num::rational","Represents the ratio between two numbers.",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[3,"ParseRatioError","","",null,null],[11,"from","num::complex","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","num::integer","",36,[[["t"]],["t"]]],[11,"into_iter","","",36,[[],["i"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","num::iter","",37,[[["t"]],["t"]]],[11,"into_iter","","",37,[[],["i"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"into","","",37,[[],["u"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into_iter","","",38,[[],["i"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into_iter","","",39,[[],["i"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into_iter","","",40,[[],["i"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"into","","",40,[[],["u"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","num::traits","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","num::rational","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"div_assign","num::complex","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["complex"],["self"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["complex"],["self"]]]],[11,"sub","","",0,[[["complex"]],["complex"]]],[11,"sub","","",0,[[["t"]],["complex"]]],[11,"sub","","",0,[[["complex"]],["complex"]]],[11,"sub","","",0,[[["t"]],["complex"]]],[11,"default","","",0,[[],["complex"]]],[11,"eq","","",35,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"ne","","",35,[[["self"],["parsecomplexerror"]],["bool"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"sum","","",0,[[["i"]],["complex"]]],[11,"from_usize","","",0,[[["usize"]],[["complex"],["option",["complex"]]]]],[11,"from_isize","","",0,[[["isize"]],[["complex"],["option",["complex"]]]]],[11,"from_u8","","",0,[[["u8"]],[["complex"],["option",["complex"]]]]],[11,"from_u16","","",0,[[["u16"]],[["complex"],["option",["complex"]]]]],[11,"from_u32","","",0,[[["u32"]],[["complex"],["option",["complex"]]]]],[11,"from_u64","","",0,[[["u64"]],[["complex"],["option",["complex"]]]]],[11,"from_i8","","",0,[[["i8"]],[["complex"],["option",["complex"]]]]],[11,"from_i16","","",0,[[["i16"]],[["complex"],["option",["complex"]]]]],[11,"from_i32","","",0,[[["i32"]],[["complex"],["option",["complex"]]]]],[11,"from_i64","","",0,[[["i64"]],[["complex"],["option",["complex"]]]]],[11,"from_u128","","",0,[[["u128"]],[["complex"],["option",["complex"]]]]],[11,"from_i128","","",0,[[["i128"]],[["complex"],["option",["complex"]]]]],[11,"from_f32","","",0,[[["f32"]],[["complex"],["option",["complex"]]]]],[11,"from_f64","","",0,[[["f64"]],[["complex"],["option",["complex"]]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["complex"],["self"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"product","","",0,[[["i"]],["complex"]]],[11,"to_usize","","",0,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"to_isize","","",0,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_u8","","",0,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","",0,[[["self"]],[["option",["u16"]],["u16"]]]],[11,"to_u32","","",0,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"to_u64","","",0,[[["self"]],[["u64"],["option",["u64"]]]]],[11,"to_i8","","",0,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","",0,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","",0,[[["self"]],[["option",["i32"]],["i32"]]]],[11,"to_i64","","",0,[[["self"]],[["option",["i64"]],["i64"]]]],[11,"to_u128","","",0,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_i128","","",0,[[["self"]],[["option",["i128"]],["i128"]]]],[11,"to_f32","","",0,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","",0,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"]],[["complex"],["result",["complex"]]]]],[11,"as_","","",0,[[],["u"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"neg","","",0,[[],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"rem","","",0,[[["t"]],["complex"]]],[11,"rem","","",0,[[["complex"]],["complex"]]],[11,"rem","","",0,[[["complex"]],["complex"]]],[11,"rem","","",0,[[["t"]],["complex"]]],[11,"div","","",0,[[["t"]],["complex"]]],[11,"div","","",0,[[["complex"]],["complex"]]],[11,"div","","",0,[[["t"]],["complex"]]],[11,"div","","",0,[[["complex"]],["complex"]]],[11,"from","","",0,[[["u"]],[["complex"],["option",["complex"]]]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"add","","",0,[[["complex"]],["complex"]]],[11,"add","","",0,[[["t"]],["complex"]]],[11,"add","","",0,[[["complex"]],["complex"]]],[11,"add","","",0,[[["t"]],["complex"]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["complex"],["self"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"],["u32"]],[["complex"],["result",["complex"]]]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"mul","","",0,[[["t"]],["complex"]]],[11,"mul","","",0,[[["complex"]],["complex"]]],[11,"mul","","",0,[[["t"]],["complex"]]],[11,"mul","","",0,[[["complex"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",35,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"inv","","",0,[[],["complex"]]],[11,"mul_assign","","",0,[[["complex"],["self"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"fmt","","",0,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","num::traits","",34,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",33,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"next","num::integer","",36,[[["self"]],["option"]]],[11,"next_back","num::iter","",37,[[["self"]],["option"]]],[11,"next_back","","",38,[[["self"]],["option"]]],[11,"clone","","",40,[[["self"]],["rangestepinclusive"]]],[11,"clone","","",39,[[["self"]],["rangestep"]]],[11,"clone","","",38,[[["self"]],["rangeinclusive"]]],[11,"clone","","",37,[[["self"]],["range"]]],[11,"next","","",40,[[["self"]],["option"]]],[11,"next","","",39,[[["self"]],["option"]]],[11,"next","","",38,[[["self"]],["option"]]],[11,"size_hint","","",38,[[["self"]]]],[11,"next","","",37,[[["self"]],["option"]]],[11,"size_hint","","",37,[[["self"]]]],[11,"div_assign","num::rational","",41,[[["ratio"],["self"]]]],[11,"div_assign","","",41,[[["self"],["t"]]]],[11,"div_assign","","",41,[[["self"],["t"]]]],[11,"div_assign","","",41,[[["self"],["ratio"]]]],[11,"fmt","","",42,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",41,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"cmp","","",41,[[["ratio"],["self"]],["ordering"]]],[11,"add_assign","","",41,[[["self"],["ratio"]]]],[11,"add_assign","","",41,[[["self"],["t"]]]],[11,"add_assign","","",41,[[["ratio"],["self"]]]],[11,"add_assign","","",41,[[["self"],["t"]]]],[11,"partial_cmp","","",41,[[["ratio"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"checked_mul","","",41,[[["ratio"],["self"]],[["option",["ratio"]],["ratio"]]]],[11,"sub","","",41,[[["t"]],["ratio"]]],[11,"sub","","",41,[[["t"]],["ratio"]]],[11,"sub","","",41,[[["ratio"]],["ratio"]]],[11,"sub","","",41,[[["ratio"]],["ratio"]]],[11,"eq","","",42,[[["parseratioerror"],["self"]],["bool"]]],[11,"ne","","",42,[[["parseratioerror"],["self"]],["bool"]]],[11,"eq","","",41,[[["ratio"],["self"]],["bool"]]],[11,"abs","","",41,[[["self"]],["ratio"]]],[11,"abs_sub","","",41,[[["ratio"],["self"]],["ratio"]]],[11,"signum","","",41,[[["self"]],["ratio"]]],[11,"is_positive","","",41,[[["self"]],["bool"]]],[11,"is_negative","","",41,[[["self"]],["bool"]]],[11,"sum","","",41,[[["i"]],["ratio"]]],[11,"sum","","",41,[[["i"]],["ratio"]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["u8"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["option",["ratio"]],["ratio",["i64"]]]]],[11,"from_i128","","",41,[[["i128"]],[["option",["ratio"]],["ratio",["i64"]]]]],[11,"from_u64","","",41,[[["u64"]],[["option",["ratio"]],["ratio",["i64"]]]]],[11,"from_u128","","",41,[[["u128"]],[["option",["ratio"]],["ratio",["i64"]]]]],[11,"from_f32","","",41,[[["f32"]],[["option",["ratio"]],["ratio",["i64"]]]]],[11,"from_f64","","",41,[[["f64"]],[["option",["ratio"]],["ratio",["i64"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["i8"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["u16"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["isize"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["i32"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["i32"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["i32"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["i32"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["i32"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["i32"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["i128"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,"from_i128","","",41,[[["i128"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,"from_u64","","",41,[[["u64"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,"from_u128","","",41,[[["u128"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,"from_f32","","",41,[[["f32"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,"from_f64","","",41,[[["f64"]],[["option",["ratio"]],["ratio",["i16"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["u64"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["u128"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["u128"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["u128"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["u128"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["u128"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["u128"]],["option",["ratio"]]]]],[11,"from_i64","","",41,[[["i64"]],[["option",["ratio"]],["ratio",["usize"]]]]],[11,"from_i128","","",41,[[["i128"]],[["option",["ratio"]],["ratio",["usize"]]]]],[11,"from_u64","","",41,[[["u64"]],[["option",["ratio"]],["ratio",["usize"]]]]],[11,"from_u128","","",41,[[["u128"]],[["option",["ratio"]],["ratio",["usize"]]]]],[11,"from_f32","","",41,[[["f32"]],[["option",["ratio"]],["ratio",["usize"]]]]],[11,"from_f64","","",41,[[["f64"]],[["option",["ratio"]],["ratio",["usize"]]]]],[11,"from_i64","","",41,[[["i64"]],[["ratio",["u32"]],["option",["ratio"]]]]],[11,"from_i128","","",41,[[["i128"]],[["ratio",["u32"]],["option",["ratio"]]]]],[11,"from_u64","","",41,[[["u64"]],[["ratio",["u32"]],["option",["ratio"]]]]],[11,"from_u128","","",41,[[["u128"]],[["ratio",["u32"]],["option",["ratio"]]]]],[11,"from_f32","","",41,[[["f32"]],[["ratio",["u32"]],["option",["ratio"]]]]],[11,"from_f64","","",41,[[["f64"]],[["ratio",["u32"]],["option",["ratio"]]]]],[11,"rem_assign","","",41,[[["self"],["t"]]]],[11,"rem_assign","","",41,[[["self"],["ratio"]]]],[11,"rem_assign","","",41,[[["ratio"],["self"]]]],[11,"rem_assign","","",41,[[["self"],["t"]]]],[11,"pow","","",41,[[["u64"]],["ratio"]]],[11,"pow","","",41,[[["i8"]],["ratio"]]],[11,"pow","","",41,[[["u8"]],["ratio"]]],[11,"pow","","",41,[[["i8"]],["ratio"]]],[11,"pow","","",41,[[["i16"]],["ratio"]]],[11,"pow","","",41,[[["i16"]],["ratio"]]],[11,"pow","","",41,[[["isize"]],["ratio"]]],[11,"pow","","",41,[[["u32"]],["ratio"]]],[11,"pow","","",41,[[["u64"]],["ratio"]]],[11,"pow","","",41,[[["u16"]],["ratio"]]],[11,"pow","","",41,[[["i32"]],["ratio"]]],[11,"pow","","",41,[[["u8"]],["ratio"]]],[11,"pow","","",41,[[["usize"]],["ratio"]]],[11,"pow","","",41,[[["u32"]],["ratio"]]],[11,"pow","","",41,[[["isize"]],["ratio"]]],[11,"pow","","",41,[[["usize"]],["ratio"]]],[11,"pow","","",41,[[["i64"]],["ratio"]]],[11,"pow","","",41,[[["u16"]],["ratio"]]],[11,"pow","","",41,[[["i32"]],["ratio"]]],[11,"pow","","",41,[[["i64"]],["ratio"]]],[11,"product","","",41,[[["i"]],["ratio"]]],[11,"product","","",41,[[["i"]],["ratio"]]],[11,"checked_sub","","",41,[[["ratio"],["self"]],[["option",["ratio"]],["ratio"]]]],[11,"checked_add","","",41,[[["ratio"],["self"]],[["option",["ratio"]],["ratio"]]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",41,[[["str"]],[["parseratioerror"],["result",["ratio","parseratioerror"]],["ratio"]]]],[11,"neg","","",41,[[],["ratio"]]],[11,"zero","","",41,[[],["ratio"]]],[11,"is_zero","","",41,[[["self"]],["bool"]]],[11,"rem","","",41,[[["ratio"]],["ratio"]]],[11,"rem","","",41,[[["t"]],["ratio"]]],[11,"rem","","",41,[[["ratio"]],["ratio"]]],[11,"rem","","",41,[[["t"]],["ratio"]]],[11,"div","","",41,[[["ratio"]],["ratio"]]],[11,"div","","",41,[[["t"]],["ratio"]]],[11,"div","","",41,[[["t"]],["ratio"]]],[11,"div","","",41,[[["ratio"]],["ratio"]]],[11,"add","","",41,[[["ratio"]],["ratio"]]],[11,"add","","",41,[[["t"]],["ratio"]]],[11,"add","","",41,[[["t"]],["ratio"]]],[11,"add","","",41,[[["ratio"]],["ratio"]]],[11,"hash","","",41,[[["self"],["h"]]]],[11,"sub_assign","","",41,[[["self"],["t"]]]],[11,"sub_assign","","",41,[[["self"],["ratio"]]]],[11,"sub_assign","","",41,[[["self"],["t"]]]],[11,"sub_assign","","",41,[[["ratio"],["self"]]]],[11,"into","","",41,[[]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",41,[[["str"],["u32"]],[["parseratioerror"],["result",["ratio","parseratioerror"]],["ratio"]]]],[11,"checked_div","","",41,[[["ratio"],["self"]],[["option",["ratio"]],["ratio"]]]],[11,"clone","","",42,[[["self"]],["parseratioerror"]]],[11,"clone","","",41,[[["self"]],["ratio"]]],[11,"one","","",41,[[],["ratio"]]],[11,"is_one","","",41,[[["self"]],["bool"]]],[11,"mul","","",41,[[["ratio"]],["ratio"]]],[11,"mul","","",41,[[["t"]],["ratio"]]],[11,"mul","","",41,[[["ratio"]],["ratio"]]],[11,"mul","","",41,[[["t"]],["ratio"]]],[11,"from","","",41,[[["t"]],["ratio"]]],[11,"from","","",41,[[],["ratio"]]],[11,"fmt","","",42,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"fmt","","",41,[[["self"],["formatter"]],[["result",["error"]],["error"]]]],[11,"inv","","",41,[[],["ratio"]]],[11,"mul_assign","","",41,[[["self"],["t"]]]],[11,"mul_assign","","",41,[[["ratio"],["self"]]]],[11,"mul_assign","","",41,[[["self"],["ratio"]]]],[11,"mul_assign","","",41,[[["self"],["t"]]]],[11,"new","num::complex","Create a new Complex",0,[[["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't…",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[],["bool"]]],[11,"new","num::integer","For a given n, iterate over all binomial coefficients…",36,[[["t"]],["iterbinomial"]]],[11,"new","num::rational","Creates a new `Ratio`. Fails if `denom` is zero.",41,[[["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",41,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",41,[[["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",41,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",41,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",41,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer…",41,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",41,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",41,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",41,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",41,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",41,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",41,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division…",41,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",41,[[["self"],["i32"]],["ratio"]]],[11,"approximate_float","","",41,[[["f"]],[["option",["ratio"]],["ratio"]]]]],"p":[[3,"Complex"],[8,"Integer"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"Pow"],[8,"Roots"],[8,"FloatCore"],[8,"FloatConst"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[3,"ParseComplexError"],[3,"IterBinomial"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","i":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[3,"ParseComplexError","","",null,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"new","","Create a new Complex",0,[[["t"]],["complex"]]],[11,"i","","Returns imaginary unit",0,[[],["complex"]]],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't…",0,[[["self"]],["t"]]],[11,"scale","","Multiplies `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"unscale","","Divides `self` by the scalar `t`.",0,[[["self"],["t"]],["complex"]]],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,[[["self"]],["complex"]]],[11,"inv","","Returns `1/self`",0,[[["self"]],["complex"]]],[11,"is_nan","","Checks if the given complex number is NaN",0,[[],["bool"]]],[11,"is_infinite","","Checks if the given complex number is infinite",0,[[],["bool"]]],[11,"is_finite","","Checks if the given complex number is finite",0,[[],["bool"]]],[11,"is_normal","","Checks if the given complex number is normal",0,[[],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"from","","",0,[[["t"]],["complex"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"div","","",0,[[["complex"]],["complex"]]],[11,"div","","",0,[[["complex"]],["complex"]]],[11,"div","","",0,[[["t"]],["complex"]]],[11,"div","","",0,[[["t"]],["complex"]]],[11,"rem","","",0,[[["complex"]],["complex"]]],[11,"rem","","",0,[[["complex"]],["self"]]],[11,"rem","","",0,[[["t"]],["complex"]]],[11,"rem","","",0,[[["t"]],["complex"]]],[11,"sub","","",0,[[["complex"]],["complex"]]],[11,"sub","","",0,[[["complex"]],["complex"]]],[11,"sub","","",0,[[["t"]],["complex"]]],[11,"sub","","",0,[[["t"]],["complex"]]],[11,"eq","","",0,[[["self"],["complex"]],["bool"]]],[11,"ne","","",0,[[["self"],["complex"]],["bool"]]],[11,"eq","","",1,[[["parsecomplexerror"],["self"]],["bool"]]],[11,"ne","","",1,[[["parsecomplexerror"],["self"]],["bool"]]],[11,"add","","",0,[[["complex"]],["complex"]]],[11,"add","","",0,[[["complex"]],["complex"]]],[11,"add","","",0,[[["t"]],["complex"]]],[11,"add","","",0,[[["t"]],["complex"]]],[11,"mul","","",0,[[["complex"]],["complex"]]],[11,"mul","","",0,[[["complex"]],["complex"]]],[11,"mul","","",0,[[["t"]],["complex"]]],[11,"mul","","",0,[[["t"]],["complex"]]],[11,"neg","","",0,[[],["complex"]]],[11,"add_assign","","",0,[[["complex"],["self"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["complex"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["complex"],["self"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["complex"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["complex"],["self"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["complex"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["complex"],["self"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["complex"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["complex"],["self"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["complex"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"hash","","",0,[[["self"],["__h"]]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"from_str","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"clone","","",0,[[["self"]],["complex"]]],[11,"default","","",0,[[],["complex"]]],[11,"to_usize","","",0,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"to_isize","","",0,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_u8","","",0,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","",0,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32","","",0,[[["self"]],[["u32"],["option",["u32"]]]]],[11,"to_u64","","",0,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_i8","","",0,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","",0,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","",0,[[["self"]],[["i32"],["option",["i32"]]]]],[11,"to_i64","","",0,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_u128","","",0,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_i128","","",0,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_f32","","",0,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","",0,[[["self"]],[["f64"],["option",["f64"]]]]],[11,"from_usize","","",0,[[["usize"]],["option"]]],[11,"from_isize","","",0,[[["isize"]],["option"]]],[11,"from_u8","","",0,[[["u8"]],["option"]]],[11,"from_u16","","",0,[[["u16"]],["option"]]],[11,"from_u32","","",0,[[["u32"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_i8","","",0,[[["i8"]],["option"]]],[11,"from_i16","","",0,[[["i16"]],["option"]]],[11,"from_i32","","",0,[[["i32"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from","","",0,[[["toprimitive"]],["option"]]],[11,"as_","","",0,[[],["u"]]],[11,"from_str_radix","","Parses `a +/- bi`; `ai +/- b`; `a`; or `bi` where `a` and…",0,[[["str"],["u32"]],["result"]]],[11,"zero","","",0,[[],["complex"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["complex"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"inv","","",0,[[],["complex"]]]],"p":[[3,"Complex"],[3,"ParseComplexError"]]};
searchIndex["num_integer"] = {"doc":"Integer trait and functions.","i":[[3,"IterBinomial","num_integer","An iterator over binomial coefficients.",null,null],[5,"sqrt","","Returns the truncated principal square root of an integer…",null,[[["roots"]],["roots"]]],[5,"cbrt","","Returns the truncated principal cube root of an integer --…",null,[[["roots"]],["roots"]]],[5,"nth_root","","Returns the truncated principal `n`th root of an integer…",null,[[["roots"],["u32"]],["roots"]]],[5,"div_rem","","Simultaneous integer division and modulus",null,[[["integer"]]]],[5,"div_floor","","Floored integer division",null,[[["integer"]],["integer"]]],[5,"mod_floor","","Floored integer modulus",null,[[["integer"]],["integer"]]],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,[[["integer"]]]],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number…",null,[[["integer"]],["integer"]]],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number…",null,[[["integer"]],["integer"]]],[5,"binomial","","Calculate the binomial coefficient.",null,[[["integer"],["clone"]],[["integer"],["clone"]]]],[5,"multinomial","","Calculate the multinomial coefficient.",null,[[],[["integer"],["clone"]]]],[8,"Roots","","Provides methods to compute an integer's square root, cube…",null,null],[10,"nth_root","","Returns the truncated principal `n`th root of an integer…",0,[[["u32"],["self"]],["self"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[["self"]],["self"]]],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,[[["self"]],["self"]]],[10,"mod_floor","","Floored integer modulo, satisfying:",1,[[["self"]],["self"]]],[10,"gcd","","Greatest Common Divisor (GCD).",1,[[["self"]],["self"]]],[10,"lcm","","Lowest Common Multiple (LCM).",1,[[["self"]],["self"]]],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,[[["self"]],["bool"]]],[10,"is_multiple_of","","Returns `true` if `self` is a multiple of `other`.",1,[[["self"]],["bool"]]],[10,"is_even","","Returns `true` if the number is even.",1,[[["self"]],["bool"]]],[10,"is_odd","","Returns `true` if the number is odd.",1,[[["self"]],["bool"]]],[10,"div_rem","","Simultaneous truncated integer division and modulus.…",1,[[["self"]]]],[11,"div_mod_floor","","Simultaneous floored integer division and modulus. Returns…",1,[[["self"]]]],[11,"new","","For a given n, iterate over all binomial coefficients…",2,[[["t"]],["iterbinomial"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"sqrt","","Returns the truncated principal square root of an integer…",0,[[["self"]],["self"]]],[11,"cbrt","","Returns the truncated principal cube root of an integer --…",0,[[["self"]],["self"]]]],"p":[[8,"Roots"],[8,"Integer"],[3,"IterBinomial"]]};
searchIndex["num_iter"] = {"doc":"External iterators for generic mathematics","i":[[3,"Range","num_iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It…",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It…",null,null],[5,"range","","Returns an iterator over the given range [start, stop)…",null,[[["a"]],["range"]]],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,[[["a"]],["rangeinclusive"]]],[5,"range_step","","Return an iterator over the range [start, stop) by `step`.…",null,[[["a"]],["rangestep"]]],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`.…",null,[[["a"]],["rangestepinclusive"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into_iter","","",0,[[],["i"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into_iter","","",1,[[],["i"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into_iter","","",2,[[],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into_iter","","",3,[[],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"next","","",0,[[["self"]],["option"]]],[11,"size_hint","","",0,[[["self"]]]],[11,"next","","",1,[[["self"]],["option"]]],[11,"size_hint","","",1,[[["self"]]]],[11,"next","","",2,[[["self"]],["option"]]],[11,"next","","",3,[[["self"]],["option"]]],[11,"next_back","","",0,[[["self"]],["option"]]],[11,"next_back","","",1,[[["self"]],["option"]]],[11,"clone","","",0,[[["self"]],["range"]]],[11,"clone","","",1,[[["self"]],["rangeinclusive"]]],[11,"clone","","",2,[[["self"]],["rangestep"]]],[11,"clone","","",3,[[["self"]],["rangestepinclusive"]]]],"p":[[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"]]};
searchIndex["num_rational"] = {"doc":"Rational numbers","i":[[3,"Ratio","num_rational","Represents the ratio between two numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","Alias for a `Ratio` of 32-bit-sized integers.",null,null],[6,"Rational64","","Alias for a `Ratio` of 64-bit-sized integers.",null,null],[11,"new","","Creates a new `Ratio`. Fails if `denom` is zero.",0,[[["t"]],["ratio"]]],[11,"from_integer","","Creates a `Ratio` representing the integer `t`.",0,[[["t"]],["ratio"]]],[11,"new_raw","","Creates a `Ratio` without checking for `denom == 0` or…",0,[[["t"]],["ratio"]]],[11,"to_integer","","Converts to an integer, rounding towards zero.",0,[[["self"]],["t"]]],[11,"numer","","Gets an immutable reference to the numerator.",0,[[["self"]],["t"]]],[11,"denom","","Gets an immutable reference to the denominator.",0,[[["self"]],["t"]]],[11,"is_integer","","Returns true if the rational number is an integer…",0,[[["self"]],["bool"]]],[11,"reduced","","Returns a reduced copy of self.",0,[[["self"]],["ratio"]]],[11,"recip","","Returns the reciprocal.",0,[[["self"]],["ratio"]]],[11,"floor","","Rounds towards minus infinity.",0,[[["self"]],["ratio"]]],[11,"ceil","","Rounds towards plus infinity.",0,[[["self"]],["ratio"]]],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away…",0,[[["self"]],["ratio"]]],[11,"trunc","","Rounds towards zero.",0,[[["self"]],["ratio"]]],[11,"fract","","Returns the fractional part of a number, with division…",0,[[["self"]],["ratio"]]],[11,"pow","","Raises the `Ratio` to the power of an exponent.",0,[[["self"],["i32"]],["ratio"]]],[11,"approximate_float","","",0,[[["floatcore"],["numcast"]],[["option",["ratio"]],["ratio"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",0,[[["t"]],["ratio"]]],[11,"from","","",0,[[],["ratio"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"div","","",0,[[["ratio"]],["ratio"]]],[11,"div","","",0,[[["t"]],["ratio"]]],[11,"div","","",0,[[["ratio"]],["ratio"]]],[11,"div","","",0,[[["t"]],["ratio"]]],[11,"rem","","",0,[[["ratio"]],["ratio"]]],[11,"rem","","",0,[[["t"]],["ratio"]]],[11,"rem","","",0,[[["ratio"]],["ratio"]]],[11,"rem","","",0,[[["t"]],["ratio"]]],[11,"sub","","",0,[[["ratio"]],["ratio"]]],[11,"sub","","",0,[[["t"]],["ratio"]]],[11,"sub","","",0,[[["ratio"]],["ratio"]]],[11,"sub","","",0,[[["t"]],["ratio"]]],[11,"eq","","",0,[[["self"]],["bool"]]],[11,"eq","","",1,[[["parseratioerror"],["self"]],["bool"]]],[11,"ne","","",1,[[["parseratioerror"],["self"]],["bool"]]],[11,"cmp","","",0,[[["self"]],["ordering"]]],[11,"partial_cmp","","",0,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"add","","",0,[[["ratio"]],["ratio"]]],[11,"add","","",0,[[["t"]],["ratio"]]],[11,"add","","",0,[[["ratio"]],["ratio"]]],[11,"add","","",0,[[["t"]],["ratio"]]],[11,"mul","","",0,[[["ratio"]],["ratio"]]],[11,"mul","","",0,[[["t"]],["ratio"]]],[11,"mul","","",0,[[["ratio"]],["ratio"]]],[11,"mul","","",0,[[["t"]],["ratio"]]],[11,"neg","","",0,[[],["ratio"]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"add_assign","","",0,[[["self"],["ratio"]]]],[11,"add_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"sub_assign","","",0,[[["self"],["ratio"]]]],[11,"sub_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"mul_assign","","",0,[[["self"],["ratio"]]]],[11,"mul_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"div_assign","","",0,[[["self"],["ratio"]]]],[11,"div_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"rem_assign","","",0,[[["self"],["ratio"]]]],[11,"rem_assign","","",0,[[["self"],["t"]]]],[11,"hash","","",0,[[["self"],["h"]]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"product","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"sum","","",0,[[["i"]],["self"]]],[11,"from_str","","Parses `numer/denom` or just `numer`.",0,[[["str"]],[["parseratioerror"],["result",["ratio","parseratioerror"]],["ratio"]]]],[11,"into","","",0,[[]]],[11,"clone","","",0,[[["self"]],["ratio"]]],[11,"clone","","",1,[[["self"]],["parseratioerror"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_i64","","",0,[[["i64"]],["option"]]],[11,"from_i128","","",0,[[["i128"]],["option"]]],[11,"from_u64","","",0,[[["u64"]],["option"]]],[11,"from_u128","","",0,[[["u128"]],["option"]]],[11,"from_f32","","",0,[[["f32"]],["option"]]],[11,"from_f64","","",0,[[["f64"]],["option"]]],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",0,[[["str"],["u32"]],[["parseratioerror"],["result",["ratio","parseratioerror"]],["ratio"]]]],[11,"zero","","",0,[[],["ratio"]]],[11,"is_zero","","",0,[[["self"]],["bool"]]],[11,"one","","",0,[[],["ratio"]]],[11,"is_one","","",0,[[["self"]],["bool"]]],[11,"checked_add","","",0,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,"checked_sub","","",0,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,"checked_mul","","",0,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,"checked_div","","",0,[[["self"],["ratio"]],[["option",["ratio"]],["ratio"]]]],[11,"inv","","",0,[[],["ratio"]]],[11,"pow","","",0,[[["i8"]],["ratio"]]],[11,"pow","","",0,[[["i8"]],["ratio"]]],[11,"pow","","",0,[[["i16"]],["ratio"]]],[11,"pow","","",0,[[["i16"]],["ratio"]]],[11,"pow","","",0,[[["i32"]],["ratio"]]],[11,"pow","","",0,[[["i32"]],["ratio"]]],[11,"pow","","",0,[[["i64"]],["ratio"]]],[11,"pow","","",0,[[["i64"]],["ratio"]]],[11,"pow","","",0,[[["isize"]],["ratio"]]],[11,"pow","","",0,[[["isize"]],["ratio"]]],[11,"pow","","",0,[[["u8"]],["ratio"]]],[11,"pow","","",0,[[["u8"]],["ratio"]]],[11,"pow","","",0,[[["u16"]],["ratio"]]],[11,"pow","","",0,[[["u16"]],["ratio"]]],[11,"pow","","",0,[[["u32"]],["ratio"]]],[11,"pow","","",0,[[["u32"]],["ratio"]]],[11,"pow","","",0,[[["u64"]],["ratio"]]],[11,"pow","","",0,[[["u64"]],["ratio"]]],[11,"pow","","",0,[[["usize"]],["ratio"]]],[11,"pow","","",0,[[["usize"]],["ratio"]]],[11,"abs","","",0,[[["self"]],["ratio"]]],[11,"abs_sub","","",0,[[["self"],["ratio"]],["ratio"]]],[11,"signum","","",0,[[["self"]],["ratio"]]],[11,"is_positive","","",0,[[["self"]],["bool"]]],[11,"is_negative","","",0,[[["self"]],["bool"]]]],"p":[[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","i":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[5,"clamp","","A value bounded by a minimum and a maximum",null,[[["partialord"]],["partialord"]]],[0,"bounds","","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",2,[[],["self"]]],[10,"max_value","","returns the largest finite number this type can represent",2,[[],["self"]]],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,[[["numcast"]],[["option"],["numcast"]]]],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",3,[[["self"]],[["isize"],["option",["isize"]]]]],[11,"to_i8","","Converts the value of `self` to an `i8`.",3,[[["self"]],[["option",["i8"]],["i8"]]]],[11,"to_i16","","Converts the value of `self` to an `i16`.",3,[[["self"]],[["option",["i16"]],["i16"]]]],[11,"to_i32","","Converts the value of `self` to an `i32`.",3,[[["self"]],[["i32"],["option",["i32"]]]]],[10,"to_i64","","Converts the value of `self` to an `i64`.",3,[[["self"]],[["i64"],["option",["i64"]]]]],[11,"to_i128","","Converts the value of `self` to an `i128`.",3,[[["self"]],[["i128"],["option",["i128"]]]]],[11,"to_usize","","Converts the value of `self` to a `usize`.",3,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"to_u8","","Converts the value of `self` to an `u8`.",3,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"to_u16","","Converts the value of `self` to an `u16`.",3,[[["self"]],[["u16"],["option",["u16"]]]]],[11,"to_u32","","Converts the value of `self` to an `u32`.",3,[[["self"]],[["u32"],["option",["u32"]]]]],[10,"to_u64","","Converts the value of `self` to an `u64`.",3,[[["self"]],[["option",["u64"]],["u64"]]]],[11,"to_u128","","Converts the value of `self` to an `u128`.",3,[[["self"]],[["option",["u128"]],["u128"]]]],[11,"to_f32","","Converts the value of `self` to an `f32`.",3,[[["self"]],[["f32"],["option",["f32"]]]]],[11,"to_f64","","Converts the value of `self` to an `f64`.",3,[[["self"]],[["f64"],["option",["f64"]]]]],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this…",4,[[["isize"]],["option"]]],[11,"from_i8","","Convert an `i8` to return an optional value of this type.…",4,[[["i8"]],["option"]]],[11,"from_i16","","Convert an `i16` to return an optional value of this type.…",4,[[["i16"]],["option"]]],[11,"from_i32","","Convert an `i32` to return an optional value of this type.…",4,[[["i32"]],["option"]]],[10,"from_i64","","Convert an `i64` to return an optional value of this type.…",4,[[["i64"]],["option"]]],[11,"from_i128","","Convert an `i128` to return an optional value of this…",4,[[["i128"]],["option"]]],[11,"from_usize","","Convert a `usize` to return an optional value of this…",4,[[["usize"]],["option"]]],[11,"from_u8","","Convert an `u8` to return an optional value of this type.…",4,[[["u8"]],["option"]]],[11,"from_u16","","Convert an `u16` to return an optional value of this type.…",4,[[["u16"]],["option"]]],[11,"from_u32","","Convert an `u32` to return an optional value of this type.…",4,[[["u32"]],["option"]]],[10,"from_u64","","Convert an `u64` to return an optional value of this type.…",4,[[["u64"]],["option"]]],[11,"from_u128","","Convert an `u128` to return an optional value of this…",4,[[["u128"]],["option"]]],[11,"from_f32","","Convert a `f32` to return an optional value of this type.…",4,[[["f32"]],["option"]]],[11,"from_f64","","Convert a `f64` to return an optional value of this type.…",4,[[["f64"]],["option"]]],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted…",5,[[["toprimitive"]],["option"]]],[8,"AsPrimitive","","A generic interface for casting between machine scalars…",null,null],[10,"as_","","Convert a value to another, using the `as` operator.",6,[[],["t"]]],[0,"float","num_traits","",null,null],[8,"FloatCore","num_traits::float","Generic trait for floating point numbers that works with…",null,null],[10,"infinity","","Returns positive infinity.",7,[[],["self"]]],[10,"neg_infinity","","Returns negative infinity.",7,[[],["self"]]],[10,"nan","","Returns NaN.",7,[[],["self"]]],[10,"neg_zero","","Returns `-0.0`.",7,[[],["self"]]],[10,"min_value","","Returns the smallest finite value that this type can…",7,[[],["self"]]],[10,"min_positive_value","","Returns the smallest positive, normalized value that this…",7,[[],["self"]]],[10,"epsilon","","Returns epsilon, a small positive value.",7,[[],["self"]]],[10,"max_value","","Returns the largest finite value that this type can…",7,[[],["self"]]],[11,"is_nan","","Returns `true` if the number is NaN.",7,[[],["bool"]]],[11,"is_infinite","","Returns `true` if the number is infinite.",7,[[],["bool"]]],[11,"is_finite","","Returns `true` if the number is neither infinite or NaN.",7,[[],["bool"]]],[11,"is_normal","","Returns `true` if the number is neither zero, infinite,…",7,[[],["bool"]]],[10,"classify","","Returns the floating point category of the number. If only…",7,[[],["fpcategory"]]],[11,"floor","","Returns the largest integer less than or equal to a number.",7,[[],["self"]]],[11,"ceil","","Returns the smallest integer greater than or equal to a…",7,[[],["self"]]],[11,"round","","Returns the nearest integer to a number. Round half-way…",7,[[],["self"]]],[11,"trunc","","Return the integer part of a number.",7,[[],["self"]]],[11,"fract","","Returns the fractional part of a number.",7,[[],["self"]]],[11,"abs","","Computes the absolute value of `self`. Returns…",7,[[],["self"]]],[11,"signum","","Returns a number that represents the sign of `self`.",7,[[],["self"]]],[11,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and…",7,[[],["bool"]]],[11,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and…",7,[[],["bool"]]],[11,"min","","Returns the minimum of the two numbers.",7,[[],["self"]]],[11,"max","","Returns the maximum of the two numbers.",7,[[],["self"]]],[11,"recip","","Returns the reciprocal (multiplicative inverse) of the…",7,[[],["self"]]],[11,"powi","","Raise a number to an integer power.",7,[[["i32"]],["self"]]],[10,"to_degrees","","Converts to degrees, assuming the number is in radians.",7,[[],["self"]]],[10,"to_radians","","Converts to radians, assuming the number is in degrees.",7,[[],["self"]]],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as…",7,[[]]],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",8,[[],["self"]]],[10,"FRAC_1_PI","","Return `1.0 / π`.",8,[[],["self"]]],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",8,[[],["self"]]],[10,"FRAC_2_PI","","Return `2.0 / π`.",8,[[],["self"]]],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",8,[[],["self"]]],[10,"FRAC_PI_2","","Return `π / 2.0`.",8,[[],["self"]]],[10,"FRAC_PI_3","","Return `π / 3.0`.",8,[[],["self"]]],[10,"FRAC_PI_4","","Return `π / 4.0`.",8,[[],["self"]]],[10,"FRAC_PI_6","","Return `π / 6.0`.",8,[[],["self"]]],[10,"FRAC_PI_8","","Return `π / 8.0`.",8,[[],["self"]]],[10,"LN_10","","Return `ln(10.0)`.",8,[[],["self"]]],[10,"LN_2","","Return `ln(2.0)`.",8,[[],["self"]]],[10,"LOG10_E","","Return `log10(e)`.",8,[[],["self"]]],[10,"LOG2_E","","Return `log2(e)`.",8,[[],["self"]]],[10,"PI","","Return Archimedes’ constant.",8,[[],["self"]]],[10,"SQRT_2","","Return `sqrt(2.0)`.",8,[[],["self"]]],[0,"identities","num_traits","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,[[],["zero"]]],[5,"one","","Returns the multiplicative identity, `1`.",null,[[],["one"]]],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",9,[[],["self"]]],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,[[["self"]],["bool"]]],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,[[],["self"]]],[11,"is_one","","Returns `true` if `self` is equal to the multiplicative…",10,[[["self"]],["bool"]]],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of…",11,[[],["u32"]]],[10,"count_zeros","","Returns the number of zeros in the binary representation…",11,[[],["u32"]]],[10,"leading_zeros","","Returns the number of leading zeros in the binary…",11,[[],["u32"]]],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary…",11,[[],["u32"]]],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount,…",11,[[["u32"]],["self"]]],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount,…",11,[[["u32"]],["self"]]],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[["u32"]],["self"]]],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[["u32"]],["self"]]],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount,…",11,[[["u32"]],["self"]]],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount,…",11,[[["u32"]],["self"]]],[10,"swap_bytes","","Reverses the byte order of the integer.",11,[[],["self"]]],[10,"from_be","","Convert an integer from big endian to the target's…",11,[[],["self"]]],[10,"from_le","","Convert an integer from little endian to the target's…",11,[[],["self"]]],[10,"to_be","","Convert `self` to big endian from the target's endianness.",11,[[],["self"]]],[10,"to_le","","Convert `self` to little endian from the target's…",11,[[],["self"]]],[10,"pow","","Raises self to the power of `exp`, using exponentiation by…",11,[[["u32"]],["self"]]],[0,"ops","num_traits","",null,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping…",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow…",12,[[["self"]],["option"]]],[8,"CheckedSub","","Performs subtraction that returns `None` instead of…",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If…",13,[[["self"]],["option"]]],[8,"CheckedMul","","Performs multiplication that returns `None` instead of…",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or…",14,[[["self"]],["option"]]],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking…",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and…",15,[[["self"]],["option"]]],[8,"CheckedRem","","Performs an integral remainder that returns `None` instead…",null,null],[10,"checked_rem","","Finds the remainder of dividing two numbers, checking for…",16,[[["self"]],["option"]]],[8,"CheckedNeg","","Performs negation that returns `None` if the result can't…",null,null],[10,"checked_neg","","Negates a number, returning `None` for results that can't…",17,[[["self"]],["option"]]],[8,"CheckedShl","","Performs a left shift that returns `None` on overflow.",null,null],[10,"checked_shl","","Shifts a number to the left, checking for overflow. If…",18,[[["u32"],["self"]],["option"]]],[8,"CheckedShr","","Performs a right shift that returns `None` on overflow.",null,null],[10,"checked_shr","","Shifts a number to the left, checking for overflow. If…",19,[[["u32"],["self"]],["option"]]],[0,"inv","num_traits::ops","",null,null],[8,"Inv","num_traits::ops::inv","Unary operator for retrieving the multiplicative inverse,…",null,null],[16,"Output","","The result after applying the operator.",20,null],[10,"inv","","Returns the multiplicative inverse of `self`.",20,[[]]],[0,"mul_add","num_traits::ops","",null,null],[8,"MulAdd","num_traits::ops::mul_add","Fused multiply-add. Computes `(self * a) + b` with only…",null,null],[16,"Output","","The resulting type after applying the fused multiply-add.",21,null],[10,"mul_add","","Performs the fused multiply-add operation.",21,[[["a"],["b"]]]],[8,"MulAddAssign","","The fused multiply-add assignment operation.",null,null],[10,"mul_add_assign","","Performs the fused multiply-add operation.",22,[[["a"],["self"],["b"]]]],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator. Returns a+b, saturating at…",23,[[],["self"]]],[10,"saturating_sub","","Saturating subtraction operator. Returns a-b, saturating…",23,[[],["self"]]],[0,"wrapping","num_traits::ops","",null,null],[8,"WrappingAdd","num_traits::ops::wrapping","Performs addition that wraps around on overflow.",null,null],[10,"wrapping_add","","Wrapping (modular) addition. Computes `self + other`,…",24,[[["self"]],["self"]]],[8,"WrappingSub","","Performs subtraction that wraps around on overflow.",null,null],[10,"wrapping_sub","","Wrapping (modular) subtraction. Computes `self - other`,…",25,[[["self"]],["self"]]],[8,"WrappingMul","","Performs multiplication that wraps around on overflow.",null,null],[10,"wrapping_mul","","Wrapping (modular) multiplication. Computes `self *…",26,[[["self"]],["self"]]],[8,"WrappingShl","","Performs a left shift that does not panic.",null,null],[10,"wrapping_shl","","Panic-free bitwise shift-left; yields `self << mask(rhs)`,…",27,[[["u32"],["self"]],["self"]]],[8,"WrappingShr","","Performs a right shift that does not panic.",null,null],[10,"wrapping_shr","","Panic-free bitwise shift-right; yields `self >>…",28,[[["u32"],["self"]],["self"]]],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation…",null,[[["mul"],["usize"],["one"],["clone"]],[["mul"],["one"],["clone"]]]],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an…",null,[[["usize"],["one"],["checkedmul"],["clone"]],[["one"],["checkedmul"],["option"],["clone"]]]],[8,"Pow","","Binary operator for raising a value to a power.",null,null],[16,"Output","","The result after applying the operator.",29,null],[10,"pow","","Returns `self` to the power `rhs`.",29,[[["rhs"]]]],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,[[["signed"]],["signed"]]],[5,"abs_sub","","The positive difference of two numbers.",null,[[["signed"]],["signed"]]],[5,"signum","","Returns the sign of the number.",null,[[["signed"]],["signed"]]],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can…",null,null],[10,"abs","","Computes the absolute value.",30,[[["self"]],["self"]]],[10,"abs_sub","","The positive difference of two numbers.",30,[[["self"]],["self"]]],[10,"signum","","Returns the sign of the number.",30,[[["self"]],["self"]]],[10,"is_positive","","Returns true if the number is positive and false if the…",30,[[["self"]],["bool"]]],[10,"is_negative","","Returns true if the number is negative and false if the…",30,[[["self"]],["bool"]]],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Num","num_traits","The base trait for numeric types, covering `0` and `1`…",null,null],[16,"FromStrRadixErr","","",31,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",31,[[["str"],["u32"]],["result"]]],[8,"NumOps","","The trait for types implementing basic numeric operations",null,null],[8,"NumRef","","The trait for `Num` types which also implement numeric…",null,null],[8,"RefNum","","The trait for references which implement numeric…",null,null],[8,"NumAssignOps","","The trait for types implementing numeric assignment…",null,null],[8,"NumAssign","","The trait for `Num` types which also implement assignment…",null,null],[8,"NumAssignRef","","The trait for `NumAssign` types which also implement…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Bounded"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"AsPrimitive"],[8,"FloatCore"],[8,"FloatConst"],[8,"Zero"],[8,"One"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"CheckedRem"],[8,"CheckedNeg"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"Saturating"],[8,"WrappingAdd"],[8,"WrappingSub"],[8,"WrappingMul"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"Pow"],[8,"Signed"],[8,"Num"]]};
searchIndex["pebble_util"] = {"doc":"","i":[[3,"BinaryPrettyPrint","pebble_util","Values can be wrapped in this type when they're printed to…",null,null],[12,"0","","",0,null],[3,"InitGuard","","A guard for when you want to store some data in a static,…",null,null],[0,"bitmap","","It's useful to be able to model an integral type such as…",null,null],[8,"Bitmap","pebble_util::bitmap","",null,null],[10,"alloc","","Find `n` consecutive unset bits, set them and return the…",1,[[["self"],["usize"]],[["usize"],["option",["usize"]]]]],[8,"BitmapArray","","Like `Bitmap`, but for arrays. This is unfortunately…",null,null],[10,"alloc","","Find `n` consecutive unset bits, set them and return the…",2,[[["self"],["usize"]],[["usize"],["option",["usize"]]]]],[11,"uninit","pebble_util","",3,[[],["initguard"]]],[11,"initialize","","Initialize this `InitGuard`, allowing it to be read from…",3,[[["self"],["t"]]]],[11,"get","","Get a reference to the data, if this guard has been…",3,[[["self"]],["t"]]],[11,"try_get","","Get a reference to the data, if this guard has been…",3,[[["self"]],[["t"],["option"]]]],[0,"math","","",null,null],[5,"flooring_log2","pebble_util::math","Fast integer `log2` that floors to the lower power-of-2 if…",null,[[["u64"]],["u64"]]],[5,"align_down","","",null,[[["usize"]],["usize"]]],[5,"align_up","","",null,[[["usize"]],["usize"]]],[5,"ceiling_log2","","",null,[[["u64"]],["u64"]]],[5,"ceiling_integer_divide","","Divide `x` by `divide_by`, taking the ceiling if it does…",null,[[["u64"]],["u64"]]],[14,"assert_first_call","pebble_util","This macro should be called at the beginning of functions…",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"BinaryPrettyPrint"],[8,"Bitmap"],[8,"BitmapArray"],[3,"InitGuard"]]};
searchIndex["spin"] = {"doc":"Synchronization primitives based on spinning","i":[[3,"Mutex","spin","This type provides MUTual EXclusion based on spinning.",null,null],[3,"MutexGuard","","A guard to which the protected data can be accessed",null,null],[3,"RwLock","","A reader-writer lock",null,null],[3,"RwLockReadGuard","","A guard to which the protected data can be read",null,null],[3,"RwLockWriteGuard","","A guard to which the protected data can be written",null,null],[3,"Once","","A synchronization primitive which can be used to run a…",null,null],[11,"new","","Creates a new spinlock wrapping the supplied data.",0,[[["t"]],["mutex"]]],[11,"into_inner","","Consumes this mutex, returning the underlying data.",0,[[],["t"]]],[11,"lock","","Locks the spinlock and returns a guard.",0,[[["self"]],["mutexguard"]]],[11,"force_unlock","","Force unlock the spinlock.",0,[[["self"]]]],[11,"try_lock","","Tries to lock the mutex. If it is already locked, it will…",0,[[["self"]],[["mutexguard"],["option",["mutexguard"]]]]],[11,"new","","Creates a new spinlock wrapping the supplied data.",1,[[["t"]],["rwlock"]]],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",1,[[],["t"]]],[11,"read","","Locks this rwlock with shared read access, blocking the…",1,[[["self"]],["rwlockreadguard"]]],[11,"try_read","","Attempt to acquire this lock with shared read access.",1,[[["self"]],[["option",["rwlockreadguard"]],["rwlockreadguard"]]]],[11,"force_read_decrement","","Force decrement the reader count.",1,[[["self"]]]],[11,"force_write_unlock","","Force unlock exclusive write access.",1,[[["self"]]]],[11,"write","","Lock this rwlock with exclusive write access, blocking the…",1,[[["self"]],["rwlockwriteguard"]]],[11,"try_write","","Attempt to lock this rwlock with exclusive write access.",1,[[["self"]],[["rwlockwriteguard"],["option",["rwlockwriteguard"]]]]],[18,"INIT","","Initialization constant of `Once`.",2,null],[11,"new","","Creates a new `Once` value.",2,[[],["once"]]],[11,"call_once","","Performs an initialization routine once and only once. The…",2,[[["self"],["f"]],["t"]]],[11,"try","","Returns a pointer iff the `Once` was previously initialized",2,[[["self"]],[["option"],["t"]]]],[11,"wait","","Like try, but will spin if the `Once` is in the process of…",2,[[["self"]],[["option"],["t"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"deref","","",3,[[["self"]],["t"]]],[11,"deref","","",4,[[["self"]],["t"]]],[11,"deref","","",5,[[["self"]],["t"]]],[11,"deref_mut","","",3,[[["self"]],["t"]]],[11,"deref_mut","","",5,[[["self"]],["t"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"drop","","The dropping of the MutexGuard will release the lock it…",3,[[["self"]]]],[11,"drop","","",4,[[["self"]]]],[11,"drop","","",5,[[["self"]]]],[11,"default","","",0,[[],["mutex"]]],[11,"default","","",1,[[],["rwlock"]]]],"p":[[3,"Mutex"],[3,"RwLock"],[3,"Once"],[3,"MutexGuard"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"]]};
searchIndex["typenum"] = {"doc":"This crate provides type-level numbers evaluated at…","i":[[3,"Greater","typenum","A potential output from `Cmp`, this is the type equivalent…",null,null],[3,"Less","","A potential output from `Cmp`, this is the type equivalent…",null,null],[3,"Equal","","A potential output from `Cmp`, this is the type equivalent…",null,null],[0,"consts","","Type aliases for many constants.",null,null],[6,"True","typenum::consts","",null,null],[6,"False","","",null,null],[6,"U0","","",null,null],[6,"U1","","",null,null],[6,"P1","","",null,null],[6,"N1","","",null,null],[6,"U2","","",null,null],[6,"P2","","",null,null],[6,"N2","","",null,null],[6,"U3","","",null,null],[6,"P3","","",null,null],[6,"N3","","",null,null],[6,"U4","","",null,null],[6,"P4","","",null,null],[6,"N4","","",null,null],[6,"U5","","",null,null],[6,"P5","","",null,null],[6,"N5","","",null,null],[6,"U6","","",null,null],[6,"P6","","",null,null],[6,"N6","","",null,null],[6,"U7","","",null,null],[6,"P7","","",null,null],[6,"N7","","",null,null],[6,"U8","","",null,null],[6,"P8","","",null,null],[6,"N8","","",null,null],[6,"U9","","",null,null],[6,"P9","","",null,null],[6,"N9","","",null,null],[6,"U10","","",null,null],[6,"P10","","",null,null],[6,"N10","","",null,null],[6,"U11","","",null,null],[6,"P11","","",null,null],[6,"N11","","",null,null],[6,"U12","","",null,null],[6,"P12","","",null,null],[6,"N12","","",null,null],[6,"U13","","",null,null],[6,"P13","","",null,null],[6,"N13","","",null,null],[6,"U14","","",null,null],[6,"P14","","",null,null],[6,"N14","","",null,null],[6,"U15","","",null,null],[6,"P15","","",null,null],[6,"N15","","",null,null],[6,"U16","","",null,null],[6,"P16","","",null,null],[6,"N16","","",null,null],[6,"U17","","",null,null],[6,"P17","","",null,null],[6,"N17","","",null,null],[6,"U18","","",null,null],[6,"P18","","",null,null],[6,"N18","","",null,null],[6,"U19","","",null,null],[6,"P19","","",null,null],[6,"N19","","",null,null],[6,"U20","","",null,null],[6,"P20","","",null,null],[6,"N20","","",null,null],[6,"U21","","",null,null],[6,"P21","","",null,null],[6,"N21","","",null,null],[6,"U22","","",null,null],[6,"P22","","",null,null],[6,"N22","","",null,null],[6,"U23","","",null,null],[6,"P23","","",null,null],[6,"N23","","",null,null],[6,"U24","","",null,null],[6,"P24","","",null,null],[6,"N24","","",null,null],[6,"U25","","",null,null],[6,"P25","","",null,null],[6,"N25","","",null,null],[6,"U26","","",null,null],[6,"P26","","",null,null],[6,"N26","","",null,null],[6,"U27","","",null,null],[6,"P27","","",null,null],[6,"N27","","",null,null],[6,"U28","","",null,null],[6,"P28","","",null,null],[6,"N28","","",null,null],[6,"U29","","",null,null],[6,"P29","","",null,null],[6,"N29","","",null,null],[6,"U30","","",null,null],[6,"P30","","",null,null],[6,"N30","","",null,null],[6,"U31","","",null,null],[6,"P31","","",null,null],[6,"N31","","",null,null],[6,"U32","","",null,null],[6,"P32","","",null,null],[6,"N32","","",null,null],[6,"U33","","",null,null],[6,"P33","","",null,null],[6,"N33","","",null,null],[6,"U34","","",null,null],[6,"P34","","",null,null],[6,"N34","","",null,null],[6,"U35","","",null,null],[6,"P35","","",null,null],[6,"N35","","",null,null],[6,"U36","","",null,null],[6,"P36","","",null,null],[6,"N36","","",null,null],[6,"U37","","",null,null],[6,"P37","","",null,null],[6,"N37","","",null,null],[6,"U38","","",null,null],[6,"P38","","",null,null],[6,"N38","","",null,null],[6,"U39","","",null,null],[6,"P39","","",null,null],[6,"N39","","",null,null],[6,"U40","","",null,null],[6,"P40","","",null,null],[6,"N40","","",null,null],[6,"U41","","",null,null],[6,"P41","","",null,null],[6,"N41","","",null,null],[6,"U42","","",null,null],[6,"P42","","",null,null],[6,"N42","","",null,null],[6,"U43","","",null,null],[6,"P43","","",null,null],[6,"N43","","",null,null],[6,"U44","","",null,null],[6,"P44","","",null,null],[6,"N44","","",null,null],[6,"U45","","",null,null],[6,"P45","","",null,null],[6,"N45","","",null,null],[6,"U46","","",null,null],[6,"P46","","",null,null],[6,"N46","","",null,null],[6,"U47","","",null,null],[6,"P47","","",null,null],[6,"N47","","",null,null],[6,"U48","","",null,null],[6,"P48","","",null,null],[6,"N48","","",null,null],[6,"U49","","",null,null],[6,"P49","","",null,null],[6,"N49","","",null,null],[6,"U50","","",null,null],[6,"P50","","",null,null],[6,"N50","","",null,null],[6,"U51","","",null,null],[6,"P51","","",null,null],[6,"N51","","",null,null],[6,"U52","","",null,null],[6,"P52","","",null,null],[6,"N52","","",null,null],[6,"U53","","",null,null],[6,"P53","","",null,null],[6,"N53","","",null,null],[6,"U54","","",null,null],[6,"P54","","",null,null],[6,"N54","","",null,null],[6,"U55","","",null,null],[6,"P55","","",null,null],[6,"N55","","",null,null],[6,"U56","","",null,null],[6,"P56","","",null,null],[6,"N56","","",null,null],[6,"U57","","",null,null],[6,"P57","","",null,null],[6,"N57","","",null,null],[6,"U58","","",null,null],[6,"P58","","",null,null],[6,"N58","","",null,null],[6,"U59","","",null,null],[6,"P59","","",null,null],[6,"N59","","",null,null],[6,"U60","","",null,null],[6,"P60","","",null,null],[6,"N60","","",null,null],[6,"U61","","",null,null],[6,"P61","","",null,null],[6,"N61","","",null,null],[6,"U62","","",null,null],[6,"P62","","",null,null],[6,"N62","","",null,null],[6,"U63","","",null,null],[6,"P63","","",null,null],[6,"N63","","",null,null],[6,"U64","","",null,null],[6,"P64","","",null,null],[6,"N64","","",null,null],[6,"U65","","",null,null],[6,"P65","","",null,null],[6,"N65","","",null,null],[6,"U66","","",null,null],[6,"P66","","",null,null],[6,"N66","","",null,null],[6,"U67","","",null,null],[6,"P67","","",null,null],[6,"N67","","",null,null],[6,"U68","","",null,null],[6,"P68","","",null,null],[6,"N68","","",null,null],[6,"U69","","",null,null],[6,"P69","","",null,null],[6,"N69","","",null,null],[6,"U70","","",null,null],[6,"P70","","",null,null],[6,"N70","","",null,null],[6,"U71","","",null,null],[6,"P71","","",null,null],[6,"N71","","",null,null],[6,"U72","","",null,null],[6,"P72","","",null,null],[6,"N72","","",null,null],[6,"U73","","",null,null],[6,"P73","","",null,null],[6,"N73","","",null,null],[6,"U74","","",null,null],[6,"P74","","",null,null],[6,"N74","","",null,null],[6,"U75","","",null,null],[6,"P75","","",null,null],[6,"N75","","",null,null],[6,"U76","","",null,null],[6,"P76","","",null,null],[6,"N76","","",null,null],[6,"U77","","",null,null],[6,"P77","","",null,null],[6,"N77","","",null,null],[6,"U78","","",null,null],[6,"P78","","",null,null],[6,"N78","","",null,null],[6,"U79","","",null,null],[6,"P79","","",null,null],[6,"N79","","",null,null],[6,"U80","","",null,null],[6,"P80","","",null,null],[6,"N80","","",null,null],[6,"U81","","",null,null],[6,"P81","","",null,null],[6,"N81","","",null,null],[6,"U82","","",null,null],[6,"P82","","",null,null],[6,"N82","","",null,null],[6,"U83","","",null,null],[6,"P83","","",null,null],[6,"N83","","",null,null],[6,"U84","","",null,null],[6,"P84","","",null,null],[6,"N84","","",null,null],[6,"U85","","",null,null],[6,"P85","","",null,null],[6,"N85","","",null,null],[6,"U86","","",null,null],[6,"P86","","",null,null],[6,"N86","","",null,null],[6,"U87","","",null,null],[6,"P87","","",null,null],[6,"N87","","",null,null],[6,"U88","","",null,null],[6,"P88","","",null,null],[6,"N88","","",null,null],[6,"U89","","",null,null],[6,"P89","","",null,null],[6,"N89","","",null,null],[6,"U90","","",null,null],[6,"P90","","",null,null],[6,"N90","","",null,null],[6,"U91","","",null,null],[6,"P91","","",null,null],[6,"N91","","",null,null],[6,"U92","","",null,null],[6,"P92","","",null,null],[6,"N92","","",null,null],[6,"U93","","",null,null],[6,"P93","","",null,null],[6,"N93","","",null,null],[6,"U94","","",null,null],[6,"P94","","",null,null],[6,"N94","","",null,null],[6,"U95","","",null,null],[6,"P95","","",null,null],[6,"N95","","",null,null],[6,"U96","","",null,null],[6,"P96","","",null,null],[6,"N96","","",null,null],[6,"U97","","",null,null],[6,"P97","","",null,null],[6,"N97","","",null,null],[6,"U98","","",null,null],[6,"P98","","",null,null],[6,"N98","","",null,null],[6,"U99","","",null,null],[6,"P99","","",null,null],[6,"N99","","",null,null],[6,"U100","","",null,null],[6,"P100","","",null,null],[6,"N100","","",null,null],[6,"U101","","",null,null],[6,"P101","","",null,null],[6,"N101","","",null,null],[6,"U102","","",null,null],[6,"P102","","",null,null],[6,"N102","","",null,null],[6,"U103","","",null,null],[6,"P103","","",null,null],[6,"N103","","",null,null],[6,"U104","","",null,null],[6,"P104","","",null,null],[6,"N104","","",null,null],[6,"U105","","",null,null],[6,"P105","","",null,null],[6,"N105","","",null,null],[6,"U106","","",null,null],[6,"P106","","",null,null],[6,"N106","","",null,null],[6,"U107","","",null,null],[6,"P107","","",null,null],[6,"N107","","",null,null],[6,"U108","","",null,null],[6,"P108","","",null,null],[6,"N108","","",null,null],[6,"U109","","",null,null],[6,"P109","","",null,null],[6,"N109","","",null,null],[6,"U110","","",null,null],[6,"P110","","",null,null],[6,"N110","","",null,null],[6,"U111","","",null,null],[6,"P111","","",null,null],[6,"N111","","",null,null],[6,"U112","","",null,null],[6,"P112","","",null,null],[6,"N112","","",null,null],[6,"U113","","",null,null],[6,"P113","","",null,null],[6,"N113","","",null,null],[6,"U114","","",null,null],[6,"P114","","",null,null],[6,"N114","","",null,null],[6,"U115","","",null,null],[6,"P115","","",null,null],[6,"N115","","",null,null],[6,"U116","","",null,null],[6,"P116","","",null,null],[6,"N116","","",null,null],[6,"U117","","",null,null],[6,"P117","","",null,null],[6,"N117","","",null,null],[6,"U118","","",null,null],[6,"P118","","",null,null],[6,"N118","","",null,null],[6,"U119","","",null,null],[6,"P119","","",null,null],[6,"N119","","",null,null],[6,"U120","","",null,null],[6,"P120","","",null,null],[6,"N120","","",null,null],[6,"U121","","",null,null],[6,"P121","","",null,null],[6,"N121","","",null,null],[6,"U122","","",null,null],[6,"P122","","",null,null],[6,"N122","","",null,null],[6,"U123","","",null,null],[6,"P123","","",null,null],[6,"N123","","",null,null],[6,"U124","","",null,null],[6,"P124","","",null,null],[6,"N124","","",null,null],[6,"U125","","",null,null],[6,"P125","","",null,null],[6,"N125","","",null,null],[6,"U126","","",null,null],[6,"P126","","",null,null],[6,"N126","","",null,null],[6,"U127","","",null,null],[6,"P127","","",null,null],[6,"N127","","",null,null],[6,"U128","","",null,null],[6,"P128","","",null,null],[6,"N128","","",null,null],[6,"U129","","",null,null],[6,"P129","","",null,null],[6,"N129","","",null,null],[6,"U130","","",null,null],[6,"P130","","",null,null],[6,"N130","","",null,null],[6,"U131","","",null,null],[6,"P131","","",null,null],[6,"N131","","",null,null],[6,"U132","","",null,null],[6,"P132","","",null,null],[6,"N132","","",null,null],[6,"U133","","",null,null],[6,"P133","","",null,null],[6,"N133","","",null,null],[6,"U134","","",null,null],[6,"P134","","",null,null],[6,"N134","","",null,null],[6,"U135","","",null,null],[6,"P135","","",null,null],[6,"N135","","",null,null],[6,"U136","","",null,null],[6,"P136","","",null,null],[6,"N136","","",null,null],[6,"U137","","",null,null],[6,"P137","","",null,null],[6,"N137","","",null,null],[6,"U138","","",null,null],[6,"P138","","",null,null],[6,"N138","","",null,null],[6,"U139","","",null,null],[6,"P139","","",null,null],[6,"N139","","",null,null],[6,"U140","","",null,null],[6,"P140","","",null,null],[6,"N140","","",null,null],[6,"U141","","",null,null],[6,"P141","","",null,null],[6,"N141","","",null,null],[6,"U142","","",null,null],[6,"P142","","",null,null],[6,"N142","","",null,null],[6,"U143","","",null,null],[6,"P143","","",null,null],[6,"N143","","",null,null],[6,"U144","","",null,null],[6,"P144","","",null,null],[6,"N144","","",null,null],[6,"U145","","",null,null],[6,"P145","","",null,null],[6,"N145","","",null,null],[6,"U146","","",null,null],[6,"P146","","",null,null],[6,"N146","","",null,null],[6,"U147","","",null,null],[6,"P147","","",null,null],[6,"N147","","",null,null],[6,"U148","","",null,null],[6,"P148","","",null,null],[6,"N148","","",null,null],[6,"U149","","",null,null],[6,"P149","","",null,null],[6,"N149","","",null,null],[6,"U150","","",null,null],[6,"P150","","",null,null],[6,"N150","","",null,null],[6,"U151","","",null,null],[6,"P151","","",null,null],[6,"N151","","",null,null],[6,"U152","","",null,null],[6,"P152","","",null,null],[6,"N152","","",null,null],[6,"U153","","",null,null],[6,"P153","","",null,null],[6,"N153","","",null,null],[6,"U154","","",null,null],[6,"P154","","",null,null],[6,"N154","","",null,null],[6,"U155","","",null,null],[6,"P155","","",null,null],[6,"N155","","",null,null],[6,"U156","","",null,null],[6,"P156","","",null,null],[6,"N156","","",null,null],[6,"U157","","",null,null],[6,"P157","","",null,null],[6,"N157","","",null,null],[6,"U158","","",null,null],[6,"P158","","",null,null],[6,"N158","","",null,null],[6,"U159","","",null,null],[6,"P159","","",null,null],[6,"N159","","",null,null],[6,"U160","","",null,null],[6,"P160","","",null,null],[6,"N160","","",null,null],[6,"U161","","",null,null],[6,"P161","","",null,null],[6,"N161","","",null,null],[6,"U162","","",null,null],[6,"P162","","",null,null],[6,"N162","","",null,null],[6,"U163","","",null,null],[6,"P163","","",null,null],[6,"N163","","",null,null],[6,"U164","","",null,null],[6,"P164","","",null,null],[6,"N164","","",null,null],[6,"U165","","",null,null],[6,"P165","","",null,null],[6,"N165","","",null,null],[6,"U166","","",null,null],[6,"P166","","",null,null],[6,"N166","","",null,null],[6,"U167","","",null,null],[6,"P167","","",null,null],[6,"N167","","",null,null],[6,"U168","","",null,null],[6,"P168","","",null,null],[6,"N168","","",null,null],[6,"U169","","",null,null],[6,"P169","","",null,null],[6,"N169","","",null,null],[6,"U170","","",null,null],[6,"P170","","",null,null],[6,"N170","","",null,null],[6,"U171","","",null,null],[6,"P171","","",null,null],[6,"N171","","",null,null],[6,"U172","","",null,null],[6,"P172","","",null,null],[6,"N172","","",null,null],[6,"U173","","",null,null],[6,"P173","","",null,null],[6,"N173","","",null,null],[6,"U174","","",null,null],[6,"P174","","",null,null],[6,"N174","","",null,null],[6,"U175","","",null,null],[6,"P175","","",null,null],[6,"N175","","",null,null],[6,"U176","","",null,null],[6,"P176","","",null,null],[6,"N176","","",null,null],[6,"U177","","",null,null],[6,"P177","","",null,null],[6,"N177","","",null,null],[6,"U178","","",null,null],[6,"P178","","",null,null],[6,"N178","","",null,null],[6,"U179","","",null,null],[6,"P179","","",null,null],[6,"N179","","",null,null],[6,"U180","","",null,null],[6,"P180","","",null,null],[6,"N180","","",null,null],[6,"U181","","",null,null],[6,"P181","","",null,null],[6,"N181","","",null,null],[6,"U182","","",null,null],[6,"P182","","",null,null],[6,"N182","","",null,null],[6,"U183","","",null,null],[6,"P183","","",null,null],[6,"N183","","",null,null],[6,"U184","","",null,null],[6,"P184","","",null,null],[6,"N184","","",null,null],[6,"U185","","",null,null],[6,"P185","","",null,null],[6,"N185","","",null,null],[6,"U186","","",null,null],[6,"P186","","",null,null],[6,"N186","","",null,null],[6,"U187","","",null,null],[6,"P187","","",null,null],[6,"N187","","",null,null],[6,"U188","","",null,null],[6,"P188","","",null,null],[6,"N188","","",null,null],[6,"U189","","",null,null],[6,"P189","","",null,null],[6,"N189","","",null,null],[6,"U190","","",null,null],[6,"P190","","",null,null],[6,"N190","","",null,null],[6,"U191","","",null,null],[6,"P191","","",null,null],[6,"N191","","",null,null],[6,"U192","","",null,null],[6,"P192","","",null,null],[6,"N192","","",null,null],[6,"U193","","",null,null],[6,"P193","","",null,null],[6,"N193","","",null,null],[6,"U194","","",null,null],[6,"P194","","",null,null],[6,"N194","","",null,null],[6,"U195","","",null,null],[6,"P195","","",null,null],[6,"N195","","",null,null],[6,"U196","","",null,null],[6,"P196","","",null,null],[6,"N196","","",null,null],[6,"U197","","",null,null],[6,"P197","","",null,null],[6,"N197","","",null,null],[6,"U198","","",null,null],[6,"P198","","",null,null],[6,"N198","","",null,null],[6,"U199","","",null,null],[6,"P199","","",null,null],[6,"N199","","",null,null],[6,"U200","","",null,null],[6,"P200","","",null,null],[6,"N200","","",null,null],[6,"U201","","",null,null],[6,"P201","","",null,null],[6,"N201","","",null,null],[6,"U202","","",null,null],[6,"P202","","",null,null],[6,"N202","","",null,null],[6,"U203","","",null,null],[6,"P203","","",null,null],[6,"N203","","",null,null],[6,"U204","","",null,null],[6,"P204","","",null,null],[6,"N204","","",null,null],[6,"U205","","",null,null],[6,"P205","","",null,null],[6,"N205","","",null,null],[6,"U206","","",null,null],[6,"P206","","",null,null],[6,"N206","","",null,null],[6,"U207","","",null,null],[6,"P207","","",null,null],[6,"N207","","",null,null],[6,"U208","","",null,null],[6,"P208","","",null,null],[6,"N208","","",null,null],[6,"U209","","",null,null],[6,"P209","","",null,null],[6,"N209","","",null,null],[6,"U210","","",null,null],[6,"P210","","",null,null],[6,"N210","","",null,null],[6,"U211","","",null,null],[6,"P211","","",null,null],[6,"N211","","",null,null],[6,"U212","","",null,null],[6,"P212","","",null,null],[6,"N212","","",null,null],[6,"U213","","",null,null],[6,"P213","","",null,null],[6,"N213","","",null,null],[6,"U214","","",null,null],[6,"P214","","",null,null],[6,"N214","","",null,null],[6,"U215","","",null,null],[6,"P215","","",null,null],[6,"N215","","",null,null],[6,"U216","","",null,null],[6,"P216","","",null,null],[6,"N216","","",null,null],[6,"U217","","",null,null],[6,"P217","","",null,null],[6,"N217","","",null,null],[6,"U218","","",null,null],[6,"P218","","",null,null],[6,"N218","","",null,null],[6,"U219","","",null,null],[6,"P219","","",null,null],[6,"N219","","",null,null],[6,"U220","","",null,null],[6,"P220","","",null,null],[6,"N220","","",null,null],[6,"U221","","",null,null],[6,"P221","","",null,null],[6,"N221","","",null,null],[6,"U222","","",null,null],[6,"P222","","",null,null],[6,"N222","","",null,null],[6,"U223","","",null,null],[6,"P223","","",null,null],[6,"N223","","",null,null],[6,"U224","","",null,null],[6,"P224","","",null,null],[6,"N224","","",null,null],[6,"U225","","",null,null],[6,"P225","","",null,null],[6,"N225","","",null,null],[6,"U226","","",null,null],[6,"P226","","",null,null],[6,"N226","","",null,null],[6,"U227","","",null,null],[6,"P227","","",null,null],[6,"N227","","",null,null],[6,"U228","","",null,null],[6,"P228","","",null,null],[6,"N228","","",null,null],[6,"U229","","",null,null],[6,"P229","","",null,null],[6,"N229","","",null,null],[6,"U230","","",null,null],[6,"P230","","",null,null],[6,"N230","","",null,null],[6,"U231","","",null,null],[6,"P231","","",null,null],[6,"N231","","",null,null],[6,"U232","","",null,null],[6,"P232","","",null,null],[6,"N232","","",null,null],[6,"U233","","",null,null],[6,"P233","","",null,null],[6,"N233","","",null,null],[6,"U234","","",null,null],[6,"P234","","",null,null],[6,"N234","","",null,null],[6,"U235","","",null,null],[6,"P235","","",null,null],[6,"N235","","",null,null],[6,"U236","","",null,null],[6,"P236","","",null,null],[6,"N236","","",null,null],[6,"U237","","",null,null],[6,"P237","","",null,null],[6,"N237","","",null,null],[6,"U238","","",null,null],[6,"P238","","",null,null],[6,"N238","","",null,null],[6,"U239","","",null,null],[6,"P239","","",null,null],[6,"N239","","",null,null],[6,"U240","","",null,null],[6,"P240","","",null,null],[6,"N240","","",null,null],[6,"U241","","",null,null],[6,"P241","","",null,null],[6,"N241","","",null,null],[6,"U242","","",null,null],[6,"P242","","",null,null],[6,"N242","","",null,null],[6,"U243","","",null,null],[6,"P243","","",null,null],[6,"N243","","",null,null],[6,"U244","","",null,null],[6,"P244","","",null,null],[6,"N244","","",null,null],[6,"U245","","",null,null],[6,"P245","","",null,null],[6,"N245","","",null,null],[6,"U246","","",null,null],[6,"P246","","",null,null],[6,"N246","","",null,null],[6,"U247","","",null,null],[6,"P247","","",null,null],[6,"N247","","",null,null],[6,"U248","","",null,null],[6,"P248","","",null,null],[6,"N248","","",null,null],[6,"U249","","",null,null],[6,"P249","","",null,null],[6,"N249","","",null,null],[6,"U250","","",null,null],[6,"P250","","",null,null],[6,"N250","","",null,null],[6,"U251","","",null,null],[6,"P251","","",null,null],[6,"N251","","",null,null],[6,"U252","","",null,null],[6,"P252","","",null,null],[6,"N252","","",null,null],[6,"U253","","",null,null],[6,"P253","","",null,null],[6,"N253","","",null,null],[6,"U254","","",null,null],[6,"P254","","",null,null],[6,"N254","","",null,null],[6,"U255","","",null,null],[6,"P255","","",null,null],[6,"N255","","",null,null],[6,"U256","","",null,null],[6,"P256","","",null,null],[6,"N256","","",null,null],[6,"U257","","",null,null],[6,"P257","","",null,null],[6,"N257","","",null,null],[6,"U258","","",null,null],[6,"P258","","",null,null],[6,"N258","","",null,null],[6,"U259","","",null,null],[6,"P259","","",null,null],[6,"N259","","",null,null],[6,"U260","","",null,null],[6,"P260","","",null,null],[6,"N260","","",null,null],[6,"U261","","",null,null],[6,"P261","","",null,null],[6,"N261","","",null,null],[6,"U262","","",null,null],[6,"P262","","",null,null],[6,"N262","","",null,null],[6,"U263","","",null,null],[6,"P263","","",null,null],[6,"N263","","",null,null],[6,"U264","","",null,null],[6,"P264","","",null,null],[6,"N264","","",null,null],[6,"U265","","",null,null],[6,"P265","","",null,null],[6,"N265","","",null,null],[6,"U266","","",null,null],[6,"P266","","",null,null],[6,"N266","","",null,null],[6,"U267","","",null,null],[6,"P267","","",null,null],[6,"N267","","",null,null],[6,"U268","","",null,null],[6,"P268","","",null,null],[6,"N268","","",null,null],[6,"U269","","",null,null],[6,"P269","","",null,null],[6,"N269","","",null,null],[6,"U270","","",null,null],[6,"P270","","",null,null],[6,"N270","","",null,null],[6,"U271","","",null,null],[6,"P271","","",null,null],[6,"N271","","",null,null],[6,"U272","","",null,null],[6,"P272","","",null,null],[6,"N272","","",null,null],[6,"U273","","",null,null],[6,"P273","","",null,null],[6,"N273","","",null,null],[6,"U274","","",null,null],[6,"P274","","",null,null],[6,"N274","","",null,null],[6,"U275","","",null,null],[6,"P275","","",null,null],[6,"N275","","",null,null],[6,"U276","","",null,null],[6,"P276","","",null,null],[6,"N276","","",null,null],[6,"U277","","",null,null],[6,"P277","","",null,null],[6,"N277","","",null,null],[6,"U278","","",null,null],[6,"P278","","",null,null],[6,"N278","","",null,null],[6,"U279","","",null,null],[6,"P279","","",null,null],[6,"N279","","",null,null],[6,"U280","","",null,null],[6,"P280","","",null,null],[6,"N280","","",null,null],[6,"U281","","",null,null],[6,"P281","","",null,null],[6,"N281","","",null,null],[6,"U282","","",null,null],[6,"P282","","",null,null],[6,"N282","","",null,null],[6,"U283","","",null,null],[6,"P283","","",null,null],[6,"N283","","",null,null],[6,"U284","","",null,null],[6,"P284","","",null,null],[6,"N284","","",null,null],[6,"U285","","",null,null],[6,"P285","","",null,null],[6,"N285","","",null,null],[6,"U286","","",null,null],[6,"P286","","",null,null],[6,"N286","","",null,null],[6,"U287","","",null,null],[6,"P287","","",null,null],[6,"N287","","",null,null],[6,"U288","","",null,null],[6,"P288","","",null,null],[6,"N288","","",null,null],[6,"U289","","",null,null],[6,"P289","","",null,null],[6,"N289","","",null,null],[6,"U290","","",null,null],[6,"P290","","",null,null],[6,"N290","","",null,null],[6,"U291","","",null,null],[6,"P291","","",null,null],[6,"N291","","",null,null],[6,"U292","","",null,null],[6,"P292","","",null,null],[6,"N292","","",null,null],[6,"U293","","",null,null],[6,"P293","","",null,null],[6,"N293","","",null,null],[6,"U294","","",null,null],[6,"P294","","",null,null],[6,"N294","","",null,null],[6,"U295","","",null,null],[6,"P295","","",null,null],[6,"N295","","",null,null],[6,"U296","","",null,null],[6,"P296","","",null,null],[6,"N296","","",null,null],[6,"U297","","",null,null],[6,"P297","","",null,null],[6,"N297","","",null,null],[6,"U298","","",null,null],[6,"P298","","",null,null],[6,"N298","","",null,null],[6,"U299","","",null,null],[6,"P299","","",null,null],[6,"N299","","",null,null],[6,"U300","","",null,null],[6,"P300","","",null,null],[6,"N300","","",null,null],[6,"U301","","",null,null],[6,"P301","","",null,null],[6,"N301","","",null,null],[6,"U302","","",null,null],[6,"P302","","",null,null],[6,"N302","","",null,null],[6,"U303","","",null,null],[6,"P303","","",null,null],[6,"N303","","",null,null],[6,"U304","","",null,null],[6,"P304","","",null,null],[6,"N304","","",null,null],[6,"U305","","",null,null],[6,"P305","","",null,null],[6,"N305","","",null,null],[6,"U306","","",null,null],[6,"P306","","",null,null],[6,"N306","","",null,null],[6,"U307","","",null,null],[6,"P307","","",null,null],[6,"N307","","",null,null],[6,"U308","","",null,null],[6,"P308","","",null,null],[6,"N308","","",null,null],[6,"U309","","",null,null],[6,"P309","","",null,null],[6,"N309","","",null,null],[6,"U310","","",null,null],[6,"P310","","",null,null],[6,"N310","","",null,null],[6,"U311","","",null,null],[6,"P311","","",null,null],[6,"N311","","",null,null],[6,"U312","","",null,null],[6,"P312","","",null,null],[6,"N312","","",null,null],[6,"U313","","",null,null],[6,"P313","","",null,null],[6,"N313","","",null,null],[6,"U314","","",null,null],[6,"P314","","",null,null],[6,"N314","","",null,null],[6,"U315","","",null,null],[6,"P315","","",null,null],[6,"N315","","",null,null],[6,"U316","","",null,null],[6,"P316","","",null,null],[6,"N316","","",null,null],[6,"U317","","",null,null],[6,"P317","","",null,null],[6,"N317","","",null,null],[6,"U318","","",null,null],[6,"P318","","",null,null],[6,"N318","","",null,null],[6,"U319","","",null,null],[6,"P319","","",null,null],[6,"N319","","",null,null],[6,"U320","","",null,null],[6,"P320","","",null,null],[6,"N320","","",null,null],[6,"U321","","",null,null],[6,"P321","","",null,null],[6,"N321","","",null,null],[6,"U322","","",null,null],[6,"P322","","",null,null],[6,"N322","","",null,null],[6,"U323","","",null,null],[6,"P323","","",null,null],[6,"N323","","",null,null],[6,"U324","","",null,null],[6,"P324","","",null,null],[6,"N324","","",null,null],[6,"U325","","",null,null],[6,"P325","","",null,null],[6,"N325","","",null,null],[6,"U326","","",null,null],[6,"P326","","",null,null],[6,"N326","","",null,null],[6,"U327","","",null,null],[6,"P327","","",null,null],[6,"N327","","",null,null],[6,"U328","","",null,null],[6,"P328","","",null,null],[6,"N328","","",null,null],[6,"U329","","",null,null],[6,"P329","","",null,null],[6,"N329","","",null,null],[6,"U330","","",null,null],[6,"P330","","",null,null],[6,"N330","","",null,null],[6,"U331","","",null,null],[6,"P331","","",null,null],[6,"N331","","",null,null],[6,"U332","","",null,null],[6,"P332","","",null,null],[6,"N332","","",null,null],[6,"U333","","",null,null],[6,"P333","","",null,null],[6,"N333","","",null,null],[6,"U334","","",null,null],[6,"P334","","",null,null],[6,"N334","","",null,null],[6,"U335","","",null,null],[6,"P335","","",null,null],[6,"N335","","",null,null],[6,"U336","","",null,null],[6,"P336","","",null,null],[6,"N336","","",null,null],[6,"U337","","",null,null],[6,"P337","","",null,null],[6,"N337","","",null,null],[6,"U338","","",null,null],[6,"P338","","",null,null],[6,"N338","","",null,null],[6,"U339","","",null,null],[6,"P339","","",null,null],[6,"N339","","",null,null],[6,"U340","","",null,null],[6,"P340","","",null,null],[6,"N340","","",null,null],[6,"U341","","",null,null],[6,"P341","","",null,null],[6,"N341","","",null,null],[6,"U342","","",null,null],[6,"P342","","",null,null],[6,"N342","","",null,null],[6,"U343","","",null,null],[6,"P343","","",null,null],[6,"N343","","",null,null],[6,"U344","","",null,null],[6,"P344","","",null,null],[6,"N344","","",null,null],[6,"U345","","",null,null],[6,"P345","","",null,null],[6,"N345","","",null,null],[6,"U346","","",null,null],[6,"P346","","",null,null],[6,"N346","","",null,null],[6,"U347","","",null,null],[6,"P347","","",null,null],[6,"N347","","",null,null],[6,"U348","","",null,null],[6,"P348","","",null,null],[6,"N348","","",null,null],[6,"U349","","",null,null],[6,"P349","","",null,null],[6,"N349","","",null,null],[6,"U350","","",null,null],[6,"P350","","",null,null],[6,"N350","","",null,null],[6,"U351","","",null,null],[6,"P351","","",null,null],[6,"N351","","",null,null],[6,"U352","","",null,null],[6,"P352","","",null,null],[6,"N352","","",null,null],[6,"U353","","",null,null],[6,"P353","","",null,null],[6,"N353","","",null,null],[6,"U354","","",null,null],[6,"P354","","",null,null],[6,"N354","","",null,null],[6,"U355","","",null,null],[6,"P355","","",null,null],[6,"N355","","",null,null],[6,"U356","","",null,null],[6,"P356","","",null,null],[6,"N356","","",null,null],[6,"U357","","",null,null],[6,"P357","","",null,null],[6,"N357","","",null,null],[6,"U358","","",null,null],[6,"P358","","",null,null],[6,"N358","","",null,null],[6,"U359","","",null,null],[6,"P359","","",null,null],[6,"N359","","",null,null],[6,"U360","","",null,null],[6,"P360","","",null,null],[6,"N360","","",null,null],[6,"U361","","",null,null],[6,"P361","","",null,null],[6,"N361","","",null,null],[6,"U362","","",null,null],[6,"P362","","",null,null],[6,"N362","","",null,null],[6,"U363","","",null,null],[6,"P363","","",null,null],[6,"N363","","",null,null],[6,"U364","","",null,null],[6,"P364","","",null,null],[6,"N364","","",null,null],[6,"U365","","",null,null],[6,"P365","","",null,null],[6,"N365","","",null,null],[6,"U366","","",null,null],[6,"P366","","",null,null],[6,"N366","","",null,null],[6,"U367","","",null,null],[6,"P367","","",null,null],[6,"N367","","",null,null],[6,"U368","","",null,null],[6,"P368","","",null,null],[6,"N368","","",null,null],[6,"U369","","",null,null],[6,"P369","","",null,null],[6,"N369","","",null,null],[6,"U370","","",null,null],[6,"P370","","",null,null],[6,"N370","","",null,null],[6,"U371","","",null,null],[6,"P371","","",null,null],[6,"N371","","",null,null],[6,"U372","","",null,null],[6,"P372","","",null,null],[6,"N372","","",null,null],[6,"U373","","",null,null],[6,"P373","","",null,null],[6,"N373","","",null,null],[6,"U374","","",null,null],[6,"P374","","",null,null],[6,"N374","","",null,null],[6,"U375","","",null,null],[6,"P375","","",null,null],[6,"N375","","",null,null],[6,"U376","","",null,null],[6,"P376","","",null,null],[6,"N376","","",null,null],[6,"U377","","",null,null],[6,"P377","","",null,null],[6,"N377","","",null,null],[6,"U378","","",null,null],[6,"P378","","",null,null],[6,"N378","","",null,null],[6,"U379","","",null,null],[6,"P379","","",null,null],[6,"N379","","",null,null],[6,"U380","","",null,null],[6,"P380","","",null,null],[6,"N380","","",null,null],[6,"U381","","",null,null],[6,"P381","","",null,null],[6,"N381","","",null,null],[6,"U382","","",null,null],[6,"P382","","",null,null],[6,"N382","","",null,null],[6,"U383","","",null,null],[6,"P383","","",null,null],[6,"N383","","",null,null],[6,"U384","","",null,null],[6,"P384","","",null,null],[6,"N384","","",null,null],[6,"U385","","",null,null],[6,"P385","","",null,null],[6,"N385","","",null,null],[6,"U386","","",null,null],[6,"P386","","",null,null],[6,"N386","","",null,null],[6,"U387","","",null,null],[6,"P387","","",null,null],[6,"N387","","",null,null],[6,"U388","","",null,null],[6,"P388","","",null,null],[6,"N388","","",null,null],[6,"U389","","",null,null],[6,"P389","","",null,null],[6,"N389","","",null,null],[6,"U390","","",null,null],[6,"P390","","",null,null],[6,"N390","","",null,null],[6,"U391","","",null,null],[6,"P391","","",null,null],[6,"N391","","",null,null],[6,"U392","","",null,null],[6,"P392","","",null,null],[6,"N392","","",null,null],[6,"U393","","",null,null],[6,"P393","","",null,null],[6,"N393","","",null,null],[6,"U394","","",null,null],[6,"P394","","",null,null],[6,"N394","","",null,null],[6,"U395","","",null,null],[6,"P395","","",null,null],[6,"N395","","",null,null],[6,"U396","","",null,null],[6,"P396","","",null,null],[6,"N396","","",null,null],[6,"U397","","",null,null],[6,"P397","","",null,null],[6,"N397","","",null,null],[6,"U398","","",null,null],[6,"P398","","",null,null],[6,"N398","","",null,null],[6,"U399","","",null,null],[6,"P399","","",null,null],[6,"N399","","",null,null],[6,"U400","","",null,null],[6,"P400","","",null,null],[6,"N400","","",null,null],[6,"U401","","",null,null],[6,"P401","","",null,null],[6,"N401","","",null,null],[6,"U402","","",null,null],[6,"P402","","",null,null],[6,"N402","","",null,null],[6,"U403","","",null,null],[6,"P403","","",null,null],[6,"N403","","",null,null],[6,"U404","","",null,null],[6,"P404","","",null,null],[6,"N404","","",null,null],[6,"U405","","",null,null],[6,"P405","","",null,null],[6,"N405","","",null,null],[6,"U406","","",null,null],[6,"P406","","",null,null],[6,"N406","","",null,null],[6,"U407","","",null,null],[6,"P407","","",null,null],[6,"N407","","",null,null],[6,"U408","","",null,null],[6,"P408","","",null,null],[6,"N408","","",null,null],[6,"U409","","",null,null],[6,"P409","","",null,null],[6,"N409","","",null,null],[6,"U410","","",null,null],[6,"P410","","",null,null],[6,"N410","","",null,null],[6,"U411","","",null,null],[6,"P411","","",null,null],[6,"N411","","",null,null],[6,"U412","","",null,null],[6,"P412","","",null,null],[6,"N412","","",null,null],[6,"U413","","",null,null],[6,"P413","","",null,null],[6,"N413","","",null,null],[6,"U414","","",null,null],[6,"P414","","",null,null],[6,"N414","","",null,null],[6,"U415","","",null,null],[6,"P415","","",null,null],[6,"N415","","",null,null],[6,"U416","","",null,null],[6,"P416","","",null,null],[6,"N416","","",null,null],[6,"U417","","",null,null],[6,"P417","","",null,null],[6,"N417","","",null,null],[6,"U418","","",null,null],[6,"P418","","",null,null],[6,"N418","","",null,null],[6,"U419","","",null,null],[6,"P419","","",null,null],[6,"N419","","",null,null],[6,"U420","","",null,null],[6,"P420","","",null,null],[6,"N420","","",null,null],[6,"U421","","",null,null],[6,"P421","","",null,null],[6,"N421","","",null,null],[6,"U422","","",null,null],[6,"P422","","",null,null],[6,"N422","","",null,null],[6,"U423","","",null,null],[6,"P423","","",null,null],[6,"N423","","",null,null],[6,"U424","","",null,null],[6,"P424","","",null,null],[6,"N424","","",null,null],[6,"U425","","",null,null],[6,"P425","","",null,null],[6,"N425","","",null,null],[6,"U426","","",null,null],[6,"P426","","",null,null],[6,"N426","","",null,null],[6,"U427","","",null,null],[6,"P427","","",null,null],[6,"N427","","",null,null],[6,"U428","","",null,null],[6,"P428","","",null,null],[6,"N428","","",null,null],[6,"U429","","",null,null],[6,"P429","","",null,null],[6,"N429","","",null,null],[6,"U430","","",null,null],[6,"P430","","",null,null],[6,"N430","","",null,null],[6,"U431","","",null,null],[6,"P431","","",null,null],[6,"N431","","",null,null],[6,"U432","","",null,null],[6,"P432","","",null,null],[6,"N432","","",null,null],[6,"U433","","",null,null],[6,"P433","","",null,null],[6,"N433","","",null,null],[6,"U434","","",null,null],[6,"P434","","",null,null],[6,"N434","","",null,null],[6,"U435","","",null,null],[6,"P435","","",null,null],[6,"N435","","",null,null],[6,"U436","","",null,null],[6,"P436","","",null,null],[6,"N436","","",null,null],[6,"U437","","",null,null],[6,"P437","","",null,null],[6,"N437","","",null,null],[6,"U438","","",null,null],[6,"P438","","",null,null],[6,"N438","","",null,null],[6,"U439","","",null,null],[6,"P439","","",null,null],[6,"N439","","",null,null],[6,"U440","","",null,null],[6,"P440","","",null,null],[6,"N440","","",null,null],[6,"U441","","",null,null],[6,"P441","","",null,null],[6,"N441","","",null,null],[6,"U442","","",null,null],[6,"P442","","",null,null],[6,"N442","","",null,null],[6,"U443","","",null,null],[6,"P443","","",null,null],[6,"N443","","",null,null],[6,"U444","","",null,null],[6,"P444","","",null,null],[6,"N444","","",null,null],[6,"U445","","",null,null],[6,"P445","","",null,null],[6,"N445","","",null,null],[6,"U446","","",null,null],[6,"P446","","",null,null],[6,"N446","","",null,null],[6,"U447","","",null,null],[6,"P447","","",null,null],[6,"N447","","",null,null],[6,"U448","","",null,null],[6,"P448","","",null,null],[6,"N448","","",null,null],[6,"U449","","",null,null],[6,"P449","","",null,null],[6,"N449","","",null,null],[6,"U450","","",null,null],[6,"P450","","",null,null],[6,"N450","","",null,null],[6,"U451","","",null,null],[6,"P451","","",null,null],[6,"N451","","",null,null],[6,"U452","","",null,null],[6,"P452","","",null,null],[6,"N452","","",null,null],[6,"U453","","",null,null],[6,"P453","","",null,null],[6,"N453","","",null,null],[6,"U454","","",null,null],[6,"P454","","",null,null],[6,"N454","","",null,null],[6,"U455","","",null,null],[6,"P455","","",null,null],[6,"N455","","",null,null],[6,"U456","","",null,null],[6,"P456","","",null,null],[6,"N456","","",null,null],[6,"U457","","",null,null],[6,"P457","","",null,null],[6,"N457","","",null,null],[6,"U458","","",null,null],[6,"P458","","",null,null],[6,"N458","","",null,null],[6,"U459","","",null,null],[6,"P459","","",null,null],[6,"N459","","",null,null],[6,"U460","","",null,null],[6,"P460","","",null,null],[6,"N460","","",null,null],[6,"U461","","",null,null],[6,"P461","","",null,null],[6,"N461","","",null,null],[6,"U462","","",null,null],[6,"P462","","",null,null],[6,"N462","","",null,null],[6,"U463","","",null,null],[6,"P463","","",null,null],[6,"N463","","",null,null],[6,"U464","","",null,null],[6,"P464","","",null,null],[6,"N464","","",null,null],[6,"U465","","",null,null],[6,"P465","","",null,null],[6,"N465","","",null,null],[6,"U466","","",null,null],[6,"P466","","",null,null],[6,"N466","","",null,null],[6,"U467","","",null,null],[6,"P467","","",null,null],[6,"N467","","",null,null],[6,"U468","","",null,null],[6,"P468","","",null,null],[6,"N468","","",null,null],[6,"U469","","",null,null],[6,"P469","","",null,null],[6,"N469","","",null,null],[6,"U470","","",null,null],[6,"P470","","",null,null],[6,"N470","","",null,null],[6,"U471","","",null,null],[6,"P471","","",null,null],[6,"N471","","",null,null],[6,"U472","","",null,null],[6,"P472","","",null,null],[6,"N472","","",null,null],[6,"U473","","",null,null],[6,"P473","","",null,null],[6,"N473","","",null,null],[6,"U474","","",null,null],[6,"P474","","",null,null],[6,"N474","","",null,null],[6,"U475","","",null,null],[6,"P475","","",null,null],[6,"N475","","",null,null],[6,"U476","","",null,null],[6,"P476","","",null,null],[6,"N476","","",null,null],[6,"U477","","",null,null],[6,"P477","","",null,null],[6,"N477","","",null,null],[6,"U478","","",null,null],[6,"P478","","",null,null],[6,"N478","","",null,null],[6,"U479","","",null,null],[6,"P479","","",null,null],[6,"N479","","",null,null],[6,"U480","","",null,null],[6,"P480","","",null,null],[6,"N480","","",null,null],[6,"U481","","",null,null],[6,"P481","","",null,null],[6,"N481","","",null,null],[6,"U482","","",null,null],[6,"P482","","",null,null],[6,"N482","","",null,null],[6,"U483","","",null,null],[6,"P483","","",null,null],[6,"N483","","",null,null],[6,"U484","","",null,null],[6,"P484","","",null,null],[6,"N484","","",null,null],[6,"U485","","",null,null],[6,"P485","","",null,null],[6,"N485","","",null,null],[6,"U486","","",null,null],[6,"P486","","",null,null],[6,"N486","","",null,null],[6,"U487","","",null,null],[6,"P487","","",null,null],[6,"N487","","",null,null],[6,"U488","","",null,null],[6,"P488","","",null,null],[6,"N488","","",null,null],[6,"U489","","",null,null],[6,"P489","","",null,null],[6,"N489","","",null,null],[6,"U490","","",null,null],[6,"P490","","",null,null],[6,"N490","","",null,null],[6,"U491","","",null,null],[6,"P491","","",null,null],[6,"N491","","",null,null],[6,"U492","","",null,null],[6,"P492","","",null,null],[6,"N492","","",null,null],[6,"U493","","",null,null],[6,"P493","","",null,null],[6,"N493","","",null,null],[6,"U494","","",null,null],[6,"P494","","",null,null],[6,"N494","","",null,null],[6,"U495","","",null,null],[6,"P495","","",null,null],[6,"N495","","",null,null],[6,"U496","","",null,null],[6,"P496","","",null,null],[6,"N496","","",null,null],[6,"U497","","",null,null],[6,"P497","","",null,null],[6,"N497","","",null,null],[6,"U498","","",null,null],[6,"P498","","",null,null],[6,"N498","","",null,null],[6,"U499","","",null,null],[6,"P499","","",null,null],[6,"N499","","",null,null],[6,"U500","","",null,null],[6,"P500","","",null,null],[6,"N500","","",null,null],[6,"U501","","",null,null],[6,"P501","","",null,null],[6,"N501","","",null,null],[6,"U502","","",null,null],[6,"P502","","",null,null],[6,"N502","","",null,null],[6,"U503","","",null,null],[6,"P503","","",null,null],[6,"N503","","",null,null],[6,"U504","","",null,null],[6,"P504","","",null,null],[6,"N504","","",null,null],[6,"U505","","",null,null],[6,"P505","","",null,null],[6,"N505","","",null,null],[6,"U506","","",null,null],[6,"P506","","",null,null],[6,"N506","","",null,null],[6,"U507","","",null,null],[6,"P507","","",null,null],[6,"N507","","",null,null],[6,"U508","","",null,null],[6,"P508","","",null,null],[6,"N508","","",null,null],[6,"U509","","",null,null],[6,"P509","","",null,null],[6,"N509","","",null,null],[6,"U510","","",null,null],[6,"P510","","",null,null],[6,"N510","","",null,null],[6,"U511","","",null,null],[6,"P511","","",null,null],[6,"N511","","",null,null],[6,"U512","","",null,null],[6,"P512","","",null,null],[6,"N512","","",null,null],[6,"U513","","",null,null],[6,"P513","","",null,null],[6,"N513","","",null,null],[6,"U514","","",null,null],[6,"P514","","",null,null],[6,"N514","","",null,null],[6,"U515","","",null,null],[6,"P515","","",null,null],[6,"N515","","",null,null],[6,"U516","","",null,null],[6,"P516","","",null,null],[6,"N516","","",null,null],[6,"U517","","",null,null],[6,"P517","","",null,null],[6,"N517","","",null,null],[6,"U518","","",null,null],[6,"P518","","",null,null],[6,"N518","","",null,null],[6,"U519","","",null,null],[6,"P519","","",null,null],[6,"N519","","",null,null],[6,"U520","","",null,null],[6,"P520","","",null,null],[6,"N520","","",null,null],[6,"U521","","",null,null],[6,"P521","","",null,null],[6,"N521","","",null,null],[6,"U522","","",null,null],[6,"P522","","",null,null],[6,"N522","","",null,null],[6,"U523","","",null,null],[6,"P523","","",null,null],[6,"N523","","",null,null],[6,"U524","","",null,null],[6,"P524","","",null,null],[6,"N524","","",null,null],[6,"U525","","",null,null],[6,"P525","","",null,null],[6,"N525","","",null,null],[6,"U526","","",null,null],[6,"P526","","",null,null],[6,"N526","","",null,null],[6,"U527","","",null,null],[6,"P527","","",null,null],[6,"N527","","",null,null],[6,"U528","","",null,null],[6,"P528","","",null,null],[6,"N528","","",null,null],[6,"U529","","",null,null],[6,"P529","","",null,null],[6,"N529","","",null,null],[6,"U530","","",null,null],[6,"P530","","",null,null],[6,"N530","","",null,null],[6,"U531","","",null,null],[6,"P531","","",null,null],[6,"N531","","",null,null],[6,"U532","","",null,null],[6,"P532","","",null,null],[6,"N532","","",null,null],[6,"U533","","",null,null],[6,"P533","","",null,null],[6,"N533","","",null,null],[6,"U534","","",null,null],[6,"P534","","",null,null],[6,"N534","","",null,null],[6,"U535","","",null,null],[6,"P535","","",null,null],[6,"N535","","",null,null],[6,"U536","","",null,null],[6,"P536","","",null,null],[6,"N536","","",null,null],[6,"U537","","",null,null],[6,"P537","","",null,null],[6,"N537","","",null,null],[6,"U538","","",null,null],[6,"P538","","",null,null],[6,"N538","","",null,null],[6,"U539","","",null,null],[6,"P539","","",null,null],[6,"N539","","",null,null],[6,"U540","","",null,null],[6,"P540","","",null,null],[6,"N540","","",null,null],[6,"U541","","",null,null],[6,"P541","","",null,null],[6,"N541","","",null,null],[6,"U542","","",null,null],[6,"P542","","",null,null],[6,"N542","","",null,null],[6,"U543","","",null,null],[6,"P543","","",null,null],[6,"N543","","",null,null],[6,"U544","","",null,null],[6,"P544","","",null,null],[6,"N544","","",null,null],[6,"U545","","",null,null],[6,"P545","","",null,null],[6,"N545","","",null,null],[6,"U546","","",null,null],[6,"P546","","",null,null],[6,"N546","","",null,null],[6,"U547","","",null,null],[6,"P547","","",null,null],[6,"N547","","",null,null],[6,"U548","","",null,null],[6,"P548","","",null,null],[6,"N548","","",null,null],[6,"U549","","",null,null],[6,"P549","","",null,null],[6,"N549","","",null,null],[6,"U550","","",null,null],[6,"P550","","",null,null],[6,"N550","","",null,null],[6,"U551","","",null,null],[6,"P551","","",null,null],[6,"N551","","",null,null],[6,"U552","","",null,null],[6,"P552","","",null,null],[6,"N552","","",null,null],[6,"U553","","",null,null],[6,"P553","","",null,null],[6,"N553","","",null,null],[6,"U554","","",null,null],[6,"P554","","",null,null],[6,"N554","","",null,null],[6,"U555","","",null,null],[6,"P555","","",null,null],[6,"N555","","",null,null],[6,"U556","","",null,null],[6,"P556","","",null,null],[6,"N556","","",null,null],[6,"U557","","",null,null],[6,"P557","","",null,null],[6,"N557","","",null,null],[6,"U558","","",null,null],[6,"P558","","",null,null],[6,"N558","","",null,null],[6,"U559","","",null,null],[6,"P559","","",null,null],[6,"N559","","",null,null],[6,"U560","","",null,null],[6,"P560","","",null,null],[6,"N560","","",null,null],[6,"U561","","",null,null],[6,"P561","","",null,null],[6,"N561","","",null,null],[6,"U562","","",null,null],[6,"P562","","",null,null],[6,"N562","","",null,null],[6,"U563","","",null,null],[6,"P563","","",null,null],[6,"N563","","",null,null],[6,"U564","","",null,null],[6,"P564","","",null,null],[6,"N564","","",null,null],[6,"U565","","",null,null],[6,"P565","","",null,null],[6,"N565","","",null,null],[6,"U566","","",null,null],[6,"P566","","",null,null],[6,"N566","","",null,null],[6,"U567","","",null,null],[6,"P567","","",null,null],[6,"N567","","",null,null],[6,"U568","","",null,null],[6,"P568","","",null,null],[6,"N568","","",null,null],[6,"U569","","",null,null],[6,"P569","","",null,null],[6,"N569","","",null,null],[6,"U570","","",null,null],[6,"P570","","",null,null],[6,"N570","","",null,null],[6,"U571","","",null,null],[6,"P571","","",null,null],[6,"N571","","",null,null],[6,"U572","","",null,null],[6,"P572","","",null,null],[6,"N572","","",null,null],[6,"U573","","",null,null],[6,"P573","","",null,null],[6,"N573","","",null,null],[6,"U574","","",null,null],[6,"P574","","",null,null],[6,"N574","","",null,null],[6,"U575","","",null,null],[6,"P575","","",null,null],[6,"N575","","",null,null],[6,"U576","","",null,null],[6,"P576","","",null,null],[6,"N576","","",null,null],[6,"U577","","",null,null],[6,"P577","","",null,null],[6,"N577","","",null,null],[6,"U578","","",null,null],[6,"P578","","",null,null],[6,"N578","","",null,null],[6,"U579","","",null,null],[6,"P579","","",null,null],[6,"N579","","",null,null],[6,"U580","","",null,null],[6,"P580","","",null,null],[6,"N580","","",null,null],[6,"U581","","",null,null],[6,"P581","","",null,null],[6,"N581","","",null,null],[6,"U582","","",null,null],[6,"P582","","",null,null],[6,"N582","","",null,null],[6,"U583","","",null,null],[6,"P583","","",null,null],[6,"N583","","",null,null],[6,"U584","","",null,null],[6,"P584","","",null,null],[6,"N584","","",null,null],[6,"U585","","",null,null],[6,"P585","","",null,null],[6,"N585","","",null,null],[6,"U586","","",null,null],[6,"P586","","",null,null],[6,"N586","","",null,null],[6,"U587","","",null,null],[6,"P587","","",null,null],[6,"N587","","",null,null],[6,"U588","","",null,null],[6,"P588","","",null,null],[6,"N588","","",null,null],[6,"U589","","",null,null],[6,"P589","","",null,null],[6,"N589","","",null,null],[6,"U590","","",null,null],[6,"P590","","",null,null],[6,"N590","","",null,null],[6,"U591","","",null,null],[6,"P591","","",null,null],[6,"N591","","",null,null],[6,"U592","","",null,null],[6,"P592","","",null,null],[6,"N592","","",null,null],[6,"U593","","",null,null],[6,"P593","","",null,null],[6,"N593","","",null,null],[6,"U594","","",null,null],[6,"P594","","",null,null],[6,"N594","","",null,null],[6,"U595","","",null,null],[6,"P595","","",null,null],[6,"N595","","",null,null],[6,"U596","","",null,null],[6,"P596","","",null,null],[6,"N596","","",null,null],[6,"U597","","",null,null],[6,"P597","","",null,null],[6,"N597","","",null,null],[6,"U598","","",null,null],[6,"P598","","",null,null],[6,"N598","","",null,null],[6,"U599","","",null,null],[6,"P599","","",null,null],[6,"N599","","",null,null],[6,"U600","","",null,null],[6,"P600","","",null,null],[6,"N600","","",null,null],[6,"U601","","",null,null],[6,"P601","","",null,null],[6,"N601","","",null,null],[6,"U602","","",null,null],[6,"P602","","",null,null],[6,"N602","","",null,null],[6,"U603","","",null,null],[6,"P603","","",null,null],[6,"N603","","",null,null],[6,"U604","","",null,null],[6,"P604","","",null,null],[6,"N604","","",null,null],[6,"U605","","",null,null],[6,"P605","","",null,null],[6,"N605","","",null,null],[6,"U606","","",null,null],[6,"P606","","",null,null],[6,"N606","","",null,null],[6,"U607","","",null,null],[6,"P607","","",null,null],[6,"N607","","",null,null],[6,"U608","","",null,null],[6,"P608","","",null,null],[6,"N608","","",null,null],[6,"U609","","",null,null],[6,"P609","","",null,null],[6,"N609","","",null,null],[6,"U610","","",null,null],[6,"P610","","",null,null],[6,"N610","","",null,null],[6,"U611","","",null,null],[6,"P611","","",null,null],[6,"N611","","",null,null],[6,"U612","","",null,null],[6,"P612","","",null,null],[6,"N612","","",null,null],[6,"U613","","",null,null],[6,"P613","","",null,null],[6,"N613","","",null,null],[6,"U614","","",null,null],[6,"P614","","",null,null],[6,"N614","","",null,null],[6,"U615","","",null,null],[6,"P615","","",null,null],[6,"N615","","",null,null],[6,"U616","","",null,null],[6,"P616","","",null,null],[6,"N616","","",null,null],[6,"U617","","",null,null],[6,"P617","","",null,null],[6,"N617","","",null,null],[6,"U618","","",null,null],[6,"P618","","",null,null],[6,"N618","","",null,null],[6,"U619","","",null,null],[6,"P619","","",null,null],[6,"N619","","",null,null],[6,"U620","","",null,null],[6,"P620","","",null,null],[6,"N620","","",null,null],[6,"U621","","",null,null],[6,"P621","","",null,null],[6,"N621","","",null,null],[6,"U622","","",null,null],[6,"P622","","",null,null],[6,"N622","","",null,null],[6,"U623","","",null,null],[6,"P623","","",null,null],[6,"N623","","",null,null],[6,"U624","","",null,null],[6,"P624","","",null,null],[6,"N624","","",null,null],[6,"U625","","",null,null],[6,"P625","","",null,null],[6,"N625","","",null,null],[6,"U626","","",null,null],[6,"P626","","",null,null],[6,"N626","","",null,null],[6,"U627","","",null,null],[6,"P627","","",null,null],[6,"N627","","",null,null],[6,"U628","","",null,null],[6,"P628","","",null,null],[6,"N628","","",null,null],[6,"U629","","",null,null],[6,"P629","","",null,null],[6,"N629","","",null,null],[6,"U630","","",null,null],[6,"P630","","",null,null],[6,"N630","","",null,null],[6,"U631","","",null,null],[6,"P631","","",null,null],[6,"N631","","",null,null],[6,"U632","","",null,null],[6,"P632","","",null,null],[6,"N632","","",null,null],[6,"U633","","",null,null],[6,"P633","","",null,null],[6,"N633","","",null,null],[6,"U634","","",null,null],[6,"P634","","",null,null],[6,"N634","","",null,null],[6,"U635","","",null,null],[6,"P635","","",null,null],[6,"N635","","",null,null],[6,"U636","","",null,null],[6,"P636","","",null,null],[6,"N636","","",null,null],[6,"U637","","",null,null],[6,"P637","","",null,null],[6,"N637","","",null,null],[6,"U638","","",null,null],[6,"P638","","",null,null],[6,"N638","","",null,null],[6,"U639","","",null,null],[6,"P639","","",null,null],[6,"N639","","",null,null],[6,"U640","","",null,null],[6,"P640","","",null,null],[6,"N640","","",null,null],[6,"U641","","",null,null],[6,"P641","","",null,null],[6,"N641","","",null,null],[6,"U642","","",null,null],[6,"P642","","",null,null],[6,"N642","","",null,null],[6,"U643","","",null,null],[6,"P643","","",null,null],[6,"N643","","",null,null],[6,"U644","","",null,null],[6,"P644","","",null,null],[6,"N644","","",null,null],[6,"U645","","",null,null],[6,"P645","","",null,null],[6,"N645","","",null,null],[6,"U646","","",null,null],[6,"P646","","",null,null],[6,"N646","","",null,null],[6,"U647","","",null,null],[6,"P647","","",null,null],[6,"N647","","",null,null],[6,"U648","","",null,null],[6,"P648","","",null,null],[6,"N648","","",null,null],[6,"U649","","",null,null],[6,"P649","","",null,null],[6,"N649","","",null,null],[6,"U650","","",null,null],[6,"P650","","",null,null],[6,"N650","","",null,null],[6,"U651","","",null,null],[6,"P651","","",null,null],[6,"N651","","",null,null],[6,"U652","","",null,null],[6,"P652","","",null,null],[6,"N652","","",null,null],[6,"U653","","",null,null],[6,"P653","","",null,null],[6,"N653","","",null,null],[6,"U654","","",null,null],[6,"P654","","",null,null],[6,"N654","","",null,null],[6,"U655","","",null,null],[6,"P655","","",null,null],[6,"N655","","",null,null],[6,"U656","","",null,null],[6,"P656","","",null,null],[6,"N656","","",null,null],[6,"U657","","",null,null],[6,"P657","","",null,null],[6,"N657","","",null,null],[6,"U658","","",null,null],[6,"P658","","",null,null],[6,"N658","","",null,null],[6,"U659","","",null,null],[6,"P659","","",null,null],[6,"N659","","",null,null],[6,"U660","","",null,null],[6,"P660","","",null,null],[6,"N660","","",null,null],[6,"U661","","",null,null],[6,"P661","","",null,null],[6,"N661","","",null,null],[6,"U662","","",null,null],[6,"P662","","",null,null],[6,"N662","","",null,null],[6,"U663","","",null,null],[6,"P663","","",null,null],[6,"N663","","",null,null],[6,"U664","","",null,null],[6,"P664","","",null,null],[6,"N664","","",null,null],[6,"U665","","",null,null],[6,"P665","","",null,null],[6,"N665","","",null,null],[6,"U666","","",null,null],[6,"P666","","",null,null],[6,"N666","","",null,null],[6,"U667","","",null,null],[6,"P667","","",null,null],[6,"N667","","",null,null],[6,"U668","","",null,null],[6,"P668","","",null,null],[6,"N668","","",null,null],[6,"U669","","",null,null],[6,"P669","","",null,null],[6,"N669","","",null,null],[6,"U670","","",null,null],[6,"P670","","",null,null],[6,"N670","","",null,null],[6,"U671","","",null,null],[6,"P671","","",null,null],[6,"N671","","",null,null],[6,"U672","","",null,null],[6,"P672","","",null,null],[6,"N672","","",null,null],[6,"U673","","",null,null],[6,"P673","","",null,null],[6,"N673","","",null,null],[6,"U674","","",null,null],[6,"P674","","",null,null],[6,"N674","","",null,null],[6,"U675","","",null,null],[6,"P675","","",null,null],[6,"N675","","",null,null],[6,"U676","","",null,null],[6,"P676","","",null,null],[6,"N676","","",null,null],[6,"U677","","",null,null],[6,"P677","","",null,null],[6,"N677","","",null,null],[6,"U678","","",null,null],[6,"P678","","",null,null],[6,"N678","","",null,null],[6,"U679","","",null,null],[6,"P679","","",null,null],[6,"N679","","",null,null],[6,"U680","","",null,null],[6,"P680","","",null,null],[6,"N680","","",null,null],[6,"U681","","",null,null],[6,"P681","","",null,null],[6,"N681","","",null,null],[6,"U682","","",null,null],[6,"P682","","",null,null],[6,"N682","","",null,null],[6,"U683","","",null,null],[6,"P683","","",null,null],[6,"N683","","",null,null],[6,"U684","","",null,null],[6,"P684","","",null,null],[6,"N684","","",null,null],[6,"U685","","",null,null],[6,"P685","","",null,null],[6,"N685","","",null,null],[6,"U686","","",null,null],[6,"P686","","",null,null],[6,"N686","","",null,null],[6,"U687","","",null,null],[6,"P687","","",null,null],[6,"N687","","",null,null],[6,"U688","","",null,null],[6,"P688","","",null,null],[6,"N688","","",null,null],[6,"U689","","",null,null],[6,"P689","","",null,null],[6,"N689","","",null,null],[6,"U690","","",null,null],[6,"P690","","",null,null],[6,"N690","","",null,null],[6,"U691","","",null,null],[6,"P691","","",null,null],[6,"N691","","",null,null],[6,"U692","","",null,null],[6,"P692","","",null,null],[6,"N692","","",null,null],[6,"U693","","",null,null],[6,"P693","","",null,null],[6,"N693","","",null,null],[6,"U694","","",null,null],[6,"P694","","",null,null],[6,"N694","","",null,null],[6,"U695","","",null,null],[6,"P695","","",null,null],[6,"N695","","",null,null],[6,"U696","","",null,null],[6,"P696","","",null,null],[6,"N696","","",null,null],[6,"U697","","",null,null],[6,"P697","","",null,null],[6,"N697","","",null,null],[6,"U698","","",null,null],[6,"P698","","",null,null],[6,"N698","","",null,null],[6,"U699","","",null,null],[6,"P699","","",null,null],[6,"N699","","",null,null],[6,"U700","","",null,null],[6,"P700","","",null,null],[6,"N700","","",null,null],[6,"U701","","",null,null],[6,"P701","","",null,null],[6,"N701","","",null,null],[6,"U702","","",null,null],[6,"P702","","",null,null],[6,"N702","","",null,null],[6,"U703","","",null,null],[6,"P703","","",null,null],[6,"N703","","",null,null],[6,"U704","","",null,null],[6,"P704","","",null,null],[6,"N704","","",null,null],[6,"U705","","",null,null],[6,"P705","","",null,null],[6,"N705","","",null,null],[6,"U706","","",null,null],[6,"P706","","",null,null],[6,"N706","","",null,null],[6,"U707","","",null,null],[6,"P707","","",null,null],[6,"N707","","",null,null],[6,"U708","","",null,null],[6,"P708","","",null,null],[6,"N708","","",null,null],[6,"U709","","",null,null],[6,"P709","","",null,null],[6,"N709","","",null,null],[6,"U710","","",null,null],[6,"P710","","",null,null],[6,"N710","","",null,null],[6,"U711","","",null,null],[6,"P711","","",null,null],[6,"N711","","",null,null],[6,"U712","","",null,null],[6,"P712","","",null,null],[6,"N712","","",null,null],[6,"U713","","",null,null],[6,"P713","","",null,null],[6,"N713","","",null,null],[6,"U714","","",null,null],[6,"P714","","",null,null],[6,"N714","","",null,null],[6,"U715","","",null,null],[6,"P715","","",null,null],[6,"N715","","",null,null],[6,"U716","","",null,null],[6,"P716","","",null,null],[6,"N716","","",null,null],[6,"U717","","",null,null],[6,"P717","","",null,null],[6,"N717","","",null,null],[6,"U718","","",null,null],[6,"P718","","",null,null],[6,"N718","","",null,null],[6,"U719","","",null,null],[6,"P719","","",null,null],[6,"N719","","",null,null],[6,"U720","","",null,null],[6,"P720","","",null,null],[6,"N720","","",null,null],[6,"U721","","",null,null],[6,"P721","","",null,null],[6,"N721","","",null,null],[6,"U722","","",null,null],[6,"P722","","",null,null],[6,"N722","","",null,null],[6,"U723","","",null,null],[6,"P723","","",null,null],[6,"N723","","",null,null],[6,"U724","","",null,null],[6,"P724","","",null,null],[6,"N724","","",null,null],[6,"U725","","",null,null],[6,"P725","","",null,null],[6,"N725","","",null,null],[6,"U726","","",null,null],[6,"P726","","",null,null],[6,"N726","","",null,null],[6,"U727","","",null,null],[6,"P727","","",null,null],[6,"N727","","",null,null],[6,"U728","","",null,null],[6,"P728","","",null,null],[6,"N728","","",null,null],[6,"U729","","",null,null],[6,"P729","","",null,null],[6,"N729","","",null,null],[6,"U730","","",null,null],[6,"P730","","",null,null],[6,"N730","","",null,null],[6,"U731","","",null,null],[6,"P731","","",null,null],[6,"N731","","",null,null],[6,"U732","","",null,null],[6,"P732","","",null,null],[6,"N732","","",null,null],[6,"U733","","",null,null],[6,"P733","","",null,null],[6,"N733","","",null,null],[6,"U734","","",null,null],[6,"P734","","",null,null],[6,"N734","","",null,null],[6,"U735","","",null,null],[6,"P735","","",null,null],[6,"N735","","",null,null],[6,"U736","","",null,null],[6,"P736","","",null,null],[6,"N736","","",null,null],[6,"U737","","",null,null],[6,"P737","","",null,null],[6,"N737","","",null,null],[6,"U738","","",null,null],[6,"P738","","",null,null],[6,"N738","","",null,null],[6,"U739","","",null,null],[6,"P739","","",null,null],[6,"N739","","",null,null],[6,"U740","","",null,null],[6,"P740","","",null,null],[6,"N740","","",null,null],[6,"U741","","",null,null],[6,"P741","","",null,null],[6,"N741","","",null,null],[6,"U742","","",null,null],[6,"P742","","",null,null],[6,"N742","","",null,null],[6,"U743","","",null,null],[6,"P743","","",null,null],[6,"N743","","",null,null],[6,"U744","","",null,null],[6,"P744","","",null,null],[6,"N744","","",null,null],[6,"U745","","",null,null],[6,"P745","","",null,null],[6,"N745","","",null,null],[6,"U746","","",null,null],[6,"P746","","",null,null],[6,"N746","","",null,null],[6,"U747","","",null,null],[6,"P747","","",null,null],[6,"N747","","",null,null],[6,"U748","","",null,null],[6,"P748","","",null,null],[6,"N748","","",null,null],[6,"U749","","",null,null],[6,"P749","","",null,null],[6,"N749","","",null,null],[6,"U750","","",null,null],[6,"P750","","",null,null],[6,"N750","","",null,null],[6,"U751","","",null,null],[6,"P751","","",null,null],[6,"N751","","",null,null],[6,"U752","","",null,null],[6,"P752","","",null,null],[6,"N752","","",null,null],[6,"U753","","",null,null],[6,"P753","","",null,null],[6,"N753","","",null,null],[6,"U754","","",null,null],[6,"P754","","",null,null],[6,"N754","","",null,null],[6,"U755","","",null,null],[6,"P755","","",null,null],[6,"N755","","",null,null],[6,"U756","","",null,null],[6,"P756","","",null,null],[6,"N756","","",null,null],[6,"U757","","",null,null],[6,"P757","","",null,null],[6,"N757","","",null,null],[6,"U758","","",null,null],[6,"P758","","",null,null],[6,"N758","","",null,null],[6,"U759","","",null,null],[6,"P759","","",null,null],[6,"N759","","",null,null],[6,"U760","","",null,null],[6,"P760","","",null,null],[6,"N760","","",null,null],[6,"U761","","",null,null],[6,"P761","","",null,null],[6,"N761","","",null,null],[6,"U762","","",null,null],[6,"P762","","",null,null],[6,"N762","","",null,null],[6,"U763","","",null,null],[6,"P763","","",null,null],[6,"N763","","",null,null],[6,"U764","","",null,null],[6,"P764","","",null,null],[6,"N764","","",null,null],[6,"U765","","",null,null],[6,"P765","","",null,null],[6,"N765","","",null,null],[6,"U766","","",null,null],[6,"P766","","",null,null],[6,"N766","","",null,null],[6,"U767","","",null,null],[6,"P767","","",null,null],[6,"N767","","",null,null],[6,"U768","","",null,null],[6,"P768","","",null,null],[6,"N768","","",null,null],[6,"U769","","",null,null],[6,"P769","","",null,null],[6,"N769","","",null,null],[6,"U770","","",null,null],[6,"P770","","",null,null],[6,"N770","","",null,null],[6,"U771","","",null,null],[6,"P771","","",null,null],[6,"N771","","",null,null],[6,"U772","","",null,null],[6,"P772","","",null,null],[6,"N772","","",null,null],[6,"U773","","",null,null],[6,"P773","","",null,null],[6,"N773","","",null,null],[6,"U774","","",null,null],[6,"P774","","",null,null],[6,"N774","","",null,null],[6,"U775","","",null,null],[6,"P775","","",null,null],[6,"N775","","",null,null],[6,"U776","","",null,null],[6,"P776","","",null,null],[6,"N776","","",null,null],[6,"U777","","",null,null],[6,"P777","","",null,null],[6,"N777","","",null,null],[6,"U778","","",null,null],[6,"P778","","",null,null],[6,"N778","","",null,null],[6,"U779","","",null,null],[6,"P779","","",null,null],[6,"N779","","",null,null],[6,"U780","","",null,null],[6,"P780","","",null,null],[6,"N780","","",null,null],[6,"U781","","",null,null],[6,"P781","","",null,null],[6,"N781","","",null,null],[6,"U782","","",null,null],[6,"P782","","",null,null],[6,"N782","","",null,null],[6,"U783","","",null,null],[6,"P783","","",null,null],[6,"N783","","",null,null],[6,"U784","","",null,null],[6,"P784","","",null,null],[6,"N784","","",null,null],[6,"U785","","",null,null],[6,"P785","","",null,null],[6,"N785","","",null,null],[6,"U786","","",null,null],[6,"P786","","",null,null],[6,"N786","","",null,null],[6,"U787","","",null,null],[6,"P787","","",null,null],[6,"N787","","",null,null],[6,"U788","","",null,null],[6,"P788","","",null,null],[6,"N788","","",null,null],[6,"U789","","",null,null],[6,"P789","","",null,null],[6,"N789","","",null,null],[6,"U790","","",null,null],[6,"P790","","",null,null],[6,"N790","","",null,null],[6,"U791","","",null,null],[6,"P791","","",null,null],[6,"N791","","",null,null],[6,"U792","","",null,null],[6,"P792","","",null,null],[6,"N792","","",null,null],[6,"U793","","",null,null],[6,"P793","","",null,null],[6,"N793","","",null,null],[6,"U794","","",null,null],[6,"P794","","",null,null],[6,"N794","","",null,null],[6,"U795","","",null,null],[6,"P795","","",null,null],[6,"N795","","",null,null],[6,"U796","","",null,null],[6,"P796","","",null,null],[6,"N796","","",null,null],[6,"U797","","",null,null],[6,"P797","","",null,null],[6,"N797","","",null,null],[6,"U798","","",null,null],[6,"P798","","",null,null],[6,"N798","","",null,null],[6,"U799","","",null,null],[6,"P799","","",null,null],[6,"N799","","",null,null],[6,"U800","","",null,null],[6,"P800","","",null,null],[6,"N800","","",null,null],[6,"U801","","",null,null],[6,"P801","","",null,null],[6,"N801","","",null,null],[6,"U802","","",null,null],[6,"P802","","",null,null],[6,"N802","","",null,null],[6,"U803","","",null,null],[6,"P803","","",null,null],[6,"N803","","",null,null],[6,"U804","","",null,null],[6,"P804","","",null,null],[6,"N804","","",null,null],[6,"U805","","",null,null],[6,"P805","","",null,null],[6,"N805","","",null,null],[6,"U806","","",null,null],[6,"P806","","",null,null],[6,"N806","","",null,null],[6,"U807","","",null,null],[6,"P807","","",null,null],[6,"N807","","",null,null],[6,"U808","","",null,null],[6,"P808","","",null,null],[6,"N808","","",null,null],[6,"U809","","",null,null],[6,"P809","","",null,null],[6,"N809","","",null,null],[6,"U810","","",null,null],[6,"P810","","",null,null],[6,"N810","","",null,null],[6,"U811","","",null,null],[6,"P811","","",null,null],[6,"N811","","",null,null],[6,"U812","","",null,null],[6,"P812","","",null,null],[6,"N812","","",null,null],[6,"U813","","",null,null],[6,"P813","","",null,null],[6,"N813","","",null,null],[6,"U814","","",null,null],[6,"P814","","",null,null],[6,"N814","","",null,null],[6,"U815","","",null,null],[6,"P815","","",null,null],[6,"N815","","",null,null],[6,"U816","","",null,null],[6,"P816","","",null,null],[6,"N816","","",null,null],[6,"U817","","",null,null],[6,"P817","","",null,null],[6,"N817","","",null,null],[6,"U818","","",null,null],[6,"P818","","",null,null],[6,"N818","","",null,null],[6,"U819","","",null,null],[6,"P819","","",null,null],[6,"N819","","",null,null],[6,"U820","","",null,null],[6,"P820","","",null,null],[6,"N820","","",null,null],[6,"U821","","",null,null],[6,"P821","","",null,null],[6,"N821","","",null,null],[6,"U822","","",null,null],[6,"P822","","",null,null],[6,"N822","","",null,null],[6,"U823","","",null,null],[6,"P823","","",null,null],[6,"N823","","",null,null],[6,"U824","","",null,null],[6,"P824","","",null,null],[6,"N824","","",null,null],[6,"U825","","",null,null],[6,"P825","","",null,null],[6,"N825","","",null,null],[6,"U826","","",null,null],[6,"P826","","",null,null],[6,"N826","","",null,null],[6,"U827","","",null,null],[6,"P827","","",null,null],[6,"N827","","",null,null],[6,"U828","","",null,null],[6,"P828","","",null,null],[6,"N828","","",null,null],[6,"U829","","",null,null],[6,"P829","","",null,null],[6,"N829","","",null,null],[6,"U830","","",null,null],[6,"P830","","",null,null],[6,"N830","","",null,null],[6,"U831","","",null,null],[6,"P831","","",null,null],[6,"N831","","",null,null],[6,"U832","","",null,null],[6,"P832","","",null,null],[6,"N832","","",null,null],[6,"U833","","",null,null],[6,"P833","","",null,null],[6,"N833","","",null,null],[6,"U834","","",null,null],[6,"P834","","",null,null],[6,"N834","","",null,null],[6,"U835","","",null,null],[6,"P835","","",null,null],[6,"N835","","",null,null],[6,"U836","","",null,null],[6,"P836","","",null,null],[6,"N836","","",null,null],[6,"U837","","",null,null],[6,"P837","","",null,null],[6,"N837","","",null,null],[6,"U838","","",null,null],[6,"P838","","",null,null],[6,"N838","","",null,null],[6,"U839","","",null,null],[6,"P839","","",null,null],[6,"N839","","",null,null],[6,"U840","","",null,null],[6,"P840","","",null,null],[6,"N840","","",null,null],[6,"U841","","",null,null],[6,"P841","","",null,null],[6,"N841","","",null,null],[6,"U842","","",null,null],[6,"P842","","",null,null],[6,"N842","","",null,null],[6,"U843","","",null,null],[6,"P843","","",null,null],[6,"N843","","",null,null],[6,"U844","","",null,null],[6,"P844","","",null,null],[6,"N844","","",null,null],[6,"U845","","",null,null],[6,"P845","","",null,null],[6,"N845","","",null,null],[6,"U846","","",null,null],[6,"P846","","",null,null],[6,"N846","","",null,null],[6,"U847","","",null,null],[6,"P847","","",null,null],[6,"N847","","",null,null],[6,"U848","","",null,null],[6,"P848","","",null,null],[6,"N848","","",null,null],[6,"U849","","",null,null],[6,"P849","","",null,null],[6,"N849","","",null,null],[6,"U850","","",null,null],[6,"P850","","",null,null],[6,"N850","","",null,null],[6,"U851","","",null,null],[6,"P851","","",null,null],[6,"N851","","",null,null],[6,"U852","","",null,null],[6,"P852","","",null,null],[6,"N852","","",null,null],[6,"U853","","",null,null],[6,"P853","","",null,null],[6,"N853","","",null,null],[6,"U854","","",null,null],[6,"P854","","",null,null],[6,"N854","","",null,null],[6,"U855","","",null,null],[6,"P855","","",null,null],[6,"N855","","",null,null],[6,"U856","","",null,null],[6,"P856","","",null,null],[6,"N856","","",null,null],[6,"U857","","",null,null],[6,"P857","","",null,null],[6,"N857","","",null,null],[6,"U858","","",null,null],[6,"P858","","",null,null],[6,"N858","","",null,null],[6,"U859","","",null,null],[6,"P859","","",null,null],[6,"N859","","",null,null],[6,"U860","","",null,null],[6,"P860","","",null,null],[6,"N860","","",null,null],[6,"U861","","",null,null],[6,"P861","","",null,null],[6,"N861","","",null,null],[6,"U862","","",null,null],[6,"P862","","",null,null],[6,"N862","","",null,null],[6,"U863","","",null,null],[6,"P863","","",null,null],[6,"N863","","",null,null],[6,"U864","","",null,null],[6,"P864","","",null,null],[6,"N864","","",null,null],[6,"U865","","",null,null],[6,"P865","","",null,null],[6,"N865","","",null,null],[6,"U866","","",null,null],[6,"P866","","",null,null],[6,"N866","","",null,null],[6,"U867","","",null,null],[6,"P867","","",null,null],[6,"N867","","",null,null],[6,"U868","","",null,null],[6,"P868","","",null,null],[6,"N868","","",null,null],[6,"U869","","",null,null],[6,"P869","","",null,null],[6,"N869","","",null,null],[6,"U870","","",null,null],[6,"P870","","",null,null],[6,"N870","","",null,null],[6,"U871","","",null,null],[6,"P871","","",null,null],[6,"N871","","",null,null],[6,"U872","","",null,null],[6,"P872","","",null,null],[6,"N872","","",null,null],[6,"U873","","",null,null],[6,"P873","","",null,null],[6,"N873","","",null,null],[6,"U874","","",null,null],[6,"P874","","",null,null],[6,"N874","","",null,null],[6,"U875","","",null,null],[6,"P875","","",null,null],[6,"N875","","",null,null],[6,"U876","","",null,null],[6,"P876","","",null,null],[6,"N876","","",null,null],[6,"U877","","",null,null],[6,"P877","","",null,null],[6,"N877","","",null,null],[6,"U878","","",null,null],[6,"P878","","",null,null],[6,"N878","","",null,null],[6,"U879","","",null,null],[6,"P879","","",null,null],[6,"N879","","",null,null],[6,"U880","","",null,null],[6,"P880","","",null,null],[6,"N880","","",null,null],[6,"U881","","",null,null],[6,"P881","","",null,null],[6,"N881","","",null,null],[6,"U882","","",null,null],[6,"P882","","",null,null],[6,"N882","","",null,null],[6,"U883","","",null,null],[6,"P883","","",null,null],[6,"N883","","",null,null],[6,"U884","","",null,null],[6,"P884","","",null,null],[6,"N884","","",null,null],[6,"U885","","",null,null],[6,"P885","","",null,null],[6,"N885","","",null,null],[6,"U886","","",null,null],[6,"P886","","",null,null],[6,"N886","","",null,null],[6,"U887","","",null,null],[6,"P887","","",null,null],[6,"N887","","",null,null],[6,"U888","","",null,null],[6,"P888","","",null,null],[6,"N888","","",null,null],[6,"U889","","",null,null],[6,"P889","","",null,null],[6,"N889","","",null,null],[6,"U890","","",null,null],[6,"P890","","",null,null],[6,"N890","","",null,null],[6,"U891","","",null,null],[6,"P891","","",null,null],[6,"N891","","",null,null],[6,"U892","","",null,null],[6,"P892","","",null,null],[6,"N892","","",null,null],[6,"U893","","",null,null],[6,"P893","","",null,null],[6,"N893","","",null,null],[6,"U894","","",null,null],[6,"P894","","",null,null],[6,"N894","","",null,null],[6,"U895","","",null,null],[6,"P895","","",null,null],[6,"N895","","",null,null],[6,"U896","","",null,null],[6,"P896","","",null,null],[6,"N896","","",null,null],[6,"U897","","",null,null],[6,"P897","","",null,null],[6,"N897","","",null,null],[6,"U898","","",null,null],[6,"P898","","",null,null],[6,"N898","","",null,null],[6,"U899","","",null,null],[6,"P899","","",null,null],[6,"N899","","",null,null],[6,"U900","","",null,null],[6,"P900","","",null,null],[6,"N900","","",null,null],[6,"U901","","",null,null],[6,"P901","","",null,null],[6,"N901","","",null,null],[6,"U902","","",null,null],[6,"P902","","",null,null],[6,"N902","","",null,null],[6,"U903","","",null,null],[6,"P903","","",null,null],[6,"N903","","",null,null],[6,"U904","","",null,null],[6,"P904","","",null,null],[6,"N904","","",null,null],[6,"U905","","",null,null],[6,"P905","","",null,null],[6,"N905","","",null,null],[6,"U906","","",null,null],[6,"P906","","",null,null],[6,"N906","","",null,null],[6,"U907","","",null,null],[6,"P907","","",null,null],[6,"N907","","",null,null],[6,"U908","","",null,null],[6,"P908","","",null,null],[6,"N908","","",null,null],[6,"U909","","",null,null],[6,"P909","","",null,null],[6,"N909","","",null,null],[6,"U910","","",null,null],[6,"P910","","",null,null],[6,"N910","","",null,null],[6,"U911","","",null,null],[6,"P911","","",null,null],[6,"N911","","",null,null],[6,"U912","","",null,null],[6,"P912","","",null,null],[6,"N912","","",null,null],[6,"U913","","",null,null],[6,"P913","","",null,null],[6,"N913","","",null,null],[6,"U914","","",null,null],[6,"P914","","",null,null],[6,"N914","","",null,null],[6,"U915","","",null,null],[6,"P915","","",null,null],[6,"N915","","",null,null],[6,"U916","","",null,null],[6,"P916","","",null,null],[6,"N916","","",null,null],[6,"U917","","",null,null],[6,"P917","","",null,null],[6,"N917","","",null,null],[6,"U918","","",null,null],[6,"P918","","",null,null],[6,"N918","","",null,null],[6,"U919","","",null,null],[6,"P919","","",null,null],[6,"N919","","",null,null],[6,"U920","","",null,null],[6,"P920","","",null,null],[6,"N920","","",null,null],[6,"U921","","",null,null],[6,"P921","","",null,null],[6,"N921","","",null,null],[6,"U922","","",null,null],[6,"P922","","",null,null],[6,"N922","","",null,null],[6,"U923","","",null,null],[6,"P923","","",null,null],[6,"N923","","",null,null],[6,"U924","","",null,null],[6,"P924","","",null,null],[6,"N924","","",null,null],[6,"U925","","",null,null],[6,"P925","","",null,null],[6,"N925","","",null,null],[6,"U926","","",null,null],[6,"P926","","",null,null],[6,"N926","","",null,null],[6,"U927","","",null,null],[6,"P927","","",null,null],[6,"N927","","",null,null],[6,"U928","","",null,null],[6,"P928","","",null,null],[6,"N928","","",null,null],[6,"U929","","",null,null],[6,"P929","","",null,null],[6,"N929","","",null,null],[6,"U930","","",null,null],[6,"P930","","",null,null],[6,"N930","","",null,null],[6,"U931","","",null,null],[6,"P931","","",null,null],[6,"N931","","",null,null],[6,"U932","","",null,null],[6,"P932","","",null,null],[6,"N932","","",null,null],[6,"U933","","",null,null],[6,"P933","","",null,null],[6,"N933","","",null,null],[6,"U934","","",null,null],[6,"P934","","",null,null],[6,"N934","","",null,null],[6,"U935","","",null,null],[6,"P935","","",null,null],[6,"N935","","",null,null],[6,"U936","","",null,null],[6,"P936","","",null,null],[6,"N936","","",null,null],[6,"U937","","",null,null],[6,"P937","","",null,null],[6,"N937","","",null,null],[6,"U938","","",null,null],[6,"P938","","",null,null],[6,"N938","","",null,null],[6,"U939","","",null,null],[6,"P939","","",null,null],[6,"N939","","",null,null],[6,"U940","","",null,null],[6,"P940","","",null,null],[6,"N940","","",null,null],[6,"U941","","",null,null],[6,"P941","","",null,null],[6,"N941","","",null,null],[6,"U942","","",null,null],[6,"P942","","",null,null],[6,"N942","","",null,null],[6,"U943","","",null,null],[6,"P943","","",null,null],[6,"N943","","",null,null],[6,"U944","","",null,null],[6,"P944","","",null,null],[6,"N944","","",null,null],[6,"U945","","",null,null],[6,"P945","","",null,null],[6,"N945","","",null,null],[6,"U946","","",null,null],[6,"P946","","",null,null],[6,"N946","","",null,null],[6,"U947","","",null,null],[6,"P947","","",null,null],[6,"N947","","",null,null],[6,"U948","","",null,null],[6,"P948","","",null,null],[6,"N948","","",null,null],[6,"U949","","",null,null],[6,"P949","","",null,null],[6,"N949","","",null,null],[6,"U950","","",null,null],[6,"P950","","",null,null],[6,"N950","","",null,null],[6,"U951","","",null,null],[6,"P951","","",null,null],[6,"N951","","",null,null],[6,"U952","","",null,null],[6,"P952","","",null,null],[6,"N952","","",null,null],[6,"U953","","",null,null],[6,"P953","","",null,null],[6,"N953","","",null,null],[6,"U954","","",null,null],[6,"P954","","",null,null],[6,"N954","","",null,null],[6,"U955","","",null,null],[6,"P955","","",null,null],[6,"N955","","",null,null],[6,"U956","","",null,null],[6,"P956","","",null,null],[6,"N956","","",null,null],[6,"U957","","",null,null],[6,"P957","","",null,null],[6,"N957","","",null,null],[6,"U958","","",null,null],[6,"P958","","",null,null],[6,"N958","","",null,null],[6,"U959","","",null,null],[6,"P959","","",null,null],[6,"N959","","",null,null],[6,"U960","","",null,null],[6,"P960","","",null,null],[6,"N960","","",null,null],[6,"U961","","",null,null],[6,"P961","","",null,null],[6,"N961","","",null,null],[6,"U962","","",null,null],[6,"P962","","",null,null],[6,"N962","","",null,null],[6,"U963","","",null,null],[6,"P963","","",null,null],[6,"N963","","",null,null],[6,"U964","","",null,null],[6,"P964","","",null,null],[6,"N964","","",null,null],[6,"U965","","",null,null],[6,"P965","","",null,null],[6,"N965","","",null,null],[6,"U966","","",null,null],[6,"P966","","",null,null],[6,"N966","","",null,null],[6,"U967","","",null,null],[6,"P967","","",null,null],[6,"N967","","",null,null],[6,"U968","","",null,null],[6,"P968","","",null,null],[6,"N968","","",null,null],[6,"U969","","",null,null],[6,"P969","","",null,null],[6,"N969","","",null,null],[6,"U970","","",null,null],[6,"P970","","",null,null],[6,"N970","","",null,null],[6,"U971","","",null,null],[6,"P971","","",null,null],[6,"N971","","",null,null],[6,"U972","","",null,null],[6,"P972","","",null,null],[6,"N972","","",null,null],[6,"U973","","",null,null],[6,"P973","","",null,null],[6,"N973","","",null,null],[6,"U974","","",null,null],[6,"P974","","",null,null],[6,"N974","","",null,null],[6,"U975","","",null,null],[6,"P975","","",null,null],[6,"N975","","",null,null],[6,"U976","","",null,null],[6,"P976","","",null,null],[6,"N976","","",null,null],[6,"U977","","",null,null],[6,"P977","","",null,null],[6,"N977","","",null,null],[6,"U978","","",null,null],[6,"P978","","",null,null],[6,"N978","","",null,null],[6,"U979","","",null,null],[6,"P979","","",null,null],[6,"N979","","",null,null],[6,"U980","","",null,null],[6,"P980","","",null,null],[6,"N980","","",null,null],[6,"U981","","",null,null],[6,"P981","","",null,null],[6,"N981","","",null,null],[6,"U982","","",null,null],[6,"P982","","",null,null],[6,"N982","","",null,null],[6,"U983","","",null,null],[6,"P983","","",null,null],[6,"N983","","",null,null],[6,"U984","","",null,null],[6,"P984","","",null,null],[6,"N984","","",null,null],[6,"U985","","",null,null],[6,"P985","","",null,null],[6,"N985","","",null,null],[6,"U986","","",null,null],[6,"P986","","",null,null],[6,"N986","","",null,null],[6,"U987","","",null,null],[6,"P987","","",null,null],[6,"N987","","",null,null],[6,"U988","","",null,null],[6,"P988","","",null,null],[6,"N988","","",null,null],[6,"U989","","",null,null],[6,"P989","","",null,null],[6,"N989","","",null,null],[6,"U990","","",null,null],[6,"P990","","",null,null],[6,"N990","","",null,null],[6,"U991","","",null,null],[6,"P991","","",null,null],[6,"N991","","",null,null],[6,"U992","","",null,null],[6,"P992","","",null,null],[6,"N992","","",null,null],[6,"U993","","",null,null],[6,"P993","","",null,null],[6,"N993","","",null,null],[6,"U994","","",null,null],[6,"P994","","",null,null],[6,"N994","","",null,null],[6,"U995","","",null,null],[6,"P995","","",null,null],[6,"N995","","",null,null],[6,"U996","","",null,null],[6,"P996","","",null,null],[6,"N996","","",null,null],[6,"U997","","",null,null],[6,"P997","","",null,null],[6,"N997","","",null,null],[6,"U998","","",null,null],[6,"P998","","",null,null],[6,"N998","","",null,null],[6,"U999","","",null,null],[6,"P999","","",null,null],[6,"N999","","",null,null],[6,"U1000","","",null,null],[6,"P1000","","",null,null],[6,"N1000","","",null,null],[6,"U1001","","",null,null],[6,"P1001","","",null,null],[6,"N1001","","",null,null],[6,"U1002","","",null,null],[6,"P1002","","",null,null],[6,"N1002","","",null,null],[6,"U1003","","",null,null],[6,"P1003","","",null,null],[6,"N1003","","",null,null],[6,"U1004","","",null,null],[6,"P1004","","",null,null],[6,"N1004","","",null,null],[6,"U1005","","",null,null],[6,"P1005","","",null,null],[6,"N1005","","",null,null],[6,"U1006","","",null,null],[6,"P1006","","",null,null],[6,"N1006","","",null,null],[6,"U1007","","",null,null],[6,"P1007","","",null,null],[6,"N1007","","",null,null],[6,"U1008","","",null,null],[6,"P1008","","",null,null],[6,"N1008","","",null,null],[6,"U1009","","",null,null],[6,"P1009","","",null,null],[6,"N1009","","",null,null],[6,"U1010","","",null,null],[6,"P1010","","",null,null],[6,"N1010","","",null,null],[6,"U1011","","",null,null],[6,"P1011","","",null,null],[6,"N1011","","",null,null],[6,"U1012","","",null,null],[6,"P1012","","",null,null],[6,"N1012","","",null,null],[6,"U1013","","",null,null],[6,"P1013","","",null,null],[6,"N1013","","",null,null],[6,"U1014","","",null,null],[6,"P1014","","",null,null],[6,"N1014","","",null,null],[6,"U1015","","",null,null],[6,"P1015","","",null,null],[6,"N1015","","",null,null],[6,"U1016","","",null,null],[6,"P1016","","",null,null],[6,"N1016","","",null,null],[6,"U1017","","",null,null],[6,"P1017","","",null,null],[6,"N1017","","",null,null],[6,"U1018","","",null,null],[6,"P1018","","",null,null],[6,"N1018","","",null,null],[6,"U1019","","",null,null],[6,"P1019","","",null,null],[6,"N1019","","",null,null],[6,"U1020","","",null,null],[6,"P1020","","",null,null],[6,"N1020","","",null,null],[6,"U1021","","",null,null],[6,"P1021","","",null,null],[6,"N1021","","",null,null],[6,"U1022","","",null,null],[6,"P1022","","",null,null],[6,"N1022","","",null,null],[6,"U1023","","",null,null],[6,"P1023","","",null,null],[6,"N1023","","",null,null],[6,"U1024","","",null,null],[6,"P1024","","",null,null],[6,"N1024","","",null,null],[6,"U2048","","",null,null],[6,"P2048","","",null,null],[6,"N2048","","",null,null],[6,"U4096","","",null,null],[6,"P4096","","",null,null],[6,"N4096","","",null,null],[6,"U8192","","",null,null],[6,"P8192","","",null,null],[6,"N8192","","",null,null],[6,"U16384","","",null,null],[6,"P16384","","",null,null],[6,"N16384","","",null,null],[6,"U32768","","",null,null],[6,"P32768","","",null,null],[6,"N32768","","",null,null],[6,"U65536","","",null,null],[6,"P65536","","",null,null],[6,"N65536","","",null,null],[6,"U131072","","",null,null],[6,"P131072","","",null,null],[6,"N131072","","",null,null],[6,"U262144","","",null,null],[6,"P262144","","",null,null],[6,"N262144","","",null,null],[6,"U524288","","",null,null],[6,"P524288","","",null,null],[6,"N524288","","",null,null],[6,"U1048576","","",null,null],[6,"P1048576","","",null,null],[6,"N1048576","","",null,null],[6,"U2097152","","",null,null],[6,"P2097152","","",null,null],[6,"N2097152","","",null,null],[6,"U4194304","","",null,null],[6,"P4194304","","",null,null],[6,"N4194304","","",null,null],[6,"U8388608","","",null,null],[6,"P8388608","","",null,null],[6,"N8388608","","",null,null],[6,"U16777216","","",null,null],[6,"P16777216","","",null,null],[6,"N16777216","","",null,null],[6,"U33554432","","",null,null],[6,"P33554432","","",null,null],[6,"N33554432","","",null,null],[6,"U67108864","","",null,null],[6,"P67108864","","",null,null],[6,"N67108864","","",null,null],[6,"U134217728","","",null,null],[6,"P134217728","","",null,null],[6,"N134217728","","",null,null],[6,"U268435456","","",null,null],[6,"P268435456","","",null,null],[6,"N268435456","","",null,null],[6,"U536870912","","",null,null],[6,"P536870912","","",null,null],[6,"N536870912","","",null,null],[6,"U1073741824","","",null,null],[6,"P1073741824","","",null,null],[6,"N1073741824","","",null,null],[6,"U2147483648","","",null,null],[6,"P2147483648","","",null,null],[6,"N2147483648","","",null,null],[6,"U4294967296","","",null,null],[6,"P4294967296","","",null,null],[6,"N4294967296","","",null,null],[6,"U8589934592","","",null,null],[6,"P8589934592","","",null,null],[6,"N8589934592","","",null,null],[6,"U17179869184","","",null,null],[6,"P17179869184","","",null,null],[6,"N17179869184","","",null,null],[6,"U34359738368","","",null,null],[6,"P34359738368","","",null,null],[6,"N34359738368","","",null,null],[6,"U68719476736","","",null,null],[6,"P68719476736","","",null,null],[6,"N68719476736","","",null,null],[6,"U137438953472","","",null,null],[6,"P137438953472","","",null,null],[6,"N137438953472","","",null,null],[6,"U274877906944","","",null,null],[6,"P274877906944","","",null,null],[6,"N274877906944","","",null,null],[6,"U549755813888","","",null,null],[6,"P549755813888","","",null,null],[6,"N549755813888","","",null,null],[6,"U1099511627776","","",null,null],[6,"P1099511627776","","",null,null],[6,"N1099511627776","","",null,null],[6,"U2199023255552","","",null,null],[6,"P2199023255552","","",null,null],[6,"N2199023255552","","",null,null],[6,"U4398046511104","","",null,null],[6,"P4398046511104","","",null,null],[6,"N4398046511104","","",null,null],[6,"U8796093022208","","",null,null],[6,"P8796093022208","","",null,null],[6,"N8796093022208","","",null,null],[6,"U17592186044416","","",null,null],[6,"P17592186044416","","",null,null],[6,"N17592186044416","","",null,null],[6,"U35184372088832","","",null,null],[6,"P35184372088832","","",null,null],[6,"N35184372088832","","",null,null],[6,"U70368744177664","","",null,null],[6,"P70368744177664","","",null,null],[6,"N70368744177664","","",null,null],[6,"U140737488355328","","",null,null],[6,"P140737488355328","","",null,null],[6,"N140737488355328","","",null,null],[6,"U281474976710656","","",null,null],[6,"P281474976710656","","",null,null],[6,"N281474976710656","","",null,null],[6,"U562949953421312","","",null,null],[6,"P562949953421312","","",null,null],[6,"N562949953421312","","",null,null],[6,"U1125899906842624","","",null,null],[6,"P1125899906842624","","",null,null],[6,"N1125899906842624","","",null,null],[6,"U2251799813685248","","",null,null],[6,"P2251799813685248","","",null,null],[6,"N2251799813685248","","",null,null],[6,"U4503599627370496","","",null,null],[6,"P4503599627370496","","",null,null],[6,"N4503599627370496","","",null,null],[6,"U9007199254740992","","",null,null],[6,"P9007199254740992","","",null,null],[6,"N9007199254740992","","",null,null],[6,"U18014398509481984","","",null,null],[6,"P18014398509481984","","",null,null],[6,"N18014398509481984","","",null,null],[6,"U36028797018963968","","",null,null],[6,"P36028797018963968","","",null,null],[6,"N36028797018963968","","",null,null],[6,"U72057594037927936","","",null,null],[6,"P72057594037927936","","",null,null],[6,"N72057594037927936","","",null,null],[6,"U144115188075855872","","",null,null],[6,"P144115188075855872","","",null,null],[6,"N144115188075855872","","",null,null],[6,"U288230376151711744","","",null,null],[6,"P288230376151711744","","",null,null],[6,"N288230376151711744","","",null,null],[6,"U576460752303423488","","",null,null],[6,"P576460752303423488","","",null,null],[6,"N576460752303423488","","",null,null],[6,"U1152921504606846976","","",null,null],[6,"P1152921504606846976","","",null,null],[6,"N1152921504606846976","","",null,null],[6,"U2305843009213693952","","",null,null],[6,"P2305843009213693952","","",null,null],[6,"N2305843009213693952","","",null,null],[6,"U4611686018427387904","","",null,null],[6,"P4611686018427387904","","",null,null],[6,"N4611686018427387904","","",null,null],[6,"U9223372036854775808","","",null,null],[6,"U10000","","",null,null],[6,"P10000","","",null,null],[6,"N10000","","",null,null],[6,"U100000","","",null,null],[6,"P100000","","",null,null],[6,"N100000","","",null,null],[6,"U1000000","","",null,null],[6,"P1000000","","",null,null],[6,"N1000000","","",null,null],[6,"U10000000","","",null,null],[6,"P10000000","","",null,null],[6,"N10000000","","",null,null],[6,"U100000000","","",null,null],[6,"P100000000","","",null,null],[6,"N100000000","","",null,null],[6,"U1000000000","","",null,null],[6,"P1000000000","","",null,null],[6,"N1000000000","","",null,null],[6,"U10000000000","","",null,null],[6,"P10000000000","","",null,null],[6,"N10000000000","","",null,null],[6,"U100000000000","","",null,null],[6,"P100000000000","","",null,null],[6,"N100000000000","","",null,null],[6,"U1000000000000","","",null,null],[6,"P1000000000000","","",null,null],[6,"N1000000000000","","",null,null],[6,"U10000000000000","","",null,null],[6,"P10000000000000","","",null,null],[6,"N10000000000000","","",null,null],[6,"U100000000000000","","",null,null],[6,"P100000000000000","","",null,null],[6,"N100000000000000","","",null,null],[6,"U1000000000000000","","",null,null],[6,"P1000000000000000","","",null,null],[6,"N1000000000000000","","",null,null],[6,"U10000000000000000","","",null,null],[6,"P10000000000000000","","",null,null],[6,"N10000000000000000","","",null,null],[6,"U100000000000000000","","",null,null],[6,"P100000000000000000","","",null,null],[6,"N100000000000000000","","",null,null],[6,"U1000000000000000000","","",null,null],[6,"P1000000000000000000","","",null,null],[6,"N1000000000000000000","","",null,null],[6,"U10000000000000000000","","",null,null],[0,"bit","typenum","Type-level bits.",null,null],[3,"B0","typenum::bit","The type-level bit 0.",null,null],[3,"B1","","The type-level bit 1.",null,null],[11,"new","","Instantiates a singleton representing this bit.",0,[[],["b0"]]],[11,"new","","Instantiates a singleton representing this bit.",1,[[],["b1"]]],[0,"uint","typenum","Type-level unsigned integers.",null,null],[3,"UTerm","typenum::uint","The terminating type for `UInt`; it always comes after the…",null,null],[3,"UInt","","`UInt` is defined recursively, where `B` is the least…",null,null],[6,"GetBitOut","","",null,null],[6,"SetBitOut","","Alias for the result of calling `SetBit`: `SetBitOut<N, I,…",null,null],[8,"GetBit","","",null,null],[16,"Output","","",2,null],[8,"SetBit","","A type operator that, when implemented for unsigned…",null,null],[16,"Output","","",3,null],[11,"new","","Instantiates a singleton representing this unsigned integer.",4,[[],["uterm"]]],[11,"new","","Instantiates a singleton representing this unsigned integer.",5,[[],["uint"]]],[0,"int","typenum","Type-level signed integers.",null,null],[3,"PInt","typenum::int","Type-level signed integers with positive sign.",null,null],[3,"NInt","","Type-level signed integers with negative sign.",null,null],[3,"Z0","","The type-level signed integer 0.",null,null],[11,"new","","Instantiates a singleton representing this strictly…",6,[[],["pint"]]],[11,"new","","Instantiates a singleton representing this strictly…",7,[[],["nint"]]],[11,"new","","Instantiates a singleton representing the integer 0.",8,[[],["z0"]]],[0,"marker_traits","typenum","All of the marker traits used in typenum.",null,null],[8,"NonZero","typenum::marker_traits","A marker trait to designate that a type is not zero. All…",null,null],[8,"Ord","","A Marker trait for the types `Greater`, `Equal`, and `Less`.",null,null],[10,"to_ordering","","",9,[[],["ordering"]]],[8,"Bit","","The marker trait for compile time bits.",null,null],[18,"U8","","",10,null],[18,"BOOL","","",10,null],[10,"to_u8","","",10,[[],["u8"]]],[10,"to_bool","","",10,[[],["bool"]]],[8,"Unsigned","","The marker trait for compile time unsigned integers.",null,null],[18,"U8","","",11,null],[18,"U16","","",11,null],[18,"U32","","",11,null],[18,"U64","","",11,null],[18,"USIZE","","",11,null],[18,"I8","","",11,null],[18,"I16","","",11,null],[18,"I32","","",11,null],[18,"I64","","",11,null],[18,"ISIZE","","",11,null],[10,"to_u8","","",11,[[],["u8"]]],[10,"to_u16","","",11,[[],["u16"]]],[10,"to_u32","","",11,[[],["u32"]]],[10,"to_u64","","",11,[[],["u64"]]],[10,"to_usize","","",11,[[],["usize"]]],[10,"to_i8","","",11,[[],["i8"]]],[10,"to_i16","","",11,[[],["i16"]]],[10,"to_i32","","",11,[[],["i32"]]],[10,"to_i64","","",11,[[],["i64"]]],[10,"to_isize","","",11,[[],["isize"]]],[8,"Integer","","The marker trait for compile time signed integers.",null,null],[18,"I8","","",12,null],[18,"I16","","",12,null],[18,"I32","","",12,null],[18,"I64","","",12,null],[18,"ISIZE","","",12,null],[10,"to_i8","","",12,[[],["i8"]]],[10,"to_i16","","",12,[[],["i16"]]],[10,"to_i32","","",12,[[],["i32"]]],[10,"to_i64","","",12,[[],["i64"]]],[10,"to_isize","","",12,[[],["isize"]]],[8,"TypeArray","","The marker trait for type-level arrays of type-level…",null,null],[8,"PowerOfTwo","","The marker trait for type-level numbers which are a power…",null,null],[0,"type_operators","typenum","Useful type operators that are not defined in `core::ops`.",null,null],[8,"Same","typenum::type_operators","A type operator that ensures that `Rhs` is the same as…",null,null],[16,"Output","","Should always be `Self`",13,null],[8,"Abs","","A type operator that returns the absolute value.",null,null],[16,"Output","","The absolute value.",14,null],[8,"Pow","","A type operator that provides exponentiation by repeated…",null,null],[16,"Output","","The result of the exponentiation.",15,null],[10,"powi","","This function isn't used in this crate, but may be useful…",15,[[["exp"]]]],[8,"Cmp","","A type operator for comparing `Self` and `Rhs`. It…",null,null],[16,"Output","","The result of the comparison. It should only ever be one…",16,null],[8,"Len","","A type operator that gives the length of an `Array` or the…",null,null],[16,"Output","","The length as a type-level unsigned integer.",17,null],[10,"len","","This function isn't used in this crate, but may be useful…",17,[[["self"]]]],[8,"PartialDiv","","Division as a partial function. This type operator…",null,null],[16,"Output","","The type of the result of the division",18,null],[10,"partial_div","","Method for performing the division",18,[[["rhs"]]]],[8,"Min","","A type operator that returns the minimum of `Self` and…",null,null],[16,"Output","","The type of the minimum of `Self` and `Rhs`",19,null],[10,"min","","Method returning the minimum",19,[[["rhs"]]]],[8,"Max","","A type operator that returns the maximum of `Self` and…",null,null],[16,"Output","","The type of the maximum of `Self` and `Rhs`",20,null],[10,"max","","Method returning the maximum",20,[[["rhs"]]]],[8,"IsLess","","A type operator that returns `True` if `Self < Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",21,null],[10,"is_less","","Method returning `True` or `False`.",21,[[["rhs"]]]],[8,"IsEqual","","A type operator that returns `True` if `Self == Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",22,null],[10,"is_equal","","Method returning `True` or `False`.",22,[[["rhs"]]]],[8,"IsGreater","","A type operator that returns `True` if `Self > Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",23,null],[10,"is_greater","","Method returning `True` or `False`.",23,[[["rhs"]]]],[8,"IsLessOrEqual","","A type operator that returns `True` if `Self <= Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",24,null],[10,"is_less_or_equal","","Method returning `True` or `False`.",24,[[["rhs"]]]],[8,"IsNotEqual","","A type operator that returns `True` if `Self != Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",25,null],[10,"is_not_equal","","Method returning `True` or `False`.",25,[[["rhs"]]]],[8,"IsGreaterOrEqual","","A type operator that returns `True` if `Self >= Rhs`,…",null,null],[16,"Output","","The type representing either `True` or `False`",26,null],[10,"is_greater_or_equal","","Method returning `True` or `False`.",26,[[["rhs"]]]],[0,"operator_aliases","typenum","Aliases for the type operators used in this crate. Their…",null,null],[6,"And","typenum::operator_aliases","Alias for the associated type of `BitAnd`: `And<A, B> = <A…",null,null],[6,"Or","","Alias for the associated type of `BitOr`: `Or<A, B> = <A…",null,null],[6,"Xor","","Alias for the associated type of `BitXor`: `Xor<A, B> = <A…",null,null],[6,"Shleft","","Alias for the associated type of `Shl`: `Shleft<A, B> = <A…",null,null],[6,"Shright","","Alias for the associated type of `Shr`: `Shright<A, B> =…",null,null],[6,"Sum","","Alias for the associated type of `Add`: `Sum<A, B> = <A as…",null,null],[6,"Diff","","Alias for the associated type of `Sub`: `Diff<A, B> = <A…",null,null],[6,"Prod","","Alias for the associated type of `Mul`: `Prod<A, B> = <A…",null,null],[6,"Quot","","Alias for the associated type of `Div`: `Quot<A, B> = <A…",null,null],[6,"Mod","","Alias for the associated type of `Rem`: `Mod<A, B> = <A as…",null,null],[6,"PartialQuot","","Alias for the associated type of `PartialDiv`:…",null,null],[6,"Negate","","Alias for the associated type of `Neg`: `Negate<A> = <A as…",null,null],[6,"AbsVal","","Alias for the associated type of `Abs`: `AbsVal<A> = <A as…",null,null],[6,"Exp","","Alias for the associated type of `Pow`: `Exp<A, B> = <A as…",null,null],[6,"Add1","","Alias to make it easy to add 1: `Add1<A> = <A as…",null,null],[6,"Sub1","","Alias to make it easy to subtract 1: `Sub1<A> = <A as…",null,null],[6,"Square","","Alias to make it easy to square. `Square<A> = <A as…",null,null],[6,"Cube","","Alias to make it easy to cube. `Cube<A> = <Square<A> as…",null,null],[6,"Compare","","Alias for the associated type of `Cmp`: `Compare<A, B> =…",null,null],[6,"Length","","Alias for the associated type of `Len`: `Length<A> = <A as…",null,null],[6,"Minimum","","Alias for the associated type of `Min`: `Minimum<A, B> =…",null,null],[6,"Maximum","","Alias for the associated type of `Max`: `Maximum<A, B> =…",null,null],[6,"Le","","Alias for the associated type of `IsLess`: `Le<A, B> = <A…",null,null],[6,"Eq","","Alias for the associated type of `IsEqual`: `Eq<A, B> = <A…",null,null],[6,"Gr","","Alias for the associated type of `IsGreater`: `Gr<A, B> =…",null,null],[6,"GrEq","","Alias for the associated type of `IsGreaterOrEqual`:…",null,null],[6,"LeEq","","Alias for the associated type of `IsLessOrEqual`: `LeEq<A,…",null,null],[6,"NotEq","","Alias for the associated type of `IsNotEqual`: `NotEq<A,…",null,null],[0,"array","typenum","A type-level array of type-level numbers.",null,null],[3,"ATerm","typenum::array","The terminating type for type arrays.",null,null],[3,"TArr","","`TArr` is a type that acts as an array of types. It is…",null,null],[14,"op","typenum","Convenient type operations.",null,null],[14,"cmp","","A convenience macro for comparing type numbers. Use `op!`…",null,null],[14,"tarr","","Create a new type-level arrray. Only usable on Rust 1.13.0…",null,null],[14,"assert_type_eq","","Asserts that two types are the same.",null,null],[14,"assert_type","","Asserts that a type is `True`, aka `B1`.",null,null],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"into","","",27,[[],["u"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"is_less","typenum::bit","",0,[[["b"]]]],[11,"is_equal","","",0,[[["b"]]]],[11,"is_greater","","",0,[[["b"]]]],[11,"is_less_or_equal","","",0,[[["b"]]]],[11,"is_not_equal","","",0,[[["b"]]]],[11,"is_greater_or_equal","","",0,[[["b"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"is_less","","",1,[[["b"]]]],[11,"is_equal","","",1,[[["b"]]]],[11,"is_greater","","",1,[[["b"]]]],[11,"is_less_or_equal","","",1,[[["b"]]]],[11,"is_not_equal","","",1,[[["b"]]]],[11,"is_greater_or_equal","","",1,[[["b"]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"powi","typenum::uint","",4,[[["n"]]]],[11,"partial_div","","",4,[[["n"]]]],[11,"is_less","","",4,[[["b"]]]],[11,"is_equal","","",4,[[["b"]]]],[11,"is_greater","","",4,[[["b"]]]],[11,"is_less_or_equal","","",4,[[["b"]]]],[11,"is_not_equal","","",4,[[["b"]]]],[11,"is_greater_or_equal","","",4,[[["b"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"powi","","",5,[[["n"]]]],[11,"partial_div","","",5,[[["n"]]]],[11,"is_less","","",5,[[["b"]]]],[11,"is_equal","","",5,[[["b"]]]],[11,"is_greater","","",5,[[["b"]]]],[11,"is_less_or_equal","","",5,[[["b"]]]],[11,"is_not_equal","","",5,[[["b"]]]],[11,"is_greater_or_equal","","",5,[[["b"]]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"powi","typenum::int","",6,[[["n"]]]],[11,"partial_div","","",6,[[["n"]]]],[11,"is_less","","",6,[[["b"]]]],[11,"is_equal","","",6,[[["b"]]]],[11,"is_greater","","",6,[[["b"]]]],[11,"is_less_or_equal","","",6,[[["b"]]]],[11,"is_not_equal","","",6,[[["b"]]]],[11,"is_greater_or_equal","","",6,[[["b"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"powi","","",7,[[["n"]]]],[11,"partial_div","","",7,[[["n"]]]],[11,"is_less","","",7,[[["b"]]]],[11,"is_equal","","",7,[[["b"]]]],[11,"is_greater","","",7,[[["b"]]]],[11,"is_less_or_equal","","",7,[[["b"]]]],[11,"is_not_equal","","",7,[[["b"]]]],[11,"is_greater_or_equal","","",7,[[["b"]]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"powi","","",8,[[["n"]]]],[11,"partial_div","","",8,[[["n"]]]],[11,"is_less","","",8,[[["b"]]]],[11,"is_equal","","",8,[[["b"]]]],[11,"is_greater","","",8,[[["b"]]]],[11,"is_less_or_equal","","",8,[[["b"]]]],[11,"is_not_equal","","",8,[[["b"]]]],[11,"is_greater_or_equal","","",8,[[["b"]]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"partial_div","typenum::array","",30,[[["n"]]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"partial_div","","",31,[[["n"]]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"to_ordering","typenum","",27,[[],["ordering"]]],[11,"to_ordering","","",28,[[],["ordering"]]],[11,"to_ordering","","",29,[[],["ordering"]]],[11,"to_u8","typenum::bit","",0,[[],["u8"]]],[11,"to_bool","","",0,[[],["bool"]]],[11,"to_u8","","",1,[[],["u8"]]],[11,"to_bool","","",1,[[],["bool"]]],[11,"to_u8","typenum::uint","",4,[[],["u8"]]],[11,"to_u16","","",4,[[],["u16"]]],[11,"to_u32","","",4,[[],["u32"]]],[11,"to_u64","","",4,[[],["u64"]]],[11,"to_usize","","",4,[[],["usize"]]],[11,"to_i8","","",4,[[],["i8"]]],[11,"to_i16","","",4,[[],["i16"]]],[11,"to_i32","","",4,[[],["i32"]]],[11,"to_i64","","",4,[[],["i64"]]],[11,"to_isize","","",4,[[],["isize"]]],[11,"to_u8","","",5,[[],["u8"]]],[11,"to_u16","","",5,[[],["u16"]]],[11,"to_u32","","",5,[[],["u32"]]],[11,"to_u64","","",5,[[],["u64"]]],[11,"to_usize","","",5,[[],["usize"]]],[11,"to_i8","","",5,[[],["i8"]]],[11,"to_i16","","",5,[[],["i16"]]],[11,"to_i32","","",5,[[],["i32"]]],[11,"to_i64","","",5,[[],["i64"]]],[11,"to_isize","","",5,[[],["isize"]]],[11,"to_i8","typenum::int","",8,[[],["i8"]]],[11,"to_i16","","",8,[[],["i16"]]],[11,"to_i32","","",8,[[],["i32"]]],[11,"to_i64","","",8,[[],["i64"]]],[11,"to_isize","","",8,[[],["isize"]]],[11,"to_i8","","",6,[[],["i8"]]],[11,"to_i16","","",6,[[],["i16"]]],[11,"to_i32","","",6,[[],["i32"]]],[11,"to_i64","","",6,[[],["i64"]]],[11,"to_isize","","",6,[[],["isize"]]],[11,"to_i8","","",7,[[],["i8"]]],[11,"to_i16","","",7,[[],["i16"]]],[11,"to_i32","","",7,[[],["i32"]]],[11,"to_i64","","",7,[[],["i64"]]],[11,"to_isize","","",7,[[],["isize"]]],[11,"powi","","",8,[[["z0"]]]],[11,"powi","","",8,[[["pint"]]]],[11,"powi","","",8,[[["nint"]]]],[11,"powi","typenum","",32,[[["nint"]]]],[11,"powi","","",33,[[["nint",["uint"]],["uint",["b0"]]]]],[11,"powi","","",33,[[["nint",["uint"]],["uint",["b1"]]]]],[11,"powi","typenum::int","",6,[[["z0"]]]],[11,"powi","","",7,[[["z0"]]]],[11,"powi","","",6,[[["pint"]]]],[11,"powi","","",7,[[["pint",["uint"]],["uint",["b0"]]]]],[11,"powi","","",7,[[["pint",["uint"]],["uint",["b1"]]]]],[11,"len","typenum::uint","",4,[[["self"]]]],[11,"len","","",5,[[["self"]]]],[11,"len","typenum::array","",30,[[["self"]]]],[11,"len","","",31,[[["self"]]]],[11,"partial_div","typenum::uint","",4,[[["uint"]]]],[11,"partial_div","","",5,[[["uint"]]]],[11,"partial_div","typenum::array","",30,[[["rhs"]]]],[11,"partial_div","","",31,[[["rhs"]]]],[11,"min","typenum::bit","",0,[[["b0"]],["b0"]]],[11,"min","","",0,[[["b1"]],["b0"]]],[11,"min","","",1,[[["b0"]],["b0"]]],[11,"min","","",1,[[["b1"]],["b1"]]],[11,"min","typenum::uint","",4,[[["u"]]]],[11,"min","","",5,[[["ur"]]]],[11,"min","typenum::int","",8,[[["z0"]]]],[11,"min","","",8,[[["pint"]]]],[11,"min","","",8,[[["nint"]]]],[11,"min","","",6,[[["z0"]]]],[11,"min","","",7,[[["z0"]]]],[11,"min","","",6,[[["pint"]]]],[11,"min","","",7,[[["pint"]]]],[11,"min","","",6,[[["nint"]]]],[11,"min","","",7,[[["nint"]]]],[11,"max","typenum::bit","",0,[[["b0"]],["b0"]]],[11,"max","","",0,[[["b1"]],["b1"]]],[11,"max","","",1,[[["b0"]],["b1"]]],[11,"max","","",1,[[["b1"]],["b1"]]],[11,"max","typenum::uint","",4,[[["u"]]]],[11,"max","","",5,[[["ur"]]]],[11,"max","typenum::int","",8,[[["z0"]]]],[11,"max","","",8,[[["pint"]]]],[11,"max","","",8,[[["nint"]]]],[11,"max","","",6,[[["z0"]]]],[11,"max","","",7,[[["z0"]]]],[11,"max","","",6,[[["pint"]]]],[11,"max","","",7,[[["pint"]]]],[11,"max","","",6,[[["nint"]]]],[11,"max","","",7,[[["nint"]]]],[11,"fmt","typenum::bit","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum::uint","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum::int","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum::array","",30,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","typenum","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",28,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",29,[[["formatter"],["self"]],["result"]]],[11,"div","typenum::uint","",4,[[["uint"]]]],[11,"div","","",5,[[["uint"]]]],[11,"div","typenum::int","",8,[[["i"]]]],[11,"div","","",6,[[["pint"]]]],[11,"div","","",6,[[["nint"]]]],[11,"div","","",7,[[["pint"]]]],[11,"div","","",7,[[["nint"]]]],[11,"div","typenum::array","",30,[[["rhs"]]]],[11,"div","","",31,[[["rhs"]]]],[11,"rem","typenum::uint","",4,[[["uint"]]]],[11,"rem","","",5,[[["uint"]]]],[11,"rem","typenum::int","",8,[[["i"]]]],[11,"rem","","",6,[[["pint"]]]],[11,"rem","","",6,[[["nint"]]]],[11,"rem","","",7,[[["pint"]]]],[11,"rem","","",7,[[["nint"]]]],[11,"rem","typenum::array","",30,[[["rhs"]]]],[11,"rem","","",31,[[["rhs"]]]],[11,"sub","typenum::uint","",4,[[["b0"]]]],[11,"sub","","",5,[[["b0"]]]],[11,"sub","","",5,[[["b1"]]]],[11,"sub","","",5,[[["b1"]]]],[11,"sub","","",5,[[["b1"]]]],[11,"sub","","",4,[[["uterm"]]]],[11,"sub","","",5,[[["ur"]]]],[11,"sub","typenum::int","",8,[[["z0"]]]],[11,"sub","","",8,[[["pint"]]]],[11,"sub","","",8,[[["nint"]]]],[11,"sub","","",6,[[["z0"]]]],[11,"sub","","",7,[[["z0"]]]],[11,"sub","","",6,[[["nint"]]]],[11,"sub","","",7,[[["pint"]]]],[11,"sub","","",6,[[["pint"]]]],[11,"sub","","",7,[[["nint"]]]],[11,"sub","typenum::array","",30,[[["aterm"]]]],[11,"sub","","",31,[[["tarr"]]]],[11,"eq","typenum::bit","",0,[[["b0"],["self"]],["bool"]]],[11,"eq","","",1,[[["self"],["b1"]],["bool"]]],[11,"eq","typenum::uint","",4,[[["uterm"],["self"]],["bool"]]],[11,"eq","","",5,[[["uint"],["self"]],["bool"]]],[11,"ne","","",5,[[["uint"],["self"]],["bool"]]],[11,"eq","typenum::int","",6,[[["self"],["pint"]],["bool"]]],[11,"ne","","",6,[[["self"],["pint"]],["bool"]]],[11,"eq","","",7,[[["nint"],["self"]],["bool"]]],[11,"ne","","",7,[[["nint"],["self"]],["bool"]]],[11,"eq","","",8,[[["self"],["z0"]],["bool"]]],[11,"eq","typenum::array","",30,[[["self"],["aterm"]],["bool"]]],[11,"eq","","",31,[[["tarr"],["self"]],["bool"]]],[11,"ne","","",31,[[["tarr"],["self"]],["bool"]]],[11,"eq","typenum","",27,[[["greater"],["self"]],["bool"]]],[11,"eq","","",28,[[["less"],["self"]],["bool"]]],[11,"eq","","",29,[[["self"],["equal"]],["bool"]]],[11,"cmp","typenum::bit","",0,[[["b0"],["self"]],["ordering"]]],[11,"cmp","","",1,[[["self"],["b1"]],["ordering"]]],[11,"cmp","typenum::uint","",4,[[["uterm"],["self"]],["ordering"]]],[11,"cmp","","",5,[[["uint"],["self"]],["ordering"]]],[11,"cmp","typenum::int","",6,[[["self"],["pint"]],["ordering"]]],[11,"cmp","","",7,[[["nint"],["self"]],["ordering"]]],[11,"cmp","","",8,[[["self"],["z0"]],["ordering"]]],[11,"cmp","typenum::array","",30,[[["self"],["aterm"]],["ordering"]]],[11,"cmp","","",31,[[["tarr"],["self"]],["ordering"]]],[11,"cmp","typenum","",27,[[["greater"],["self"]],["ordering"]]],[11,"cmp","","",28,[[["less"],["self"]],["ordering"]]],[11,"cmp","","",29,[[["self"],["equal"]],["ordering"]]],[11,"partial_cmp","typenum::bit","",0,[[["b0"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",1,[[["self"],["b1"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","typenum::uint","",4,[[["uterm"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",5,[[["uint"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",5,[[["uint"],["self"]],["bool"]]],[11,"le","","",5,[[["uint"],["self"]],["bool"]]],[11,"gt","","",5,[[["uint"],["self"]],["bool"]]],[11,"ge","","",5,[[["uint"],["self"]],["bool"]]],[11,"partial_cmp","typenum::int","",6,[[["self"],["pint"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",6,[[["self"],["pint"]],["bool"]]],[11,"le","","",6,[[["self"],["pint"]],["bool"]]],[11,"gt","","",6,[[["self"],["pint"]],["bool"]]],[11,"ge","","",6,[[["self"],["pint"]],["bool"]]],[11,"partial_cmp","","",7,[[["nint"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",7,[[["nint"],["self"]],["bool"]]],[11,"le","","",7,[[["nint"],["self"]],["bool"]]],[11,"gt","","",7,[[["nint"],["self"]],["bool"]]],[11,"ge","","",7,[[["nint"],["self"]],["bool"]]],[11,"partial_cmp","","",8,[[["self"],["z0"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","typenum::array","",30,[[["self"],["aterm"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",31,[[["tarr"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",31,[[["tarr"],["self"]],["bool"]]],[11,"le","","",31,[[["tarr"],["self"]],["bool"]]],[11,"gt","","",31,[[["tarr"],["self"]],["bool"]]],[11,"ge","","",31,[[["tarr"],["self"]],["bool"]]],[11,"partial_cmp","typenum","",27,[[["greater"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",28,[[["less"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",29,[[["self"],["equal"]],[["ordering"],["option",["ordering"]]]]],[11,"add","typenum::uint","",4,[[["b0"]]]],[11,"add","","",5,[[["b0"]]]],[11,"add","","",4,[[["b1"]]]],[11,"add","","",5,[[["b1"]]]],[11,"add","","",5,[[["b1"]]]],[11,"add","","",4,[[["u"]]]],[11,"add","","",5,[[["uterm"]]]],[11,"add","","",5,[[["uint",["b0"]],["b0"]]]],[11,"add","","",5,[[["uint",["b1"]],["b1"]]]],[11,"add","","",5,[[["uint",["b0"]],["b0"]]]],[11,"add","","",5,[[["uint",["b1"]],["b1"]]]],[11,"add","typenum::int","",8,[[["i"]]]],[11,"add","","",6,[[["z0"]]]],[11,"add","","",7,[[["z0"]]]],[11,"add","","",6,[[["pint"]]]],[11,"add","","",7,[[["nint"]]]],[11,"add","","",6,[[["nint"]]]],[11,"add","","",7,[[["pint"]]]],[11,"add","typenum::array","",30,[[["aterm"]]]],[11,"add","","",31,[[["tarr"]]]],[11,"mul","typenum::uint","",5,[[["b0"]]]],[11,"mul","","",4,[[["b0"]]]],[11,"mul","","",4,[[["b1"]]]],[11,"mul","","",5,[[["b1"]]]],[11,"mul","","",5,[[["uterm"]]]],[11,"mul","","",4,[[["u"]]]],[11,"mul","","",5,[[["uint"]]]],[11,"mul","","",5,[[["uint"]]]],[11,"mul","typenum::int","",8,[[["i"]]]],[11,"mul","","",6,[[["z0"]]]],[11,"mul","","",7,[[["z0"]]]],[11,"mul","","",6,[[["pint"]]]],[11,"mul","","",7,[[["nint"]]]],[11,"mul","","",6,[[["nint"]]]],[11,"mul","","",7,[[["pint"]]]],[11,"mul","typenum::array","",30,[[["rhs"]]]],[11,"mul","","",31,[[["rhs"]]]],[11,"mul","typenum::int","",8,[[["aterm"]]]],[11,"mul","","",6,[[["aterm"]]]],[11,"mul","","",7,[[["aterm"]]]],[11,"mul","","",8,[[["tarr"]]]],[11,"mul","","",6,[[["tarr"]]]],[11,"mul","","",7,[[["tarr"]]]],[11,"neg","","",8,[[]]],[11,"neg","","",6,[[]]],[11,"neg","","",7,[[]]],[11,"neg","typenum::array","",30,[[]]],[11,"neg","","",31,[[]]],[11,"not","typenum::bit","",0,[[]]],[11,"not","","",1,[[]]],[11,"bitand","","",0,[[["rhs"]]]],[11,"bitand","","",1,[[["b0"]]]],[11,"bitand","","",1,[[["b1"]]]],[11,"bitand","typenum::uint","",4,[[["ur"]]]],[11,"bitand","","",5,[[["ur"]]]],[11,"bitor","typenum::bit","",0,[[["b0"]]]],[11,"bitor","","",0,[[["b1"]]]],[11,"bitor","","",1,[[["rhs"]]]],[11,"bitor","typenum::uint","",4,[[["u"]]]],[11,"bitor","","",5,[[["uterm"]]]],[11,"bitor","","",5,[[["uint",["b0"]],["b0"]]]],[11,"bitor","","",5,[[["uint",["b1"]],["b1"]]]],[11,"bitor","","",5,[[["uint",["b0"]],["b0"]]]],[11,"bitor","","",5,[[["uint",["b1"]],["b1"]]]],[11,"bitxor","typenum::bit","",0,[[["b0"]]]],[11,"bitxor","","",1,[[["b0"]]]],[11,"bitxor","","",0,[[["b1"]]]],[11,"bitxor","","",1,[[["b1"]]]],[11,"bitxor","typenum::uint","",4,[[["ur"]]]],[11,"bitxor","","",5,[[["ur"]]]],[11,"shl","","",4,[[["b0"]]]],[11,"shl","","",4,[[["b1"]]]],[11,"shl","","",5,[[["b0"]]]],[11,"shl","","",5,[[["b1"]]]],[11,"shl","","",5,[[["uterm"]]]],[11,"shl","","",4,[[["u"]]]],[11,"shl","","",5,[[["uint"]]]],[11,"shr","","",4,[[["u"]]]],[11,"shr","","",5,[[["uterm"]]]],[11,"shr","","",4,[[["b0"]]]],[11,"shr","","",4,[[["b1"]]]],[11,"shr","","",5,[[["b0"]]]],[11,"shr","","",5,[[["b1"]]]],[11,"shr","","",5,[[["uint"]]]],[11,"hash","typenum::bit","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","typenum::uint","",4,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","typenum::int","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","typenum::array","",30,[[["self"],["__h"]]]],[11,"hash","","",31,[[["self"],["__h"]]]],[11,"hash","typenum","",27,[[["self"],["__h"]]]],[11,"hash","","",28,[[["self"],["__h"]]]],[11,"hash","","",29,[[["self"],["__h"]]]],[11,"clone","typenum::bit","",0,[[["self"]],["b0"]]],[11,"clone","","",1,[[["self"]],["b1"]]],[11,"clone","typenum::uint","",4,[[["self"]],["uterm"]]],[11,"clone","","",5,[[["self"]],["uint"]]],[11,"clone","typenum::int","",6,[[["self"]],["pint"]]],[11,"clone","","",7,[[["self"]],["nint"]]],[11,"clone","","",8,[[["self"]],["z0"]]],[11,"clone","typenum::array","",30,[[["self"]],["aterm"]]],[11,"clone","","",31,[[["self"]],["tarr"]]],[11,"clone","typenum","",27,[[["self"]],["greater"]]],[11,"clone","","",28,[[["self"]],["less"]]],[11,"clone","","",29,[[["self"]],["equal"]]],[11,"default","typenum::bit","",0,[[],["b0"]]],[11,"default","","",1,[[],["b1"]]],[11,"default","typenum::uint","",4,[[],["uterm"]]],[11,"default","","",5,[[],["uint"]]],[11,"default","typenum::int","",6,[[],["pint"]]],[11,"default","","",7,[[],["nint"]]],[11,"default","","",8,[[],["z0"]]],[11,"default","typenum","",27,[[],["greater"]]],[11,"default","","",28,[[],["less"]]],[11,"default","","",29,[[],["equal"]]]],"p":[[3,"B0"],[3,"B1"],[8,"GetBit"],[8,"SetBit"],[3,"UTerm"],[3,"UInt"],[3,"PInt"],[3,"NInt"],[3,"Z0"],[8,"Ord"],[8,"Bit"],[8,"Unsigned"],[8,"Integer"],[8,"Same"],[8,"Abs"],[8,"Pow"],[8,"Cmp"],[8,"Len"],[8,"PartialDiv"],[8,"Min"],[8,"Max"],[8,"IsLess"],[8,"IsEqual"],[8,"IsGreater"],[8,"IsLessOrEqual"],[8,"IsNotEqual"],[8,"IsGreaterOrEqual"],[3,"Greater"],[3,"Less"],[3,"Equal"],[3,"ATerm"],[3,"TArr"],[6,"P1"],[6,"N1"]]};
searchIndex["x86_64"] = {"doc":"","i":[[0,"boot","x86_64","",null,null],[3,"MemoryEntry","x86_64::boot","",null,null],[12,"area","","",0,null],[12,"memory_type","","",0,null],[3,"MemoryObjectInfo","","Describes a memory region that should be represented by…",null,null],[12,"physical_address","","",1,null],[12,"virtual_address","","",1,null],[12,"num_pages","","",1,null],[12,"permissions","","",1,null],[3,"ImageInfo","","An image loaded from the filesystem by the bootloader. The…",null,null],[12,"name_length","","The name of the name in bytes. Maximum of 32.",2,null],[12,"name","","Name of the task that this image represents. Must be valid…",2,null],[12,"num_segments","","",2,null],[12,"segments","","",2,null],[12,"entry_point","","",2,null],[12,"capability_stream","","",2,null],[3,"VideoInfo","","",null,null],[12,"framebuffer_address","","",3,null],[12,"pixel_format","","",3,null],[12,"width","","",3,null],[12,"height","","",3,null],[12,"stride","","How many pixels are in each scan-line. This can be greater…",3,null],[3,"BootInfo","","This structure is placed in memory by the bootloader and a…",null,null],[12,"magic","","This should be set to `BOOT_INFO_MAGIC` by the bootloader.",4,null],[12,"memory_map","","",4,null],[12,"num_memory_map_entries","","",4,null],[12,"rsdp_address","","",4,null],[12,"num_images","","",4,null],[12,"images","","",4,null],[12,"video_info","","",4,null],[4,"MemoryType","","",null,null],[13,"UefiServices","","Memory used by the UEFI services. Cannot be used by the OS.",5,null],[13,"Conventional","","Conventional memory that can freely be used by the OS,",5,null],[13,"AcpiReclaimable","","Memory that contains ACPI tables. After the OS has parsed…",5,null],[13,"SleepPreserve","","This marks memory that the OS should preserve in the…",5,null],[13,"NonVolatileSleepPreserve","","This marks memory that the OS should preserve in the…",5,null],[13,"KernelImage","","Memory the bootloader has mapped the kernel image into.…",5,null],[13,"LoadedImage","","Memory the bootloader has mapped images its been asked to…",5,null],[13,"KernelPageTables","","Memory the bootloader has used for the page tables…",5,null],[13,"KernelHeap","","Memory the bootloader has mapped for use as the kernel…",5,null],[13,"BootInfo","","Memory used for storing the `BootInfo` by the bootloader.…",5,null],[4,"PixelFormat","","",null,null],[13,"RGB32","","Each pixel is represented by 4 bytes, with the following…",6,null],[13,"BGR32","","Each pixel is represented by 4 bytes, with the following…",6,null],[17,"BOOT_INFO_MAGIC","","",null,null],[17,"NUM_MEMORY_MAP_ENTRIES","","",null,null],[17,"NUM_IMAGES","","",null,null],[17,"NUM_SEGMENTS_PER_IMAGE","","Each initial image is expected to have a maximum of three…",null,null],[17,"MAX_CAPABILITY_BYTES_PER_IMAGE","","",null,null],[17,"MAX_NAME_BYTES","","The maximum number of bytes that the task's name can be…",null,null],[11,"add_segment","","This should only be called from the bootloader.",2,[[["self"],["memoryobjectinfo"]]]],[11,"segments","","",2,[[["self"]]]],[11,"memory_entries","","",4,[[["self"]]]],[11,"add_memory_map_entry","","This should only be called from the bootloader.",4,[[["self"],["memoryentry"]]]],[11,"images","","",4,[[["self"]]]],[11,"add_image","","This should only be called from the bootloader.",4,[[["self"],["imageinfo"]]]],[0,"hw","x86_64","",null,null],[3,"DescriptorTablePointer","x86_64::hw","",null,null],[12,"limit","","`base + limit` is the last addressable byte of the…",7,null],[12,"base","","Virtual address of the start of the descriptor table.",7,null],[0,"gdt","","",null,null],[3,"SegmentSelector","x86_64::hw::gdt","An index into the GDT, specifying a particular segment.…",null,null],[12,"0","","",8,null],[3,"CodeSegment","","",null,null],[3,"DataSegment","","",null,null],[3,"TssSegment","","",null,null],[3,"Gdt","","A GDT suitable for the kernel to use. The order of the…",null,null],[4,"PrivilegeLevel","","",null,null],[13,"Ring0","","",9,null],[13,"Ring1","","",9,null],[13,"Ring2","","",9,null],[13,"Ring3","","",9,null],[17,"KERNEL_CODE_SELECTOR","","",null,null],[17,"KERNEL_DATA_SELECTOR","","",null,null],[17,"USER_COMPAT_CODE_SELECTOR","","",null,null],[17,"USER_DATA_SELECTOR","","",null,null],[17,"USER_CODE64_SELECTOR","","",null,null],[17,"NUM_STATIC_ENTRIES","","",null,null],[17,"OFFSET_TO_FIRST_TSS","","",null,null],[17,"MAX_CPUS","","",null,null],[11,"new","","",8,[[["u16"],["privilegelevel"]],["segmentselector"]]],[11,"table_offset","","",8,[[["self"]],["u16"]]],[11,"new","","",10,[[["privilegelevel"]],["codesegment"]]],[11,"new","","",11,[[["privilegelevel"]],["datasegment"]]],[11,"empty","","",12,[[],["tsssegment"]]],[11,"new","","",12,[[["tss"],["pin",["tss"]]],["tsssegment"]]],[11,"new","","Create a `Gdt` with pre-populated code and data segments,…",13,[[],["gdt"]]],[11,"add_tss","","Add a new TSS, if there's space for it. The first TSS…",13,[[["self"],["tsssegment"]],["segmentselector"]]],[11,"load","","Load the new GDT, switch to the new `kernel_code` code…",13,[[["self"],["segmentselector"]]]],[0,"tss","x86_64::hw","",null,null],[3,"Tss","x86_64::hw::tss","Hardware task switching isn't supported on x86_64, so the…",null,null],[12,"privilege_stack_table","","",14,null],[12,"interrupt_stack_table","","",14,null],[12,"iomap_base","","",14,null],[11,"new","","",14,[[],["tss"]]],[11,"set_kernel_stack","","",14,[[["virtualaddress"],["self"]]]],[0,"idt","x86_64::hw","",null,null],[3,"IdtEntry","x86_64::hw::idt","",null,null],[3,"Idt","","",null,null],[3,"InterruptStackFrame","","",null,null],[12,"instruction_pointer","","",15,null],[12,"code_segment","","",15,null],[12,"cpu_flags","","",15,null],[12,"stack_pointer","","",15,null],[12,"stack_segment","","",15,null],[6,"HandlerFunc","","The type of a function that can be used as an interrupt…",null,null],[11,"missing","","",16,[[],["idtentry"]]],[11,"set_handler","","",16,[[["self"],["handlerfunc"],["segmentselector"]],["self"]]],[11,"set_ist_handler","","",16,[[["self"],["u8"]],["self"]]],[11,"set_privilege_level","","",16,[[["self"],["privilegelevel"]],["self"]]],[11,"empty","","",17,[[],["idt"]]],[11,"divide_error","","",17,[[["self"]],["idtentry"]]],[11,"debug_exception","","",17,[[["self"]],["idtentry"]]],[11,"nmi","","",17,[[["self"]],["idtentry"]]],[11,"breakpoint","","",17,[[["self"]],["idtentry"]]],[11,"overflow","","",17,[[["self"]],["idtentry"]]],[11,"bound_range_exceeded","","",17,[[["self"]],["idtentry"]]],[11,"invalid_opcode","","",17,[[["self"]],["idtentry"]]],[11,"device_not_available","","",17,[[["self"]],["idtentry"]]],[11,"double_fault","","",17,[[["self"]],["idtentry"]]],[11,"invalid_tss","","",17,[[["self"]],["idtentry"]]],[11,"segment_not_present","","",17,[[["self"]],["idtentry"]]],[11,"stack_segment_fault","","",17,[[["self"]],["idtentry"]]],[11,"general_protection_fault","","",17,[[["self"]],["idtentry"]]],[11,"page_fault","","",17,[[["self"]],["idtentry"]]],[11,"x87_fault","","",17,[[["self"]],["idtentry"]]],[11,"alignment_check","","",17,[[["self"]],["idtentry"]]],[11,"machine_check","","",17,[[["self"]],["idtentry"]]],[11,"simd_exception","","",17,[[["self"]],["idtentry"]]],[11,"virtualization_exception","","",17,[[["self"]],["idtentry"]]],[11,"load","","",17,[[["self"]]]],[0,"i8259_pic","x86_64::hw","",null,null],[3,"Pic","x86_64::hw::i8259_pic","",null,null],[11,"new","","",18,[[],["pic"]]],[11,"remap_and_disable","","Remap and disable the PIC. It is necessary to remap the…",18,[[["self"],["u8"]]]],[0,"local_apic","x86_64::hw","",null,null],[3,"LocalApicRegister","x86_64::hw::local_apic","Represents a register in the local APIC's configuration…",null,null],[3,"LocalApic","","Methods on this type operate on the local APIC of the…",null,null],[11,"read","","Read from this register. Unsafe because not all registers…",19,[[["self"]],["u32"]]],[11,"write","","Write to this register. Unsafe because not all registers…",19,[[["self"],["u32"]]]],[11,"enable","","",20,[[["u8"]]]],[11,"enable_timer","","Set the local APIC timer to interrupt every `duration` ms,…",20,[[["u32"],["u8"]]]],[11,"register","","",20,[[["usize"]],["localapicregister"]]],[11,"send_eoi","","Send an End Of Interrupt to the local APIC. This should be…",20,[[]]],[0,"cpu","x86_64::hw","",null,null],[3,"SupportedFeatures","x86_64::hw::cpu","",null,null],[12,"xsave","","",21,null],[3,"CpuInfo","","Describes information we know about the system we're…",null,null],[12,"max_supported_standard_level","","",22,null],[12,"vendor","","",22,null],[12,"model_info","","",22,null],[12,"supported_features","","",22,null],[12,"hypervisor_info","","Information about the hypervisor we're running under, if…",22,null],[3,"ModelInfo","","",null,null],[12,"family","","",23,null],[12,"model","","",23,null],[12,"stepping","","",23,null],[12,"extended_family","","",23,null],[12,"extended_model","","",23,null],[3,"HypervisorInfo","","",null,null],[4,"Vendor","","",null,null],[13,"Unknown","","",24,null],[13,"Intel","","",24,null],[13,"Amd","","",24,null],[4,"Microarch","","Intel and AMD microarchitectures we can expect processors…",null,null],[13,"Nehalem","","",25,null],[13,"Westmere","","",25,null],[13,"SandyBridge","","",25,null],[13,"IvyBridge","","",25,null],[13,"Haswell","","",25,null],[13,"Broadwell","","",25,null],[13,"Skylake","","",25,null],[13,"KabyLake","","",25,null],[13,"CoffeeLake","","",25,null],[13,"CannonLake","","",25,null],[13,"WhiskeyLake","","",25,null],[13,"AmberLake","","",25,null],[13,"Bulldozer","","",25,null],[13,"Jaguar","","",25,null],[13,"Zen","","",25,null],[4,"HypervisorVendor","","",null,null],[13,"Unknown","","",26,null],[13,"Kvm","","",26,null],[11,"new","","",22,[[],["cpuinfo"]]],[11,"microarch","","",22,[[["self"]],[["option",["microarch"]],["microarch"]]]],[11,"apic_frequency","","Get the frequency the APIC runs at (in Hz), if we can…",22,[[["self"]],[["u32"],["option",["u32"]]]]],[0,"port","x86_64::hw","",null,null],[3,"Port","x86_64::hw::port","Represents an IO port that can be read and written to…",null,null],[8,"PortSize","","Implemented by the types used to represent 8-bit, 16-bit,…",null,null],[10,"port_read","","",27,[[["u16"]],["self"]]],[10,"port_write","","",27,[[["u16"]]]],[11,"new","","Create a new `Port` at the specified I/O address. Unsafe…",28,[[["u16"]],["port"]]],[11,"read","","",28,[[["self"]],["t"]]],[11,"write","","",28,[[["self"],["t"]]]],[0,"registers","x86_64::hw","",null,null],[3,"CpuFlags","x86_64::hw::registers","A wrapper for the `RFLAGS` register, providing a nice…",null,null],[12,"0","","",29,null],[5,"read_msr","","Read from a model-specific register.",null,[[["u32"]],["u64"]]],[5,"write_msr","","Write to a model-specific register. This is unsafe,…",null,[[["u32"],["u64"]]]],[17,"CR4_RESTRICT_RDTSC","","If this is set, `rdtsc` can only be used in Ring 0.",null,null],[17,"CR4_ENABLE_PAE","","",null,null],[17,"CR4_ENABLE_GLOBAL_PAGES","","",null,null],[17,"CR4_XSAVE_ENABLE_BIT","","",null,null],[17,"EFER","","",null,null],[17,"EFER_ENABLE_SYSCALL","","",null,null],[17,"EFER_ENABLE_LONG_MODE","","",null,null],[17,"EFER_ENABLE_NX_BIT","","",null,null],[17,"IA32_STAR","","Contains the Ring 0 and Ring 3 code-segment selectors…",null,null],[17,"IA32_LSTAR","","Contains the virtual address of the handler to call upon…",null,null],[17,"IA32_FMASK","","Upon `syscall`, the value of this MSR is used to mask…",null,null],[17,"IA32_GS_BASE","","A virtual address can be stored in this MSR, and acts as…",null,null],[11,"read","","Read the contents of `RFLAGS`, creating a `CpuFlags`.",29,[[],["cpuflags"]]],[11,"interrupts_enabled","","",29,[[["self"]],["bool"]]],[0,"serial","x86_64::hw","",null,null],[3,"SerialPort","x86_64::hw::serial","",null,null],[17,"COM1","","",null,null],[11,"new","","",30,[[["u16"]],["serialport"]]],[11,"initialise","","",30,[[["self"]]]],[11,"read","","",30,[[["self"]],["u8"]]],[11,"write","","",30,[[["self"],["u8"]]]],[0,"tlb","x86_64::hw","",null,null],[5,"invalidate_page","x86_64::hw::tlb","",null,[[["virtualaddress"]]]],[5,"flush","","",null,[[]]],[0,"memory","x86_64","",null,null],[4,"Size4KiB","x86_64::memory","",null,null],[4,"Size2MiB","","",null,null],[0,"frame","","",null,null],[3,"Frame","x86_64::memory::frame","",null,null],[12,"start_address","","",31,null],[11,"starts_with","","",31,[[["physicaladdress"]],["frame"]]],[11,"contains","","",31,[[["physicaladdress"]],["frame"]]],[0,"frame_allocator","x86_64::memory","",null,null],[8,"FrameAllocator","x86_64::memory::frame_allocator","`FrameAllocator` represents the `x86_64` crate's interface…",null,null],[11,"allocate","","Allocate a `Frame`.",32,[[["self"]],["frame"]]],[10,"allocate_n","","Allocate `n` contiguous `Frame`s.",32,[[["self"],["usize"]],[["range",["frame"]],["frame"]]]],[10,"free_n","","Free `n` frames that were previously allocated by this…",32,[[["usize"],["self"],["frame"]]]],[0,"kernel_map","x86_64::memory","These constants centralize the layout of the virtual…",null,null],[5,"kernel_stack_area_base","x86_64::memory::kernel_map","",null,[[["usize"]],["virtualaddress"]]],[5,"physical_to_virtual","","Access a given `PhysicalAddress` using the physical memory…",null,[[["physicaladdress"]],["virtualaddress"]]],[17,"STACK_SLOT_SIZE","","The size of a single kernel stack.",null,null],[17,"MAX_TASKS_PER_ADDRESS_SPACE","","",null,null],[17,"MAX_ADDRESS_SPACES","","",null,null],[17,"ADDRESS_SPACE_STACK_SLOT_SIZE","","The size of a slot of stacks that is allocated for a…",null,null],[17,"KERNEL_P4_ENTRY","","The kernel is mapped into the 511th entry of the P4.",null,null],[17,"KERNEL_ADDRESS_SPACE_START","","",null,null],[17,"PHYSICAL_MAPPING_BASE","","The base virtual address of the physical memory mapping.…",null,null],[17,"KERNEL_STACKS_BASE","","",null,null],[17,"KERNEL_BASE","","This is the base of the kernel address space. It starts at…",null,null],[17,"HEAP_START","","The start of the heap. The heap is 200 KiB.",null,null],[17,"HEAP_END","","",null,null],[17,"LOCAL_APIC_CONFIG","","While we could access the local APIC from the physical…",null,null],[17,"BOOT_INFO_NUM_PAGES","","This is the number of 4KiB pages we need to allocate for…",null,null],[17,"BOOT_INFO","","",null,null],[0,"page","x86_64::memory","",null,null],[3,"Page","x86_64::memory::page","",null,null],[12,"start_address","","",33,null],[11,"starts_with","","",33,[[["virtualaddress"]],["page"]]],[11,"contains","","",33,[[["virtualaddress"]],["page"]]],[0,"page_table","x86_64::memory","",null,null],[3,"EntryFlags","x86_64::memory::page_table","",null,null],[3,"Entry","","",null,null],[3,"Table","","",null,null],[3,"PageTable","","",null,null],[3,"Mapper","","",null,null],[12,"physical_base","","",34,null],[12,"p4","","",34,null],[4,"Level4","","",null,null],[4,"Level3","","",null,null],[4,"Level2","","",null,null],[4,"Level1","","",null,null],[4,"TranslationResult","","",null,null],[13,"Frame4KiB","","",35,null],[13,"Frame2MiB","","",35,null],[13,"NotMapped","","",35,null],[4,"MapError","","",null,null],[13,"AlreadyMapped","","",36,null],[13,"TriedToMapInHugePage","","Produced when we tried to create a new page table, but…",36,null],[8,"TableLevel","","",null,null],[8,"HierarchicalLevel","","Tables of levels that implement `HierarchicalLevel` are…",null,null],[16,"NextLevel","","",37,null],[18,"PRESENT","","",38,null],[18,"WRITABLE","","",38,null],[18,"USER_ACCESSIBLE","","",38,null],[18,"WRITE_THROUGH","","",38,null],[18,"NO_CACHE","","",38,null],[18,"ACCESSED","","",38,null],[18,"DIRTY","","",38,null],[18,"HUGE_PAGE","","",38,null],[18,"GLOBAL","","",38,null],[18,"NO_EXECUTE","","",38,null],[11,"empty","","Returns an empty set of flags.",38,[[],["entryflags"]]],[11,"all","","Returns the set containing all flags.",38,[[],["entryflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",38,[[["self"]],["u64"]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",38,[[["u64"]],[["option",["entryflags"]],["entryflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",38,[[["u64"]],["entryflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",38,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",38,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",38,[[["self"],["entryflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",38,[[["self"],["entryflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",38,[[["self"],["entryflags"]]]],[11,"remove","","Removes the specified flags in-place.",38,[[["self"],["entryflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",38,[[["self"],["entryflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the…",38,[[["bool"],["self"],["entryflags"]]]],[11,"unused","","",39,[[],["entry"]]],[11,"is_unused","","",39,[[["self"]],["bool"]]],[11,"flags","","",39,[[["self"]],["entryflags"]]],[11,"address","","",39,[[["self"]],[["physicaladdress"],["option",["physicaladdress"]]]]],[11,"set_unused","","",39,[[["self"]]]],[11,"set","","Set an entry to a given address and set of flags. Cannot…",39,[[["self"],["physicaladdress"],["entryflags"]]]],[11,"new","","",40,[[["self"]],["table"]]],[11,"zero","","",40,[[["self"]]]],[11,"next_table","","Get a reference to the table at the given `index`,…",40,[[["virtualaddress"],["self"],["usize"]],[["option",["table"]],["table"]]]],[11,"next_table_mut","","Get a mutable reference to the table at the given `index`,…",40,[[["virtualaddress"],["self"],["usize"]],[["option",["table"]],["table"]]]],[11,"next_table_create","","",40,[[["virtualaddress"],["usize"],["self"],["a"],["bool"]],[["maperror"],["table"],["result",["table","maperror"]]]]],[11,"new","","",41,[[["virtualaddress"],["frame"]],["pagetable"]]],[11,"from_frame","","Create a `PageTable` from a `Frame` that already contains…",41,[[["virtualaddress"],["frame"]],["pagetable"]]],[11,"mapper","","",41,[[["self"]],["mapper"]]],[11,"switch_to","","",41,[[["self"]]]],[11,"translate","","",34,[[["virtualaddress"],["self"]],["translationresult"]]],[11,"map","","Allocates a `Frame` using the given allocator, and maps…",34,[[["a"],["size4kib"],["self"],["page",["size4kib"]],["entryflags"]],[["maperror"],["result",["frame","maperror"]],["frame"]]]],[11,"map_to","","",34,[[["frame",["size4kib"]],["a"],["size4kib"],["self"],["page",["size4kib"]],["entryflags"]],[["result",["maperror"]],["maperror"]]]],[11,"map_to_2MiB","","",34,[[["frame",["size2mib"]],["size2mib"],["entryflags"],["self"],["a"],["page",["size2mib"]]],[["result",["maperror"]],["maperror"]]]],[11,"map_range_to","","Map a range of pages to a range of frames, all with the…",34,[[["range",["frame"]],["a"],["frame"],["range",["page"]],["self"],["page"],["entryflags"]],[["result",["maperror"]],["maperror"]]]],[11,"unmap","","Unmap the given page, returning the `Frame` it was mapped…",34,[[["self"],["page",["size4kib"]],["size4kib"]],[["frame",["size4kib"]],["option",["frame"]]]]],[0,"physical_address","x86_64::memory","",null,null],[3,"PhysicalAddress","x86_64::memory::physical_address","Represents an address in the physical memory space. A…",null,null],[11,"new","","",42,[[["usize"]],[["physicaladdress"],["option",["physicaladdress"]]]]],[11,"new_unchecked","","",42,[[["usize"]],["physicaladdress"]]],[11,"offset_into_frame","","",42,[[["self"]],["usize"]]],[11,"is_frame_aligned","","",42,[[["self"]],["bool"]]],[11,"align_down","","Get the greatest address less than or equal to this…",42,[[["usize"]],["physicaladdress"]]],[11,"align_up","","",42,[[["usize"]],["physicaladdress"]]],[0,"virtual_address","x86_64::memory","",null,null],[3,"VirtualAddress","x86_64::memory::virtual_address","Represents a canonical virtual address. To be canonical,…",null,null],[11,"new","","Create a new `VirtualAddress` from the given address. If…",43,[[["usize"]],[["virtualaddress"],["option",["virtualaddress"]]]]],[11,"new_unchecked","","Create a new `VirtualAddress` from the given address,…",43,[[["usize"]],["virtualaddress"]]],[11,"new_canonicalise","","Create a new `VirtualAddress` from the given address,…",43,[[["usize"]],["virtualaddress"]]],[11,"from_page_table_offsets","","",43,[[["usize"]],["virtualaddress"]]],[11,"ptr","","",43,[[]]],[11,"mut_ptr","","",43,[[]]],[11,"offset","","",43,[[["isize"],["self"]],["virtualaddress"]]],[11,"offset_into_page","","",43,[[["self"]],["usize"]]],[11,"is_page_aligned","","",43,[[["self"]],["bool"]]],[11,"is_aligned_to","","",43,[[["self"],["usize"]],["bool"]]],[11,"align_down","","Get the greatest address `x` with the given alignment such…",43,[[["self"],["usize"]],["virtualaddress"]]],[11,"align_up","","Get the smallest address `x` with the given alignment such…",43,[[["self"],["usize"]],["virtualaddress"]]],[11,"canonicalise","","Addresses are always expected by the CPU to be canonical…",43,[[],["virtualaddress"]]],[11,"p4_index","","",43,[[["self"]],["usize"]]],[11,"p3_index","","",43,[[["self"]],["usize"]]],[11,"p2_index","","",43,[[["self"]],["usize"]]],[11,"p1_index","","",43,[[["self"]],["usize"]]],[17,"KIBIBYTES_TO_BYTES","x86_64::memory","Multiply by this to turn KiB into bytes",null,null],[17,"MEBIBYTES_TO_BYTES","","Multiply by this to turn MiB into bytes",null,null],[17,"GIBIBYTES_TO_BYTES","","Multiply by this to turn GiB into bytes",null,null],[8,"FrameSize","","Implemented by marker types that denote the various sizes…",null,null],[18,"SIZE","","Frame size in bytes",44,null],[18,"LOG2_SIZE","","The log2 of the frame size (in bytes). This makes some…",44,null],[14,"getter","x86_64","",null,null],[14,"read_control_reg","","Read a control register. The name of the control register…",null,null],[14,"write_control_reg","","Write to a control register. Calls to this macro will need…",null,null],[11,"from","x86_64::boot","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"into","","",0,[[],["u"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"into","","",1,[[],["u"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"into","","",2,[[],["u"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"into","","",3,[[],["u"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"into","","",4,[[],["u"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"into","","",5,[[],["u"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"into","","",6,[[],["u"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"from","x86_64::hw","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"into","","",7,[[],["u"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","x86_64::hw::gdt","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"into","","",8,[[],["u"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"into","","",10,[[],["u"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"into","","",11,[[],["u"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"into","","",12,[[],["u"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"into","","",13,[[],["u"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"into","","",9,[[],["u"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"from","x86_64::hw::tss","",14,[[["t"]],["t"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"into","","",14,[[],["u"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"from","x86_64::hw::idt","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"into","","",16,[[],["u"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"into","","",17,[[],["u"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"into","","",15,[[],["u"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"from","x86_64::hw::i8259_pic","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"into","","",18,[[],["u"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","x86_64::hw::local_apic","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"into","","",19,[[],["u"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"into","","",20,[[],["u"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","x86_64::hw::cpu","",21,[[["t"]],["t"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"into","","",21,[[],["u"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"into","","",22,[[],["u"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"into","","",23,[[],["u"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"into","","",45,[[],["u"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"into","","",24,[[],["u"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"into","","",25,[[],["u"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"into","","",26,[[],["u"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","x86_64::hw::port","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"into","","",28,[[],["u"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","x86_64::hw::registers","",29,[[["t"]],["t"]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"into","","",29,[[],["u"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"from","x86_64::hw::serial","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"into","","",30,[[],["u"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","x86_64::memory","",46,[[["t"]],["t"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"into","","",46,[[],["u"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"to_owned","","",46,[[["self"]],["t"]]],[11,"clone_into","","",46,[[["self"],["t"]]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"into","","",47,[[],["u"]]],[11,"try_into","","",47,[[],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"type_id","","",47,[[["self"]],["typeid"]]],[11,"to_owned","","",47,[[["self"]],["t"]]],[11,"clone_into","","",47,[[["self"],["t"]]]],[11,"from","x86_64::memory::frame","",31,[[["t"]],["t"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"into","","",31,[[],["u"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"to_owned","","",31,[[["self"]],["t"]]],[11,"clone_into","","",31,[[["self"],["t"]]]],[11,"from","x86_64::memory::page","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"into","","",33,[[],["u"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"from","x86_64::memory::page_table","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"into","","",38,[[],["u"]]],[11,"try_into","","",38,[[],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"type_id","","",38,[[["self"]],["typeid"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,[[["self"],["t"]]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"into","","",39,[[],["u"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"into","","",40,[[],["u"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"into","","",41,[[],["u"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"into","","",34,[[],["u"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"into","","",48,[[],["u"]]],[11,"try_into","","",48,[[],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"into","","",49,[[],["u"]]],[11,"try_into","","",49,[[],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"into","","",50,[[],["u"]]],[11,"try_into","","",50,[[],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"into","","",51,[[],["u"]]],[11,"try_into","","",51,[[],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"into","","",35,[[],["u"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"into","","",36,[[],["u"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from","x86_64::memory::physical_address","",42,[[["t"]],["t"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"into","","",42,[[],["u"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"from","x86_64::memory::virtual_address","",43,[[["t"]],["t"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"into","","",43,[[],["u"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"from","","",43,[[],["virtualaddress"]]],[11,"from","","",43,[[],["virtualaddress"]]],[11,"fmt","x86_64::boot","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::hw::gdt","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::hw::tss","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::hw::idt","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::hw::cpu","",24,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",45,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::hw::registers","",29,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::frame","",31,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::page","",33,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::page_table","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",35,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",36,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::physical_address","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::virtual_address","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory","",46,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",47,[[["formatter"],["self"]],["result"]]],[11,"sub","x86_64::memory::page_table","Returns the set difference of the two sets of flags.",38,[[["entryflags"]],["entryflags"]]],[11,"sub","x86_64::memory::physical_address","",42,[[["usize"]]]],[11,"sub","x86_64::memory::virtual_address","",43,[[["usize"]]]],[11,"eq","x86_64::boot","",5,[[["memorytype"],["self"]],["bool"]]],[11,"eq","x86_64::hw::gdt","",9,[[["privilegelevel"],["self"]],["bool"]]],[11,"eq","x86_64::hw::cpu","",24,[[["vendor"],["self"]],["bool"]]],[11,"eq","","",26,[[["hypervisorvendor"],["self"]],["bool"]]],[11,"eq","x86_64::memory::frame","",31,[[["frame"],["self"]],["bool"]]],[11,"ne","","",31,[[["frame"],["self"]],["bool"]]],[11,"eq","x86_64::memory::page","",33,[[["self"],["page"]],["bool"]]],[11,"ne","","",33,[[["self"],["page"]],["bool"]]],[11,"eq","x86_64::memory::page_table","",38,[[["self"],["entryflags"]],["bool"]]],[11,"ne","","",38,[[["self"],["entryflags"]],["bool"]]],[11,"eq","x86_64::memory::physical_address","",42,[[["self"],["physicaladdress"]],["bool"]]],[11,"eq","x86_64::memory::virtual_address","",43,[[["virtualaddress"],["self"]],["bool"]]],[11,"eq","x86_64::memory","",46,[[["size4kib"],["self"]],["bool"]]],[11,"eq","","",47,[[["size2mib"],["self"]],["bool"]]],[11,"cmp","x86_64::memory::frame","",31,[[["frame"],["self"]],["ordering"]]],[11,"cmp","x86_64::memory::page","",33,[[["self"],["page"]],["ordering"]]],[11,"cmp","x86_64::memory::page_table","",38,[[["self"],["entryflags"]],["ordering"]]],[11,"cmp","x86_64::memory::physical_address","",42,[[["self"],["physicaladdress"]],["ordering"]]],[11,"cmp","x86_64::memory::virtual_address","",43,[[["virtualaddress"],["self"]],["ordering"]]],[11,"cmp","x86_64::memory","",46,[[["size4kib"],["self"]],["ordering"]]],[11,"cmp","","",47,[[["size2mib"],["self"]],["ordering"]]],[11,"partial_cmp","x86_64::memory::frame","",31,[[["frame"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",31,[[["frame"],["self"]],["bool"]]],[11,"le","","",31,[[["frame"],["self"]],["bool"]]],[11,"gt","","",31,[[["frame"],["self"]],["bool"]]],[11,"ge","","",31,[[["frame"],["self"]],["bool"]]],[11,"partial_cmp","x86_64::memory::page","",33,[[["self"],["page"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",33,[[["self"],["page"]],["bool"]]],[11,"le","","",33,[[["self"],["page"]],["bool"]]],[11,"gt","","",33,[[["self"],["page"]],["bool"]]],[11,"ge","","",33,[[["self"],["page"]],["bool"]]],[11,"partial_cmp","x86_64::memory::page_table","",38,[[["self"],["entryflags"]],[["ordering"],["option",["ordering"]]]]],[11,"lt","","",38,[[["self"],["entryflags"]],["bool"]]],[11,"le","","",38,[[["self"],["entryflags"]],["bool"]]],[11,"gt","","",38,[[["self"],["entryflags"]],["bool"]]],[11,"ge","","",38,[[["self"],["entryflags"]],["bool"]]],[11,"partial_cmp","x86_64::memory::physical_address","",42,[[["self"],["physicaladdress"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","x86_64::memory::virtual_address","",43,[[["virtualaddress"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","x86_64::memory","",46,[[["size4kib"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",47,[[["size2mib"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"add","x86_64::memory::frame","",31,[[["usize"]]]],[11,"add","x86_64::memory::page","",33,[[["usize"]]]],[11,"add","x86_64::memory::physical_address","",42,[[["usize"]]]],[11,"add","x86_64::memory::virtual_address","",43,[[["usize"]]]],[11,"add_assign","x86_64::memory::frame","",31,[[["self"],["usize"]]]],[11,"add_assign","x86_64::memory::page","",33,[[["self"],["usize"]]]],[11,"add_assign","x86_64::memory::physical_address","",42,[[["self"],["usize"]]]],[11,"add_assign","x86_64::memory::virtual_address","",43,[[["self"],["usize"]]]],[11,"sub_assign","x86_64::memory::page_table","Disables all flags enabled in the set.",38,[[["self"],["entryflags"]]]],[11,"sub_assign","x86_64::memory::physical_address","",42,[[["self"],["usize"]]]],[11,"sub_assign","x86_64::memory::virtual_address","",43,[[["self"],["usize"]]]],[11,"not","x86_64::memory::page_table","Returns the complement of this set of flags.",38,[[],["entryflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",38,[[["entryflags"]],["entryflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",38,[[["entryflags"]],["entryflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",38,[[["entryflags"]],["entryflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",38,[[["self"],["entryflags"]]]],[11,"bitor_assign","","Adds the set of flags.",38,[[["self"],["entryflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",38,[[["self"],["entryflags"]]]],[11,"index","x86_64::hw::idt","",17,[[["self"],["u8"]]]],[11,"index","x86_64::memory::page_table","",40,[[["self"],["usize"]]]],[11,"index_mut","x86_64::hw::idt","",17,[[["self"],["u8"]]]],[11,"index_mut","x86_64::memory::page_table","",40,[[["self"],["usize"]]]],[11,"hash","","",38,[[["self"],["__h"]]]],[11,"steps_between","x86_64::memory::frame","",31,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"replace_one","","",31,[[["self"]],["self"]]],[11,"replace_zero","","",31,[[["self"]],["self"]]],[11,"add_one","","",31,[[["self"]],["self"]]],[11,"sub_one","","",31,[[["self"]],["self"]]],[11,"add_usize","","",31,[[["self"],["usize"]],["option"]]],[11,"steps_between","x86_64::memory::page","",33,[[["self"]],[["usize"],["option",["usize"]]]]],[11,"replace_one","","",33,[[["self"]],["self"]]],[11,"replace_zero","","",33,[[["self"]],["self"]]],[11,"add_one","","",33,[[["self"]],["self"]]],[11,"sub_one","","",33,[[["self"]],["self"]]],[11,"add_usize","","",33,[[["self"],["usize"]],["option"]]],[11,"extend","x86_64::memory::page_table","",38,[[["self"],["intoiterator"]]]],[11,"from_iter","","",38,[[["intoiterator"]],["entryflags"]]],[11,"write_str","x86_64::hw::serial","",30,[[["str"],["self"]],["result"]]],[11,"fmt","x86_64::memory::page_table","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::physical_address","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::virtual_address","",43,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::page_table","",38,[[["self"],["formatter"]],["result"]]],[11,"fmt","x86_64::memory::physical_address","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","x86_64::memory::virtual_address","",43,[[["formatter"],["self"]],["result"]]],[11,"clone","x86_64::boot","",5,[[["self"]],["memorytype"]]],[11,"clone","","",1,[[["self"]],["memoryobjectinfo"]]],[11,"clone","","",2,[[["self"]],["imageinfo"]]],[11,"clone","","",6,[[["self"]],["pixelformat"]]],[11,"clone","","",3,[[["self"]],["videoinfo"]]],[11,"clone","x86_64::hw::gdt","",9,[[["self"]],["privilegelevel"]]],[11,"clone","","",8,[[["self"]],["segmentselector"]]],[11,"clone","","",12,[[["self"]],["tsssegment"]]],[11,"clone","x86_64::hw::tss","",14,[[["self"]],["tss"]]],[11,"clone","x86_64::hw::idt","",16,[[["self"]],["idtentry"]]],[11,"clone","","",15,[[["self"]],["interruptstackframe"]]],[11,"clone","x86_64::hw::registers","",29,[[["self"]],["cpuflags"]]],[11,"clone","x86_64::memory::frame","",31,[[["self"]],["frame"]]],[11,"clone","x86_64::memory::page","",33,[[["self"]],["page"]]],[11,"clone","x86_64::memory::page_table","",38,[[["self"]],["entryflags"]]],[11,"clone","","",39,[[["self"]],["entry"]]],[11,"clone","x86_64::memory::physical_address","",42,[[["self"]],["physicaladdress"]]],[11,"clone","x86_64::memory::virtual_address","",43,[[["self"]],["virtualaddress"]]],[11,"clone","x86_64::memory","",46,[[["self"]],["size4kib"]]],[11,"clone","","",47,[[["self"]],["size2mib"]]],[11,"default","x86_64::boot","",0,[[],["self"]]],[11,"default","","",1,[[],["memoryobjectinfo"]]],[11,"default","","",2,[[],["imageinfo"]]],[11,"default","x86_64::memory::page_table","",38,[[],["entryflags"]]],[11,"default","x86_64::memory::physical_address","",42,[[],["physicaladdress"]]],[11,"default","x86_64::memory::virtual_address","",43,[[],["virtualaddress"]]]],"p":[[3,"MemoryEntry"],[3,"MemoryObjectInfo"],[3,"ImageInfo"],[3,"VideoInfo"],[3,"BootInfo"],[4,"MemoryType"],[4,"PixelFormat"],[3,"DescriptorTablePointer"],[3,"SegmentSelector"],[4,"PrivilegeLevel"],[3,"CodeSegment"],[3,"DataSegment"],[3,"TssSegment"],[3,"Gdt"],[3,"Tss"],[3,"InterruptStackFrame"],[3,"IdtEntry"],[3,"Idt"],[3,"Pic"],[3,"LocalApicRegister"],[3,"LocalApic"],[3,"SupportedFeatures"],[3,"CpuInfo"],[3,"ModelInfo"],[4,"Vendor"],[4,"Microarch"],[4,"HypervisorVendor"],[8,"PortSize"],[3,"Port"],[3,"CpuFlags"],[3,"SerialPort"],[3,"Frame"],[8,"FrameAllocator"],[3,"Page"],[3,"Mapper"],[4,"TranslationResult"],[4,"MapError"],[8,"HierarchicalLevel"],[3,"EntryFlags"],[3,"Entry"],[3,"Table"],[3,"PageTable"],[3,"PhysicalAddress"],[3,"VirtualAddress"],[8,"FrameSize"],[3,"HypervisorInfo"],[4,"Size4KiB"],[4,"Size2MiB"],[4,"Level4"],[4,"Level3"],[4,"Level2"],[4,"Level1"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);